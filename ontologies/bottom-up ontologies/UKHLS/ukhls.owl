Prefix(:=<http://www.glamurs.eu/ontologies/2016/TBOX/bottom-up/ukhls#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.glamurs.eu/ontologies/2016/TBOX/bottom-up/ukhls>
Annotation(rdfs:comment "2016-09-16"^^xsd:date)
Annotation(rdfs:isDefinedBy :author:DougSalt)
Annotation(owl:versionInfo "1.0"^^xsd:decimal)

Declaration(Class(:ALevel))
Declaration(Class(:ASLevel))
Declaration(Class(:Adult))
Declaration(Class(:Alcohol))
Declaration(Class(:AllianceParty))
Declaration(Class(:Apprenticeship))
Declaration(Class(:BTECOrBECOrTECOrEdexcelOrLQL))
Declaration(Class(:BasicSkills))
Declaration(Class(:Bedroom))
Declaration(Class(:BritishNationalParty))
Declaration(Class(:BusOrCoach))
Declaration(Class(:BusinessIncome))
Declaration(Class(:CSE))
Declaration(Class(:Car))
Declaration(Class(:CarOrVan))
Declaration(Class(:Carer))
Declaration(Class(:CertificateOfSixthYearStudies))
Declaration(Class(:Child))
Declaration(Class(:ChildAged_00_to_02))
Declaration(Class(:ChildAged_00_to_09))
Declaration(Class(:ChildAged_03_to_04))
Declaration(Class(:ChildAged_05_to_11))
Declaration(Class(:ChildAged_10_to_15))
Declaration(Class(:ChildAged_12_to_15))
Declaration(Class(:ChristianParty))
Declaration(Class(:Citizen))
Declaration(Class(:CityAndGuildCertificate))
Declaration(Class(:CoalitionGovernment))
Declaration(Class(:CohabitingAdult))
Declaration(Class(:ColourTelevision))
Declaration(Class(:CombinedElectricityAndGas))
Declaration(Class(:CommunistParty))
Declaration(Class(:CompactDiscPlayer))
Declaration(Class(:Conservative))
Declaration(Class(:ConsumerDuarable))
Declaration(Class(:ConsumerElectronics))
Declaration(Class(:Consumption))
Declaration(Class(:Couple))
Declaration(Class(:Currency))
Declaration(Class(:Cycle))
Declaration(Class(:Day))
Declaration(Class(:DemocraticUnionist))
Declaration(Class(:DiplomaInHigherEducation))
Declaration(Class(:Dishwasher))
Declaration(Class(:DrivenByHouseholdMember))
Declaration(Class(:DrivenByNoneHouseholdMember))
Declaration(Class(:Earnings))
Declaration(Class(:EconomicActivity))
Declaration(Class(:Electricity))
Declaration(Class(:EnglishDemocrats))
Declaration(Class(:EntryLevelQualificationWalesOnly))
Declaration(Class(:ExternalPowerSupply))
Declaration(Class(:Female))
Declaration(Class(:FirstDegreeOrEquivalent))
Declaration(Class(:Food))
Declaration(Class(:FoodAndDrink))
Declaration(Class(:FoodPurchasedFromSupermarket))
Declaration(Class(:FormOfEmployment))
Declaration(Class(:Freezer))
Declaration(Class(:FullTime))
Declaration(Class(:GCSEOrOLevel))
Declaration(Class(:GNVQOrGSVQ))
Declaration(Class(:GardenWaste))
Declaration(Class(:Gas))
Declaration(Class(:GovernmentOfficeRegion))
Declaration(Class(:GovernmentTrainingScheme))
Declaration(Class(:GreenParty))
Declaration(Class(:GroupOfPeople))
Declaration(Class(:GroupOfTwoPeople))
Declaration(Class(:HNCOrHND))
Declaration(Class(:HigherDegree))
Declaration(Class(:HighersScotland))
Declaration(Class(:HomeComputer))
Declaration(Class(:HomeGeneration))
Declaration(Class(:Hour))
Declaration(Class(:Household))
Declaration(Class(:HouseholdIncome))
Declaration(Class(:HouseholdIncomeGrossMonthBeforeInterview))
Declaration(Class(:HouseholdIncomeNetNoDeductions))
Declaration(Class(:HouseholdMortgaged))
Declaration(Class(:HouseholdOwned))
Declaration(Class(:HouseholdOwnedOutright))
Declaration(Class(:HouseholdRented))
Declaration(Class(:HouseholdRentedFromCouncilOrLocalAuthority))
Declaration(Class(:HouseholdRentedFromEmployerOfAResident))
Declaration(Class(:HouseholdRentedFromHousingAssociation))
Declaration(Class(:HouseholdRentedPrivately))
Declaration(Class(:HouseholdRentedPrivatelyFurnished))
Declaration(Class(:HouseholdRentedPrivatelyUnfurnished))
Declaration(Class(:HouseholdRentedWithHeatingAndLightingIncluded))
Declaration(Class(:HouseholdRentedWithSewageAndWaterChargesIncluded))
Declaration(Class(:HouseholdSharedOwnership))
Declaration(Class(:HouseholdTenure))
Declaration(Class(:HouseholdTenureOther))
Declaration(Class(:HouseholdWaste))
Declaration(Class(:HouseholdWithExternalPowerSupply))
Declaration(Class(:HouseholdWithNoExternalPowerSupply))
Declaration(Class(:HouseholdWithUseOfAppliances))
Declaration(Class(:HouseholdWithUseOfNoAppliances))
Declaration(Class(:Income))
Declaration(Class(:Independent))
Declaration(Class(:IndeterminateResponse))
Declaration(Class(:InternationalBaccalaureate))
Declaration(Class(:InvestmentIncome))
Declaration(Class(:KeySkills))
Declaration(Class(:Labour))
Declaration(Class(:Landline))
Declaration(Class(:LatestSecondJobIncome))
Declaration(Class(:LiberalDemocrat))
Declaration(Class(:Location))
Declaration(Class(:LongTermSickOrDisabled))
Declaration(Class(:Male))
Declaration(Class(:MaternityLeave))
Declaration(Class(:MealsAndSnacksOutsideTheHome))
Declaration(Class(:MebyonKernow))
Declaration(Class(:MicrowaveOven))
Declaration(Class(:Minutes))
Declaration(Class(:MiscellaneousIncome))
Declaration(Class(:Missing))
Declaration(Class(:MobilePhone))
Declaration(Class(:ModernOrTradeApprentice))
Declaration(Class(:MonsterRavingLoonyParty))
Declaration(Class(:Month))
Declaration(Class(:MonthlyIncomeComponentAmount))
Declaration(Class(:MonthlyPersonalIncome))
Declaration(Class(:MotorCycleOrMopedOrScooter))
Declaration(Class(:NVQOrSVQLevel_1_2))
Declaration(Class(:NVQOrSVQLevel_3_5))
Declaration(Class(:NationalFront))
Declaration(Class(:NegativeResponse))
Declaration(Class(:NetEarningsPrimaryJob))
Declaration(Class(:NetEarningsSecondJob))
Declaration(Class(:NetLabourIncome))
Declaration(Class(:NoExternalPowerSupply))
Declaration(Class(:NoQualifications))
Declaration(Class(:NoRecognizedConsumerElectronics))
Declaration(Class(:NoRecognizedWhiteGood))
Declaration(Class(:NonUKCitizen))
Declaration(Class(:NonUKQualification))
Declaration(Class(:NotPermanent))
Declaration(Class(:NotSelfEmployed))
Declaration(Class(:NotSelfEmployedPerson))
Declaration(Class(:NursingOrOtherMedicalQualification))
Declaration(Class(:OECDAdult))
Declaration(Class(:OECDChild))
Declaration(Class(:OECDDefinedPerson))
Declaration(Class(:ONCOrOND))
Declaration(Class(:Oil))
Declaration(Class(:OtherPoliticalParty))
Declaration(Class(:OtherQualification))
Declaration(Class(:OtherRoom))
Declaration(Class(:OtherSchoolCertificate))
Declaration(Class(:OtherTransport))
Declaration(Class(:OtherVocationalTechnicalOrProfessionalQualification))
Declaration(Class(:PartTime))
Declaration(Class(:PayFromSecondJob))
Declaration(Class(:PaymentPeriod))
Declaration(Class(:PaymentPeriodOfACalendarMonth))
Declaration(Class(:PaymentPeriodOfAFortnight))
Declaration(Class(:PaymentPeriodOfANinthOfAYear))
Declaration(Class(:PaymentPeriodOfAWeek))
Declaration(Class(:PaymentPeriodOfAYear))
Declaration(Class(:PaymentPeriodOfAnHour))
Declaration(Class(:PaymentPeriodOfFourWeeks))
Declaration(Class(:PaymentPeriodOfLessThanAWeek))
Declaration(Class(:PaymentPeriodOfPeriodOfEmployment))
Declaration(Class(:PaymentPeriodOfSixMonths))
Declaration(Class(:PaymentPeriodOfThreeWeeks))
Declaration(Class(:PaymentPeriodOfTwoMonths))
Declaration(Class(:PaymentPeriodUnspecified))
Declaration(Class(:PensionIncome))
Declaration(Class(:PensionableAgeFemale))
Declaration(Class(:PensionableAgeMale))
Declaration(Class(:PensionableAgePerson))
Declaration(Class(:Permanent))
Declaration(Class(:Person))
Declaration(Class(:PersonInEmployment))
Declaration(Class(:PersonInFullTimeEmployment))
Declaration(Class(:PersonInPaidEmployment))
Declaration(Class(:PersonInPartTimeEmployment))
Declaration(Class(:PersonInUnpaidEmployment))
Declaration(Class(:PersonWithNoUKVocationalQualifications))
Declaration(Class(:PersonWithPermanentEmploymentContract))
Declaration(Class(:PersonWithTemporaryEmploymentContract))
Declaration(Class(:PersonWithUKVocationalQualifications))
Declaration(Class(:PersonalIncome))
Declaration(Class(:PlaidCymru))
Declaration(Class(:PoliticalParty))
Declaration(Class(:PowerSupply))
Declaration(Class(:PrimaryJob))
Declaration(Class(:PrivateBenefitIncome))
Declaration(Class(:Proxy))
Declaration(Class(:Qualification))
Declaration(Class(:RSAOrOCROrCleriOrCommQualification))
Declaration(Class(:Refused))
Declaration(Class(:Respect))
Declaration(Class(:Retired))
Declaration(Class(:Room))
Declaration(Class(:SDLP))
Declaration(Class(:ScotVECorScoTECOrScotBEC))
Declaration(Class(:ScottishNationalParty))
Declaration(Class(:ScottishQualification))
Declaration(Class(:SecondJob))
Declaration(Class(:SelfDriven))
Declaration(Class(:SelfEmployed))
Declaration(Class(:SelfEmployedIncome))
Declaration(Class(:SelfEmployedPerson))
Declaration(Class(:ShareOfIncomeFromBenefitsAndIncomeNEC))
Declaration(Class(:SingleAdult))
Declaration(Class(:SinnFein))
Declaration(Class(:SocialBenefitIncome))
Declaration(Class(:Socialist))
Declaration(Class(:SolarHeatedWater))
Declaration(Class(:SolarPanels))
Declaration(Class(:SolidFuelOrOther))
Declaration(Class(:StandardOrOrdinaryOrLowerScotland))
Declaration(Class(:Student))
Declaration(Class(:TakeHomePay))
Declaration(Class(:TaxiOrMiniCab))
Declaration(Class(:TeachingQualification))
Declaration(Class(:Telephone))
Declaration(Class(:Temporary))
Declaration(Class(:TimePeriod))
Declaration(Class(:TotalEarningsWeekNoIncome))
Declaration(Class(:TotalEarningsWeekly))
Declaration(Class(:TotalEarningsWeekly100To149))
Declaration(Class(:TotalEarningsWeekly150To239))
Declaration(Class(:TotalEarningsWeekly240To319))
Declaration(Class(:TotalEarningsWeekly320To379))
Declaration(Class(:TotalEarningsWeekly380To459))
Declaration(Class(:TotalEarningsWeekly460To559))
Declaration(Class(:TotalEarningsWeekly560To669))
Declaration(Class(:TotalEarningsWeekly670To859))
Declaration(Class(:TotalEarningsWeekly860OrMore))
Declaration(Class(:TotalEarningsWeeklyUpTo99))
Declaration(Class(:TotalEarningsYearly))
Declaration(Class(:TotalEarningsYearly12500To16599))
Declaration(Class(:TotalEarningsYearly16600To19999))
Declaration(Class(:TotalEarningsYearly20000To23999))
Declaration(Class(:TotalEarningsYearly24000To29999))
Declaration(Class(:TotalEarningsYearly30000To34999))
Declaration(Class(:TotalEarningsYearly35000To44999))
Declaration(Class(:TotalEarningsYearly45000OrMore))
Declaration(Class(:TotalEarningsYearly5200To7799))
Declaration(Class(:TotalEarningsYearly7800To12499))
Declaration(Class(:TotalEarningsYearlyNoIncome))
Declaration(Class(:TotalEarningsYearlyUpTo5199))
Declaration(Class(:TotalMonthlyLabourIncome))
Declaration(Class(:TotalMonthlyPersonalIncome))
Declaration(Class(:TotalNetPersonalIncome))
Declaration(Class(:TotalPersonalIncome))
Declaration(Class(:TotalPersonalIncomeWeekly))
Declaration(Class(:TotalPersonalIncomeWeekly140To199))
Declaration(Class(:TotalPersonalIncomeWeekly200To249))
Declaration(Class(:TotalPersonalIncomeWeekly250To324))
Declaration(Class(:TotalPersonalIncomeWeekly325To399))
Declaration(Class(:TotalPersonalIncomeWeekly400To499))
Declaration(Class(:TotalPersonalIncomeWeekly500To624))
Declaration(Class(:TotalPersonalIncomeWeekly625To749))
Declaration(Class(:TotalPersonalIncomeWeekly750OrMore))
Declaration(Class(:TotalPersonalIncomeWeekly75To139))
Declaration(Class(:TotalPersonalIncomeWeeklyNoIncome))
Declaration(Class(:TotalPersonalIncomeWeeklyUpTo74))
Declaration(Class(:TotalPersonalIncomeYearly))
Declaration(Class(:TotalPersonalIncomeYearly12600To15599))
Declaration(Class(:TotalPersonalIncomeYearly15600To19199))
Declaration(Class(:TotalPersonalIncomeYearly19200To23999))
Declaration(Class(:TotalPersonalIncomeYearly24000To29999))
Declaration(Class(:TotalPersonalIncomeYearly30000To35999))
Declaration(Class(:TotalPersonalIncomeYearly36000OrMore))
Declaration(Class(:TotalPersonalIncomeYearly3600To6599))
Declaration(Class(:TotalPersonalIncomeYearly6600To9599))
Declaration(Class(:TotalPersonalIncomeYearly9600To12599))
Declaration(Class(:TotalPersonalIncomeYearlyNone))
Declaration(Class(:TotalPersonalIncomeYearlyUpTo3599))
Declaration(Class(:TraditionalUnionistVoice))
Declaration(Class(:Train))
Declaration(Class(:TramOrUndergroundOrMetroOrLightRailway))
Declaration(Class(:Transport))
Declaration(Class(:TravelTimeToWork))
Declaration(Class(:TravelTimeToWorkAndNotSelfEmployed))
Declaration(Class(:TravelTimeToWorkAndSelfEmployed))
Declaration(Class(:TumbleDryer))
Declaration(Class(:UKCitizen))
Declaration(Class(:UKIndependenceParty))
Declaration(Class(:UKQualification))
Declaration(Class(:UlsterUnionist))
Declaration(Class(:Unemployed))
Declaration(Class(:UnemployedPerson))
Declaration(Class(:Units))
Declaration(Class(:UnitsOfMonetaryValue))
Declaration(Class(:UnitsOfTime))
Declaration(Class(:Unknown))
Declaration(Class(:UnpaidWork))
Declaration(Class(:UnpaidWorkForFamilyBusiness))
Declaration(Class(:UsualGrossPayPerMonthForPrimaryJob))
Declaration(Class(:UsualGrossPayPerMonthIfSelfEmployed))
Declaration(Class(:UsualNetPayPerMonthForPrimaryJob))
Declaration(Class(:UsualNetPayPerMonthIfSelfEmployed))
Declaration(Class(:UsualPayFromSecondJob))
Declaration(Class(:UsualPayPerMonthForPrimaryJob))
Declaration(Class(:UsualPayPerMonthIfSelfEmployed))
Declaration(Class(:Van))
Declaration(Class(:VideoRecorderOrDVDPlayer))
Declaration(Class(:VocationalOrProfessionalOrTechnicalQualification))
Declaration(Class(:Walk))
Declaration(Class(:WashingMachine))
Declaration(Class(:WasteGlassBottles))
Declaration(Class(:WastePaper))
Declaration(Class(:WastePlasticBags))
Declaration(Class(:Wave))
Declaration(Class(:WaveA))
Declaration(Class(:WaveD))
Declaration(Class(:Week))
Declaration(Class(:WeeklyPersonalIncome))
Declaration(Class(:WelshBacculaureate))
Declaration(Class(:WelshQualfication))
Declaration(Class(:WhiteGood))
Declaration(Class(:WindTurbine))
Declaration(Class(:Year))
Declaration(Class(:YearlyIncomeFromInvestmentsAndSavings))
Declaration(Class(:YearlyPersonalIncome))
Declaration(Class(:YoungestChild))
Declaration(Class(:YouthTraningCertificate))
Declaration(Class(owl:Thing))
Declaration(ObjectProperty(:consumes))
Declaration(ObjectProperty(:consumesAlcohol))
Declaration(ObjectProperty(:consumesCombinedElectricityAndGas))
Declaration(ObjectProperty(:consumesElectricity))
Declaration(ObjectProperty(:consumesFood))
Declaration(ObjectProperty(:consumesFoodAndDrink))
Declaration(ObjectProperty(:consumesFoodPurchasedFromSupermarket))
Declaration(ObjectProperty(:consumesGas))
Declaration(ObjectProperty(:consumesMealsAndSnacksOutsideTheHome))
Declaration(ObjectProperty(:consumesOil))
Declaration(ObjectProperty(:consumesPower))
Declaration(ObjectProperty(:consumesSolidFuelOrOther))
Declaration(ObjectProperty(:consumptionFuelCostForCombinedElectricityAndGasIsMeasuredBy))
Declaration(ObjectProperty(:consumptionFuelCostForElectricityIsMeasuredBy))
Declaration(ObjectProperty(:consumptionFuelCostForGasIsMeasuredBy))
Declaration(ObjectProperty(:consumptionFuelCostForOilIsMeasuredBy))
Declaration(ObjectProperty(:consumptionFuelCostForSolidFuelOrOtherIsMeasuredBy))
Declaration(ObjectProperty(:consumptionIsMeasuredBy))
Declaration(ObjectProperty(:consumptionOfAlcoholIsMeasuredBy))
Declaration(ObjectProperty(:consumptionOfFoodAndIsDrinkMeasuredBy))
Declaration(ObjectProperty(:consumptionOfFoodAndSnacksOutsideTheHomeIsMeasuredBy))
Declaration(ObjectProperty(:consumptionOfFuelIsMeasuredBy))
Declaration(ObjectProperty(:coupleContainsAdult))
Declaration(ObjectProperty(:earningIsMeasuredBy))
Declaration(ObjectProperty(:haOutrightOwner))
Declaration(ObjectProperty(:hasBTECorBECorTECorEdexcelOrLQL))
Declaration(ObjectProperty(:hasBasicSkills))
Declaration(ObjectProperty(:hasBedroom))
Declaration(ObjectProperty(:hasBusinessIncome))
Declaration(ObjectProperty(:hasCityAndGuildsCertificate))
Declaration(ObjectProperty(:hasCurrentEconomicActivityOf))
Declaration(ObjectProperty(:hasEarnings))
Declaration(ObjectProperty(:hasElectricitySupply))
Declaration(ObjectProperty(:hasEntryLevelQualificationWales))
Declaration(ObjectProperty(:hasExternalPowerSupply))
Declaration(ObjectProperty(:hasFullOrPartTimePrimaryJob))
Declaration(ObjectProperty(:hasFullOrPartTimePrimaryJobAndNotSelfEmployed))
Declaration(ObjectProperty(:hasFullOrPartTimePrimaryJobAndSelfEmployed))
Declaration(ObjectProperty(:hasGNVQorSNVQ))
Declaration(ObjectProperty(:hasGasSupply))
Declaration(ObjectProperty(:hasGroupMember))
Declaration(ObjectProperty(:hasGroupMemberInGroupOfTwoPeople))
Declaration(ObjectProperty(:hasGroupOfPeopleProperty))
Declaration(ObjectProperty(:hasHNCOrHND))
Declaration(ObjectProperty(:hasHighestQualification))
Declaration(ObjectProperty(:hasHighestQualificationDerived))
Declaration(ObjectProperty(:hasHomeGeneratedPower))
Declaration(ObjectProperty(:hasHomeGeneratedSolarPower))
Declaration(ObjectProperty(:hasHomeGeneratedSolarWaterHeating))
Declaration(ObjectProperty(:hasHomeGeneratedWindPower))
Declaration(ObjectProperty(:hasHouseholdIncomeGrossMonthBeforeInterview))
Declaration(ObjectProperty(:hasHouseholdIncomeNetNoDeductions))
Declaration(ObjectProperty(:hasHouseholdProperty))
Declaration(ObjectProperty(:hasHusbandWifeOrCivilPartner))
Declaration(ObjectProperty(:hasIncomeOf))
Declaration(ObjectProperty(:hasInvestmentIncome))
Declaration(ObjectProperty(:hasKeySkills))
Declaration(ObjectProperty(:hasLastJobSOC2000Condensed))
Declaration(ObjectProperty(:hasLoneParentResident))
Declaration(ObjectProperty(:hasMiscellaneousIncome))
Declaration(ObjectProperty(:hasMonthlyIncomeComponentAmount))
Declaration(ObjectProperty(:hasNVQOrSVQLevel_1_2))
Declaration(ObjectProperty(:hasNVQOrSVQLevel_3_5))
Declaration(ObjectProperty(:hasNetEarningsPrimaryJob))
Declaration(ObjectProperty(:hasNetEarningsSecondJob))
Declaration(ObjectProperty(:hasNetLabourIncome))
Declaration(ObjectProperty(:hasNoUKVocationalQualification))
Declaration(ObjectProperty(:hasNonUKQualification))
Declaration(ObjectProperty(:hasOECDDefinedAdultResident))
Declaration(ObjectProperty(:hasOECDDefinedChildResident))
Declaration(ObjectProperty(:hasOECDDefinedResident))
Declaration(ObjectProperty(:hasONCorOND))
Declaration(ObjectProperty(:hasOccupierNeitherRentingNorOwning))
Declaration(ObjectProperty(:hasOtherRoom))
Declaration(ObjectProperty(:hasOtherVocationalOrTechnicalOrProfessionalQualification))
Declaration(ObjectProperty(:hasOwner))
Declaration(ObjectProperty(:hasOwnerWithMortgage))
Declaration(ObjectProperty(:hasPartner))
Declaration(ObjectProperty(:hasPaymentPeriod))
Declaration(ObjectProperty(:hasPaymentPeriodForLatestPersonalIncomeGross))
Declaration(ObjectProperty(:hasPaymentPeriodForLatestPersonalIncomeTakeHomePay))
Declaration(ObjectProperty(:hasPaymentPeriodForUsualPersonalIncome))
Declaration(ObjectProperty(:hasPensionIncome))
Declaration(ObjectProperty(:hasPermanentOrTemporaryEmploymentForPrimaryJob))
Declaration(ObjectProperty(:hasPersonProperty))
Declaration(ObjectProperty(:hasPersonalIncomeNetUsualPay))
Declaration(ObjectProperty(:hasPersonalIncomeOf))
Declaration(ObjectProperty(:hasPersonalIncomeUsualPay))
Declaration(ObjectProperty(:hasPersonalUseOfMobilePhone))
Declaration(ObjectProperty(:hasPoliticalConnection))
Declaration(ObjectProperty(:hasPowerSupply))
Declaration(ObjectProperty(:hasPrimaryJobOf))
Declaration(ObjectProperty(:hasPrivateBenefitIncome))
Declaration(ObjectProperty(:hasQualification))
Declaration(ObjectProperty(:hasRSAOrOCROrCleriOrCommQualification))
Declaration(ObjectProperty(:hasRenter))
Declaration(ObjectProperty(:hasRenterAndRentIncludesHeatingLightingOrWater))
Declaration(ObjectProperty(:hasRenterAndRentIncludesSewageAndWaterCharges))
Declaration(ObjectProperty(:hasRenterAndRentsFromAHousingAssociation))
Declaration(ObjectProperty(:hasRenterAndRentsFromCouncilOrLocalAuthority))
Declaration(ObjectProperty(:hasRenterAndRentsFromEmployerOfAResident))
Declaration(ObjectProperty(:hasRenterAndRentsFromHousingAssociation))
Declaration(ObjectProperty(:hasRenterAndRentsFromPrivateLandlord))
Declaration(ObjectProperty(:hasRenterAndRentsFromPrivateLandlordFurnished))
Declaration(ObjectProperty(:hasRenterAndRentsFromPrivateLandlordUnfurnished))
Declaration(ObjectProperty(:hasResident))
Declaration(ObjectProperty(:hasResidentAdultPerson))
Declaration(ObjectProperty(:hasResidentChild))
Declaration(ObjectProperty(:hasResidentChildAge_0-2))
Declaration(ObjectProperty(:hasResidentChildAge_0-9))
Declaration(ObjectProperty(:hasResidentChildAge_10-15))
Declaration(ObjectProperty(:hasResidentChildAge_12-15))
Declaration(ObjectProperty(:hasResidentChildAge_3-4))
Declaration(ObjectProperty(:hasResidentChildAge_5-11))
Declaration(ObjectProperty(:hasResidentCouple))
Declaration(ObjectProperty(:hasResidentInPaidEmployment))
Declaration(ObjectProperty(:hasResidentNotInPaidEmployment))
Declaration(ObjectProperty(:hasResidentOfWorkingAge))
Declaration(ObjectProperty(:hasResidentPensionablePerson))
Declaration(ObjectProperty(:hasRoom))
Declaration(ObjectProperty(:hasScotVECOrScoTECOrScotBec))
Declaration(ObjectProperty(:hasSelfEmployedIncome))
Declaration(ObjectProperty(:hasSexOf))
Declaration(ObjectProperty(:hasShareOfIncomeFromBenefitsAndIncomeNEC))
Declaration(ObjectProperty(:hasSharedOwner))
Declaration(ObjectProperty(:hasSocialBenefitIncome))
Declaration(ObjectProperty(:hasSpouse))
Declaration(ObjectProperty(:hasTakeHomePay))
Declaration(ObjectProperty(:hasTenuredOccupier))
Declaration(ObjectProperty(:hasTimePeriod))
Declaration(ObjectProperty(:hasTotalMonthlyLabourIncome))
Declaration(ObjectProperty(:hasTotalMonthlyPersonalIncome))
Declaration(ObjectProperty(:hasTotalNetPersonalIncome))
Declaration(ObjectProperty(:hasTotalPersonalIncome))
Declaration(ObjectProperty(:hasTotalPersonalIncomeWeekly))
Declaration(ObjectProperty(:hasTotalPersonalIncomeYearly))
Declaration(ObjectProperty(:hasTotalWeeklyEarnings))
Declaration(ObjectProperty(:hasTotalYearlyEarnings))
Declaration(ObjectProperty(:hasUKQualification))
Declaration(ObjectProperty(:hasUseOf))
Declaration(ObjectProperty(:hasUseOfAutomobile))
Declaration(ObjectProperty(:hasUseOfCar))
Declaration(ObjectProperty(:hasUseOfColourTelevision))
Declaration(ObjectProperty(:hasUseOfCompactDiscPlayer))
Declaration(ObjectProperty(:hasUseOfConsumerDurables))
Declaration(ObjectProperty(:hasUseOfConsumerElectronics))
Declaration(ObjectProperty(:hasUseOfDishWasher))
Declaration(ObjectProperty(:hasUseOfFreezer))
Declaration(ObjectProperty(:hasUseOfHomeComputer))
Declaration(ObjectProperty(:hasUseOfLandLine))
Declaration(ObjectProperty(:hasUseOfMicrowaveOven))
Declaration(ObjectProperty(:hasUseOfMobilePhone))
Declaration(ObjectProperty(:hasUseOfNoConsumerDurables))
Declaration(ObjectProperty(:hasUseOfTelephone))
Declaration(ObjectProperty(:hasUseOfTumbleDryer))
Declaration(ObjectProperty(:hasUseOfVideoRecordOrDVDPlayer))
Declaration(ObjectProperty(:hasUseOfWashingMachine))
Declaration(ObjectProperty(:hasUseOfWhiteGoods))
Declaration(ObjectProperty(:hasUsualPayFromSecondJob))
Declaration(ObjectProperty(:hasVocationalQualification))
Declaration(ObjectProperty(:hasWorkProperty))
Declaration(ObjectProperty(:hasYearlyIncomeFromInvestmentsAndSavings))
Declaration(ObjectProperty(:hasYoungestResident))
Declaration(ObjectProperty(:hasYouthTrainingCertificate))
Declaration(ObjectProperty(:householdIncomeGrossMonthBeforeInterviewIsMeasuredBy))
Declaration(ObjectProperty(:householdIncomeIsMeasuredBy))
Declaration(ObjectProperty(:householdIncomeNetNoDeductionsIsMeasuredBy))
Declaration(ObjectProperty(:incomeIsMeasuredBy))
Declaration(ObjectProperty(:investmentIncomeIsMeasuredBy))
Declaration(ObjectProperty(:isCitizen))
Declaration(ObjectProperty(:isEmployedOrSelfEmployed))
Declaration(ObjectProperty(:isEmployedOrSelfEmployedForPrimaryJob))
Declaration(ObjectProperty(:isEmployedOrSelfEmployedForSecondJob))
Declaration(ObjectProperty(:isFemale))
Declaration(ObjectProperty(:isGroupMember))
Declaration(ObjectProperty(:isInGovernmentOfficeRegion))
Declaration(ObjectProperty(:isMale))
Declaration(ObjectProperty(:isMeasuredBy))
Declaration(ObjectProperty(:isMostRecentSecondJobPay))
Declaration(ObjectProperty(:isNonUKCitizen))
Declaration(ObjectProperty(:isNotSelfEmployedForPrimaryJob))
Declaration(ObjectProperty(:isNotSelfEmployedForSecondJob))
Declaration(ObjectProperty(:isParentOf))
Declaration(ObjectProperty(:isParentOfResidentChild))
Declaration(ObjectProperty(:isParticipantHouseholdInWave))
Declaration(ObjectProperty(:isParticipantPersonInWave))
Declaration(ObjectProperty(:isResident))
Declaration(ObjectProperty(:isResidentLoneParent))
Declaration(ObjectProperty(:isSelfEmployedAndHasWorkLocationForPrimaryJobOf))
Declaration(ObjectProperty(:isSelfEmployedForPrimaryJob))
Declaration(ObjectProperty(:isSelfEmployedForSecondJob))
Declaration(ObjectProperty(:isUKCitizen))
Declaration(ObjectProperty(:isYoungestResident))
Declaration(ObjectProperty(:journeysToNotSelfEmployedWorkUsing))
Declaration(ObjectProperty(:journeysToSelfEmployedWorkUsing))
Declaration(ObjectProperty(:journeysToWorkUsing))
Declaration(ObjectProperty(:latestPersonalIncomeGrossIsMeasuredBy))
Declaration(ObjectProperty(:latestPersonalIncomeTakeHomeIsMeasuredBy))
Declaration(ObjectProperty(:livesWith))
Declaration(ObjectProperty(:livesWithChild))
Declaration(ObjectProperty(:miscellaneousIncomeIsMeasuredBy))
Declaration(ObjectProperty(:monthlyIncomeComponentAmountIsMeasuredBy))
Declaration(ObjectProperty(:netEarningsPrimaryJobIsMeasuredBy))
Declaration(ObjectProperty(:netEarningsSecondJobIsMeasuredBy))
Declaration(ObjectProperty(:netLabourIncomeIsMeasuredBy))
Declaration(ObjectProperty(:pensionIncomeIsMeasuredBy))
Declaration(ObjectProperty(:personalBasicIncomeIsMeasuredBy))
Declaration(ObjectProperty(:personalIncomeAndSelfEmployedIsMeasuredBy))
Declaration(ObjectProperty(:personalIncomeIsMeasuredBy))
Declaration(ObjectProperty(:personalIncomeNetUsualPayIsMeasuredBy))
Declaration(ObjectProperty(:personalIncomeUsualPayIsMeasureBy))
Declaration(ObjectProperty(:privateBenefitIncomeIsMeasuredBy))
Declaration(ObjectProperty(:producesWaste))
Declaration(ObjectProperty(:secondJobLatestGrossIncomeIsMeasuredBy))
Declaration(ObjectProperty(:shareOfIncomeFromBenefitsAndIncomeNECIsMeasuredBy))
Declaration(ObjectProperty(:socialBenefitIncomeIsMeasuredBy))
Declaration(ObjectProperty(:supermarketBillIsMeasuredBy))
Declaration(ObjectProperty(:supportsParty))
Declaration(ObjectProperty(:timeTakeToTravelToWorkAndNotSelfEmployed))
Declaration(ObjectProperty(:timeTakenToTravelToWork))
Declaration(ObjectProperty(:timeTakenToTravelToWorkAndSelfEmployed))
Declaration(ObjectProperty(:totalEarningsWeeklyIsMeasuredBy))
Declaration(ObjectProperty(:totalEarningsYearlyIsMeasuredBy))
Declaration(ObjectProperty(:totalMonthlyLabourIncomeIsMeasuredBy))
Declaration(ObjectProperty(:totalMonthlyPersonalIncomeIsMeasuredBy))
Declaration(ObjectProperty(:totalNetPersonalIncomeIsMeasuredBy))
Declaration(ObjectProperty(:totalPersonalIncomeIsMeasuredBy))
Declaration(ObjectProperty(:totalPersonalIncomeWeeklyIsMeasuredBy))
Declaration(ObjectProperty(:totalPersonalIncomeYearlyIsMeasuredBy))
Declaration(ObjectProperty(:userTimeSpanUnitsForShareOfIncomeFromBenefitsAndIncomeNEC))
Declaration(ObjectProperty(:usesNoExternalPowerSupply))
Declaration(ObjectProperty(:usesOil))
Declaration(ObjectProperty(:usesSolidOrOtherFuel))
Declaration(ObjectProperty(:usesTimeSpanUnitForHouseholdIncomeGrossMonthBeforeInterview))
Declaration(ObjectProperty(:usesTimeSpanUnitForIncome))
Declaration(ObjectProperty(:usesTimeSpanUnits))
Declaration(ObjectProperty(:usesTimeSpanUnitsForAlcoholConsumption))
Declaration(ObjectProperty(:usesTimeSpanUnitsForConsumption))
Declaration(ObjectProperty(:usesTimeSpanUnitsForConsumptionOfCombinedElectricityAndGas))
Declaration(ObjectProperty(:usesTimeSpanUnitsForConsumptionOfElectricity))
Declaration(ObjectProperty(:usesTimeSpanUnitsForConsumptionOfFoodAndDrink))
Declaration(ObjectProperty(:usesTimeSpanUnitsForConsumptionOfGas))
Declaration(ObjectProperty(:usesTimeSpanUnitsForConsumptionOfOil))
Declaration(ObjectProperty(:usesTimeSpanUnitsForConsumptionOfPower))
Declaration(ObjectProperty(:usesTimeSpanUnitsForConsumptionOfSolidFuelOrOther))
Declaration(ObjectProperty(:usesTimeSpanUnitsForFoodAndSnacksOutsideTheHome))
Declaration(ObjectProperty(:usesTimeSpanUnitsForHouseholdIncome))
Declaration(ObjectProperty(:usesTimeSpanUnitsForHouseholdIncomeNetNoDeductions))
Declaration(ObjectProperty(:usesTimeSpanUnitsForPersonalIncome))
Declaration(ObjectProperty(:usesTimeSpanUnitsForPersonalIncomeNetUsualPay))
Declaration(ObjectProperty(:usesTimeSpanUnitsForRecycling))
Declaration(ObjectProperty(:usesTimeSpanUnitsForRecyclingGardenWaste))
Declaration(ObjectProperty(:usesTimeSpanUnitsForRecyclingGlassBottles))
Declaration(ObjectProperty(:usesTimeSpanUnitsForRecyclingPaper))
Declaration(ObjectProperty(:usesTimeSpanUnitsForRecyclingPlasticBags))
Declaration(ObjectProperty(:usesTimeSpanUnitsForSecondJobLatestGrossIncome))
Declaration(ObjectProperty(:usesTimeSpanUnitsForSupermarketFoodBill))
Declaration(ObjectProperty(:usesTimeSpanUnitsForTotalIncome))
Declaration(ObjectProperty(:usesTimeSpanUnitsForTotalNetPersonalIncome))
Declaration(ObjectProperty(:usesTimeSpanUnitsForUsualPayFromSecondJob))
Declaration(ObjectProperty(:usualGrossPayPerMonthForPrimaryJobIsMeasuredBy))
Declaration(ObjectProperty(:usualGrossPayPerMonthIfSelfEmployedIsMeasuredBy))
Declaration(ObjectProperty(:usualNetPayPerMonthForPrimaryJobIsMeasuredBy))
Declaration(ObjectProperty(:usualNetPayPerMonthIfSelfEmployedIsMeasuredBy))
Declaration(ObjectProperty(:usualPayInSecondJobIsMeasuredBy))
Declaration(ObjectProperty(:usualPayPerMonthForPrimaryJobIsMeasuredBy))
Declaration(ObjectProperty(:usualPayPerMonthIfSelfEmployedIsMeasuredBy))
Declaration(ObjectProperty(:wasOrIsModernOrTradeApprentice))
Declaration(ObjectProperty(:whichPoliticalPartyClosestTo))
Declaration(ObjectProperty(:wouldVoteForParty))
Declaration(ObjectProperty(:wouldVoteForPoliticalPartyTomorrow))
Declaration(ObjectProperty(:yearlyIncomeFromInvestmentsAndSavingsIsMeasuredBy))
Declaration(ObjectProperty(owl:topObjectProperty))
Declaration(DataProperty(:attendanceAtReligiousService))
Declaration(DataProperty(:believesChangesToHelpEnvironmentMustFitWithLifestyle))
Declaration(DataProperty(:believesHasEnvironmentallyImpactedLifestyle))
Declaration(DataProperty(:believesInPayingMoreForEnvironmnetallyFriendlyProducts))
Declaration(DataProperty(:believesNotWorthMakingChangesUnlessOthersDoNot))
Declaration(DataProperty(:believesNotWorthUKMakingChanges))
Declaration(DataProperty(:believesThatBeingGreenIsAnAlternativeLifestyle))
Declaration(DataProperty(:believesThatClimateChangeIsBeyondControl))
Declaration(DataProperty(:believesThatClimateChangeToFarInFutureToWorryAbout))
Declaration(DataProperty(:believesThatEnvironmentalCrisisHasBeenExaggerated))
Declaration(DataProperty(:believesThatHumanBehaviourContributesToClimateChange))
Declaration(DataProperty(:believesThatWillSoonBeAMajorEnvironmentalDisaster))
Declaration(DataProperty(:buysRecycledPaperProducts))
Declaration(DataProperty(:declinesToBuyIfTooMuchPackaging))
Declaration(DataProperty(:doesHoursOfHouseWorkPerWeek))
Declaration(DataProperty(:feltAbleToMakeUpMindForLastTwoWeeks))
Declaration(DataProperty(:feltCloseToOthersForLastTwoWeeks))
Declaration(DataProperty(:feltDealtWithProblemsWellForLastTwoWeeks))
Declaration(DataProperty(:feltOptimisticAboutTheFutureForLastTwoWeeks))
Declaration(DataProperty(:feltPersonalFeelingsForLastTwoWeeks))
Declaration(DataProperty(:feltRelaxedForLastTwoWeeks))
Declaration(DataProperty(:feltThatIsThinkingClearlyForLastTwoWeeks))
Declaration(DataProperty(:feltUsefulForLastTwoWeeks))
Declaration(DataProperty(:flagForNegativeSelfEmploymentIncome))
Declaration(DataProperty(:fliesLessFrequently))
Declaration(DataProperty(:haTimeSpanValueForRecyclingOfGlassBottles))
Declaration(DataProperty(:hadFeelingOfWorthlessnesRecently))
Declaration(DataProperty(:hadLossOfSleepOverWorryRecently))
Declaration(DataProperty(:has2ndJob))
Declaration(DataProperty(:hasAdequateHeating))
Declaration(DataProperty(:hasAgeValueInYears))
Declaration(DataProperty(:hasAlwaysLivedAtSameAddress))
Declaration(DataProperty(:hasBeenAbleToConcentrateRecently))
Declaration(DataProperty(:hasBeenCapableOfMakingDecisionsRecently))
Declaration(DataProperty(:hasBeenConstantlyUnderStrainRecenly))
Declaration(DataProperty(:hasBeenFeelinglHappyRecentlyAllThingsConsidered))
Declaration(DataProperty(:hasBeenLosingConfidenceRecently))
Declaration(DataProperty(:hasBeenUnhappyOrDepressedRecently))
Declaration(DataProperty(:hasBeliefThatWillBeAffectedByClimateChangeInNext200Years))
Declaration(DataProperty(:hasBeliefThatWillBeAffectedbyClimateChangeInNext30Years))
Declaration(DataProperty(:hasCentralHeating))
Declaration(DataProperty(:hasCivilPartnerOrSpouseWithPersonNumberInHouseholdGrid))
Declaration(DataProperty(:hasClimateChangeBeliefs))
Declaration(DataProperty(:hasCombinedElectricityAndGasBill))
Declaration(DataProperty(:hasConsideredGreenTariff))
Declaration(DataProperty(:hasConsideredRenewableEnergy))
Declaration(DataProperty(:hasConsideredSolarPanels))
Declaration(DataProperty(:hasConsideredSolarWaterHeating))
Declaration(DataProperty(:hasConsideredWindTurbine))
Declaration(DataProperty(:hasCostForAlcoholValue))
Declaration(DataProperty(:hasCostForFoodAndDrinkValue))
Declaration(DataProperty(:hasCostForFoodFromSupermarketValue))
Declaration(DataProperty(:hasCostOfMealsAndSnacksOutsideTheHomeValue))
Declaration(DataProperty(:hasCouncilTaxBand))
Declaration(DataProperty(:hasCrossSectionalAdultInterviewWeightValue))
Declaration(DataProperty(:hasCrossSectionalAdultMainInterviewWeightValue))
Declaration(DataProperty(:hasCrossSectionalAdultMainOrProxyInterviewWeightValue))
Declaration(DataProperty(:hasCrossSectionalAdultSelfCompletionInterviewWeightValue))
Declaration(DataProperty(:hasCrossSectionalHouseholdWeight))
Declaration(DataProperty(:hasCrossWavePersonIdentifier))
Declaration(DataProperty(:hasCurrentJob3ClassNSSECValue))
Declaration(DataProperty(:hasCurrentJob5ClassNSSECValue))
Declaration(DataProperty(:hasCurrentJob8ClassNSSECValue))
Declaration(DataProperty(:hasCurrentJobAttribute))
Declaration(DataProperty(:hasCurrentJobEmploymentStatus2000Value))
Declaration(DataProperty(:hasCurrentJobNSSECValue))
Declaration(DataProperty(:hasCurrentJobRegistrarGeneralsSocialClassValue))
Declaration(DataProperty(:hasCurrentJobSIC2007CondensedValue))
Declaration(DataProperty(:hasCurrentJobSIC2007Value))
Declaration(DataProperty(:hasCurrentJobSOC2000CondensedValue))
Declaration(DataProperty(:hasCurrentJobSocioEconomicGroupValue))
Declaration(DataProperty(:hasDVB-CAccess))
Declaration(DataProperty(:hasDVB-SAccess))
Declaration(DataProperty(:hasDeFactoMaritalStatus))
Declaration(DataProperty(:hasDerivedPersonAttribute))
Declaration(DataProperty(:hasDerivedPersonalIncomeProperty))
Declaration(DataProperty(:hasDrivenNumberOfMilesInLastYear))
Declaration(DataProperty(:hasDrivingLicence))
Declaration(DataProperty(:hasEnjoyedDayToDayActivitiesRecently))
Declaration(DataProperty(:hasEnvironmentalBeliefs))
Declaration(DataProperty(:hasEnvironmentalHabit))
Declaration(DataProperty(:hasEstimatedAdditionalPayForExtraHoursValue))
Declaration(DataProperty(:hasEthnicity))
Declaration(DataProperty(:hasFeltHasBeenOfUseRecently))
Declaration(DataProperty(:hasFeltUnableToOvercomeProblemsRecently))
Declaration(DataProperty(:hasFuelCost))
Declaration(DataProperty(:hasFuelCostForCombinedElectrictyAndGas))
Declaration(DataProperty(:hasFuelCostForElectricity))
Declaration(DataProperty(:hasFuelCostForGas))
Declaration(DataProperty(:hasFuelCostForOil))
Declaration(DataProperty(:hasFuelCostForSolidFuelOrOther))
Declaration(DataProperty(:hasFullOrPartTimeWork))
Declaration(DataProperty(:hasGHQCaseness))
Declaration(DataProperty(:hasGHQLikertScale))
Declaration(DataProperty(:hasGrossEarningsForLastMonthFromSecondJob))
Declaration(DataProperty(:hasHourlyRateforBasicHoursOfWork))
Declaration(DataProperty(:hasHoursOfSleep))
Declaration(DataProperty(:hasHouseholdAttribute))
Declaration(DataProperty(:hasHouseholdCompositionLFSVersion))
Declaration(DataProperty(:hasHouseholdIdentifier))
Declaration(DataProperty(:hasHouseholdIncomeGrossMonthBeforeInterviewValue))
Declaration(DataProperty(:hasHouseholdIncomeNetNoDeductionsValue))
Declaration(DataProperty(:hasHouseholdIncomeValue))
Declaration(DataProperty(:hasIncomeValue))
Declaration(DataProperty(:hasIncomeValueAndIsSelfEmployed))
Declaration(DataProperty(:hasInternetAccess))
Declaration(DataProperty(:hasInvestmentIncomeValue))
Declaration(DataProperty(:hasJobAttribute))
Declaration(DataProperty(:hasJobSatisfaction))
Declaration(DataProperty(:hasLFSVersionHouseholdComposition))
Declaration(DataProperty(:hasLastJobSOC2000CondensedValue))
Declaration(DataProperty(:hasLatestTakeHomePayGrossValue))
Declaration(DataProperty(:hasLatestTakeHomePayNetValue))
Declaration(DataProperty(:hasLegalMarriageStatus))
Declaration(DataProperty(:hasLevelOfInterestInPolitics))
Declaration(DataProperty(:hasMediaAccess))
Declaration(DataProperty(:hasMiscellaneousIncomeValue))
Declaration(DataProperty(:hasModifiedOECDEquivalenceScaleValue))
Declaration(DataProperty(:hasMonthlyIncomeComponentValue))
Declaration(DataProperty(:hasNetEarningsPrimaryJobValue))
Declaration(DataProperty(:hasNetEarningsSecondJobValue))
Declaration(DataProperty(:hasNetLabourIncomeValue))
Declaration(DataProperty(:hasPaidEmployment))
Declaration(DataProperty(:hasPartnerWithCrossWavePersonIdentifier))
Declaration(DataProperty(:hasPartnerWithPersonNumberInHouseholdGrid))
Declaration(DataProperty(:hasPensionIncomeValue))
Declaration(DataProperty(:hasPersonAttribute))
Declaration(DataProperty(:hasPersonNumberInHouseholdGrid))
Declaration(DataProperty(:hasPersonalIncomeAttribute))
Declaration(DataProperty(:hasPoliticalAttribute))
Declaration(DataProperty(:hasPrivateBenefitIncomeValue))
Declaration(DataProperty(:hasProblemsOvercomingDifficultiesRecently))
Declaration(DataProperty(:hasQualityOfSleep))
Declaration(DataProperty(:hasRecentSelfAssessedAttitutudeOf))
Declaration(DataProperty(:hasReligiousAtrribute))
Declaration(DataProperty(:hasSF12MentalComponentSummary))
Declaration(DataProperty(:hasSF12PhysicalComponentSummary))
Declaration(DataProperty(:hasSatisfaction))
Declaration(DataProperty(:hasSatisfactionWithAmountOfLeisureTime))
Declaration(DataProperty(:hasSatisfactionWithHealth))
Declaration(DataProperty(:hasSatisfactionWithIncome))
Declaration(DataProperty(:hasSatisfactionWithLifeOverall))
Declaration(DataProperty(:hasShareOfIncomeFromBenefitsAndIncomeNECValue))
Declaration(DataProperty(:hasShortWarwickEdinburghMentalWellBeingScale))
Declaration(DataProperty(:hasSleepAttribute))
Declaration(DataProperty(:hasSocialBenefitIncomeValue))
Declaration(DataProperty(:hasSpouseWithCrossWavePersonIdentifier))
Declaration(DataProperty(:hasSpouseWithPersonNumberInHouseholdGrid))
Declaration(DataProperty(:hasTakeHomePayAttribute))
Declaration(DataProperty(:hasTimeSpanForConsumption))
Declaration(DataProperty(:hasTimeSpanForHouseholdIncome))
Declaration(DataProperty(:hasTimeSpanForHouseholdIncomeGrossMonthBeforeInterview))
Declaration(DataProperty(:hasTimeSpanForHouseholdIncomeNetNoDeductions))
Declaration(DataProperty(:hasTimeSpanForIncome))
Declaration(DataProperty(:hasTimeSpanForPersonalIncome))
Declaration(DataProperty(:hasTimeSpanForSecondJobLatestGrossIncome))
Declaration(DataProperty(:hasTimeSpanForSelfEmployedIncome))
Declaration(DataProperty(:hasTimeSpanForShareOfIncomeFromBenefitsAndIncomeNEC))
Declaration(DataProperty(:hasTimeSpanForTotalNetPersonalIncome))
Declaration(DataProperty(:hasTimeSpanForTotalPersonalIncome))
Declaration(DataProperty(:hasTimeSpanForUsualPayForSecondJob))
Declaration(DataProperty(:hasTimeSpanValue))
Declaration(DataProperty(:hasTimeSpanValueForFoodAndDrinkConsumption))
Declaration(DataProperty(:hasTimeSpanValueForFuelCost))
Declaration(DataProperty(:hasTimeSpanValueForRecyclingOfGardenWaste))
Declaration(DataProperty(:hasTimeSpanValueForRecyclingOfPaper))
Declaration(DataProperty(:hasTimeSpanValueForRecyclingOfPlasticBags))
Declaration(DataProperty(:hasTimeSpanValueForRecyling))
Declaration(DataProperty(:hasTotalEarningsType))
Declaration(DataProperty(:hasTotalMonthlyLabourIncomeValue))
Declaration(DataProperty(:hasTotalMonthlyPersonalIncomeValue))
Declaration(DataProperty(:hasTotalNetPersonalIncomeValue))
Declaration(DataProperty(:hasTotalPersonalIncomeValueType))
Declaration(DataProperty(:hasUsualGrossPayPerMonthForPrimaryJobValue))
Declaration(DataProperty(:hasUsualGrossPayPerMonthIfSelfEmployedValue))
Declaration(DataProperty(:hasUsualNetPayPerMonthForPrimaryJobValue))
Declaration(DataProperty(:hasUsualNetPayPerMonthIfSelfEmployedValue))
Declaration(DataProperty(:hasUsualPayForSecondJobValue))
Declaration(DataProperty(:hasUsualPayPerMonthForPrimaryJobValue))
Declaration(DataProperty(:hasUsualPayPerMonthIfSelfEmployedValue))
Declaration(DataProperty(:hasUsualTakeHomePayDeductionStatus))
Declaration(DataProperty(:hasUsualTakeHomePayValue))
Declaration(DataProperty(:hasValueForConsumption))
Declaration(DataProperty(:hasWorkLocation))
Declaration(DataProperty(:hasWorkLocationAndIsNotSelfEmployed))
Declaration(DataProperty(:hasWorkLocationAndIsSelfEmployed))
Declaration(DataProperty(:hasYearlyIncomeFromInvestmentsAndSavingsValue))
Declaration(DataProperty(:hasYoungestChildValueInYears))
Declaration(DataProperty(:howCurrentlyFeelsAboutLifestyleAndEnvironment))
Declaration(DataProperty(:isAsleepWithin30Minutes))
Declaration(DataProperty(:isCloserToOnePoliticalParty))
Declaration(DataProperty(:isDistanceFromWork))
Declaration(DataProperty(:isImputed))
Declaration(DataProperty(:isImputedForHouseholdIncome))
Declaration(DataProperty(:isImputedForHouseholdIncomeGrossMonthBeforeInterview))
Declaration(DataProperty(:isImputedForIncome))
Declaration(DataProperty(:isImputedForPersonalIncome))
Declaration(DataProperty(:isImputedForShareOfIncomeFromBenefitsAndIncomeNEC))
Declaration(DataProperty(:isImputedForTotalMonthlyLabourIncome))
Declaration(DataProperty(:isImputedForTotalMonthlyPersonalIncome))
Declaration(DataProperty(:isImputedForUsualGrossPayPerMonthForPrimaryJob))
Declaration(DataProperty(:isImputedForUsualGrossPayPerMonthIfSelfEmployed))
Declaration(DataProperty(:isImputedForUsualNetPayPerMonth))
Declaration(DataProperty(:isImputedForUsualPayFromSecondJob))
Declaration(DataProperty(:isImputedForYearlyIncomeFromInvestmentsAndSavings))
Declaration(DataProperty(:isLatestTakeHomePayUsualAmount))
Declaration(DataProperty(:isLoneParent))
Declaration(DataProperty(:isSingleInHousehold))
Declaration(DataProperty(:isUrban))
Declaration(DataProperty(:leavesTVOnStandyForTheNight))
Declaration(DataProperty(:livesAsCoupleInHousehold))
Declaration(DataProperty(:livesAsSpouseInHousehold))
Declaration(DataProperty(:livesWithCohabiteeInHousehold))
Declaration(DataProperty(:livesWithInHousehold))
Declaration(DataProperty(:livesWithSpouseInHousehold))
Declaration(DataProperty(:movedToCurrentAddressOnDate))
Declaration(DataProperty(:neverWentToSchool))
Declaration(DataProperty(:numberOfMinutesToTravelToWork))
Declaration(DataProperty(:numberOfMinutesToTravelToWorkAndNotSelfEmployed))
Declaration(DataProperty(:numberOfMinutesToTravelToWorkAndSelfEmployed))
Declaration(DataProperty(:numberOfMinutesToTravelToWorkProvidedAndSelfEmployed))
Declaration(DataProperty(:putsOnMoreClothesRatherThanTurnUpHeating))
Declaration(DataProperty(:recyclesGardenWasteWithFrequencyValue))
Declaration(DataProperty(:recyclesGlassBottlesWithFrequencyValue))
Declaration(DataProperty(:recyclesPaperWithFrequencyValue))
Declaration(DataProperty(:recyclesPlasticBagsWithFrequencyValue))
Declaration(DataProperty(:recyclesWithFrequencyValue))
Declaration(DataProperty(:regularlyUsesInternet))
Declaration(DataProperty(:religionMakesDifferenceToLife))
Declaration(DataProperty(:separatesItemsForRecycling))
Declaration(DataProperty(:supportsAPoliticalParty))
Declaration(DataProperty(:switchesOffLightsInUnusedRooms))
Declaration(DataProperty(:takesOwnShoppingBagWhenShopping))
Declaration(DataProperty(:timeSpanValueForAlcoholConsumption))
Declaration(DataProperty(:timeSpanValueForConsumptionOfMealsAndSnacksOutsideTheHome))
Declaration(DataProperty(:timeSpanValueForFuelCostOfCombinedElectricityAndGas))
Declaration(DataProperty(:timeSpanValueForFuelCostOfElectricity))
Declaration(DataProperty(:timeSpanValueForFuelCostOfGas))
Declaration(DataProperty(:timeSpanValueForFuelCostOfOil))
Declaration(DataProperty(:timeSpanValueForFuelCostOfSolidFuelOrOther))
Declaration(DataProperty(:timeSpanValueForPurchasingOfFoodFromSupermarket))
Declaration(DataProperty(:turnsOffTapWhilstBrushingTeeth))
Declaration(DataProperty(:usesCarShareIfPossible))
Declaration(DataProperty(:usesPublicTransportRatherThanCar))
Declaration(DataProperty(:wakesUpInTheMiddleOfTheNight))
Declaration(DataProperty(:walksorCylesForShortJourneysLessThan2Or3Miles))
Declaration(DataProperty(:worksNumberOfHours))
Declaration(DataProperty(:worksNumberOfHoursForPrimaryEmployment))
Declaration(DataProperty(:worksOnAverageNumberOfHoursOvertimePerWeek))
Declaration(DataProperty(:worksOnAverageNumberOfHoursPaidOvertimePerWeek))
Declaration(DataProperty(:worksOnAverageNumberOfHoursPerWeek))
Declaration(DataProperty(:worksOnAverageNumberOfHoursPerWeekAndIsSelfEmployed))
Declaration(DataProperty(:worksOnAverageNumberOfHoursePerMonthForSecondJob))
Declaration(NamedIndividual(:author:DougSalt))
Declaration(AnnotationProperty(rdfs:comment))
Declaration(AnnotationProperty(rdfs:isDefinedBy))
Declaration(Datatype(:jobSoc00Condensed))
Declaration(Datatype(:missing))
Declaration(Datatype(:proxy))
Declaration(Datatype(:refused))
Declaration(Datatype(:unknown))
Declaration(Datatype(rdf:PlainLiteral))
Declaration(Datatype(xsd:anyURI))
Declaration(Datatype(xsd:boolean))
Declaration(Datatype(xsd:dateTime))
Declaration(Datatype(xsd:decimal))
Declaration(Datatype(xsd:integer))
Declaration(Datatype(xsd:nonNegativeInteger))
Declaration(Datatype(xsd:nonPositiveInteger))
Declaration(Datatype(xsd:positiveInteger))
Declaration(Datatype(xsd:string))
Declaration(Datatype(xsd:token))

############################
#   Object Properties
############################

# Object Property: :consumes (:consumes)

SubObjectPropertyOf(:consumes :hasHouseholdProperty)
ObjectPropertyDomain(:consumes :Household)
ObjectPropertyRange(:consumes ObjectUnionOf(:ExternalPowerSupply :FoodAndDrink))

# Object Property: :consumesAlcohol (:consumesAlcohol)

SubObjectPropertyOf(:consumesAlcohol :consumesFoodAndDrink)
ObjectPropertyDomain(:consumesAlcohol :Household)
ObjectPropertyRange(:consumesAlcohol :Alcohol)

# Object Property: :consumesCombinedElectricityAndGas (:consumesCombinedElectricityAndGas)

SubObjectPropertyOf(:consumesCombinedElectricityAndGas :consumesPower)
ObjectPropertyDomain(:consumesCombinedElectricityAndGas :Household)
ObjectPropertyRange(:consumesCombinedElectricityAndGas :CombinedElectricityAndGas)

# Object Property: :consumesElectricity (:consumesElectricity)

SubObjectPropertyOf(:consumesElectricity :consumesPower)
ObjectPropertyDomain(:consumesElectricity :Household)
ObjectPropertyRange(:consumesElectricity :Electricity)

# Object Property: :consumesFood (:consumesFood)

SubObjectPropertyOf(:consumesFood :consumesFoodAndDrink)
ObjectPropertyDomain(:consumesFood :Household)
ObjectPropertyRange(:consumesFood :Food)

# Object Property: :consumesFoodAndDrink (:consumesFoodAndDrink)

SubObjectPropertyOf(:consumesFoodAndDrink :consumes)
ObjectPropertyDomain(:consumesFoodAndDrink :Household)
ObjectPropertyRange(:consumesFoodAndDrink :FoodAndDrink)

# Object Property: :consumesFoodPurchasedFromSupermarket (:consumesFoodPurchasedFromSupermarket)

SubObjectPropertyOf(:consumesFoodPurchasedFromSupermarket :consumesFood)
ObjectPropertyDomain(:consumesFoodPurchasedFromSupermarket :Household)
ObjectPropertyRange(:consumesFoodPurchasedFromSupermarket :FoodPurchasedFromSupermarket)

# Object Property: :consumesGas (:consumesGas)

SubObjectPropertyOf(:consumesGas :consumesPower)
ObjectPropertyDomain(:consumesGas :Household)
ObjectPropertyRange(:consumesGas :Gas)

# Object Property: :consumesMealsAndSnacksOutsideTheHome (:consumesMealsAndSnacksOutsideTheHome)

SubObjectPropertyOf(:consumesMealsAndSnacksOutsideTheHome :consumesFood)
ObjectPropertyDomain(:consumesMealsAndSnacksOutsideTheHome :Household)
ObjectPropertyRange(:consumesMealsAndSnacksOutsideTheHome :MealsAndSnacksOutsideTheHome)

# Object Property: :consumesOil (:consumesOil)

SubObjectPropertyOf(:consumesOil :consumesPower)
ObjectPropertyDomain(:consumesOil :Household)
ObjectPropertyRange(:consumesOil :Oil)

# Object Property: :consumesPower (:consumesPower)

SubObjectPropertyOf(:consumesPower :consumes)
ObjectPropertyDomain(:consumesPower :Household)
ObjectPropertyRange(:consumesPower :ExternalPowerSupply)

# Object Property: :consumesSolidFuelOrOther (:consumesSolidFuelOrOther)

SubObjectPropertyOf(:consumesSolidFuelOrOther :consumesPower)
ObjectPropertyDomain(:consumesSolidFuelOrOther :Household)
ObjectPropertyRange(:consumesSolidFuelOrOther :SolidFuelOrOther)

# Object Property: :consumptionFuelCostForCombinedElectricityAndGasIsMeasuredBy (:consumptionFuelCostForCombinedElectricityAndGasIsMeasuredBy)

SubObjectPropertyOf(:consumptionFuelCostForCombinedElectricityAndGasIsMeasuredBy :consumptionOfFuelIsMeasuredBy)
ObjectPropertyDomain(:consumptionFuelCostForCombinedElectricityAndGasIsMeasuredBy :CombinedElectricityAndGas)
ObjectPropertyRange(:consumptionFuelCostForCombinedElectricityAndGasIsMeasuredBy :Currency)

# Object Property: :consumptionFuelCostForElectricityIsMeasuredBy (:consumptionFuelCostForElectricityIsMeasuredBy)

SubObjectPropertyOf(:consumptionFuelCostForElectricityIsMeasuredBy :consumptionOfFuelIsMeasuredBy)
ObjectPropertyDomain(:consumptionFuelCostForElectricityIsMeasuredBy :Electricity)
ObjectPropertyRange(:consumptionFuelCostForElectricityIsMeasuredBy :Currency)

# Object Property: :consumptionFuelCostForGasIsMeasuredBy (:consumptionFuelCostForGasIsMeasuredBy)

SubObjectPropertyOf(:consumptionFuelCostForGasIsMeasuredBy :consumptionOfFuelIsMeasuredBy)
ObjectPropertyDomain(:consumptionFuelCostForGasIsMeasuredBy :Gas)
ObjectPropertyRange(:consumptionFuelCostForGasIsMeasuredBy :Currency)

# Object Property: :consumptionFuelCostForOilIsMeasuredBy (:consumptionFuelCostForOilIsMeasuredBy)

SubObjectPropertyOf(:consumptionFuelCostForOilIsMeasuredBy :consumptionOfFuelIsMeasuredBy)
ObjectPropertyDomain(:consumptionFuelCostForOilIsMeasuredBy :Oil)
ObjectPropertyRange(:consumptionFuelCostForOilIsMeasuredBy :Currency)

# Object Property: :consumptionFuelCostForSolidFuelOrOtherIsMeasuredBy (:consumptionFuelCostForSolidFuelOrOtherIsMeasuredBy)

SubObjectPropertyOf(:consumptionFuelCostForSolidFuelOrOtherIsMeasuredBy :consumptionOfFuelIsMeasuredBy)
ObjectPropertyDomain(:consumptionFuelCostForSolidFuelOrOtherIsMeasuredBy :SolidFuelOrOther)
ObjectPropertyRange(:consumptionFuelCostForSolidFuelOrOtherIsMeasuredBy :Currency)

# Object Property: :consumptionIsMeasuredBy (:consumptionIsMeasuredBy)

SubObjectPropertyOf(:consumptionIsMeasuredBy :isMeasuredBy)
ObjectPropertyDomain(:consumptionIsMeasuredBy :Consumption)
ObjectPropertyRange(:consumptionIsMeasuredBy :Currency)

# Object Property: :consumptionOfAlcoholIsMeasuredBy (:consumptionOfAlcoholIsMeasuredBy)

SubObjectPropertyOf(:consumptionOfAlcoholIsMeasuredBy :consumptionOfFoodAndIsDrinkMeasuredBy)
ObjectPropertyDomain(:consumptionOfAlcoholIsMeasuredBy :Alcohol)
ObjectPropertyRange(:consumptionOfAlcoholIsMeasuredBy :Currency)

# Object Property: :consumptionOfFoodAndIsDrinkMeasuredBy (:consumptionOfFoodAndIsDrinkMeasuredBy)

SubObjectPropertyOf(:consumptionOfFoodAndIsDrinkMeasuredBy :consumptionIsMeasuredBy)
ObjectPropertyDomain(:consumptionOfFoodAndIsDrinkMeasuredBy :FoodAndDrink)
ObjectPropertyRange(:consumptionOfFoodAndIsDrinkMeasuredBy :Currency)

# Object Property: :consumptionOfFoodAndSnacksOutsideTheHomeIsMeasuredBy (:consumptionOfFoodAndSnacksOutsideTheHomeIsMeasuredBy)

SubObjectPropertyOf(:consumptionOfFoodAndSnacksOutsideTheHomeIsMeasuredBy :consumptionOfFoodAndIsDrinkMeasuredBy)
ObjectPropertyDomain(:consumptionOfFoodAndSnacksOutsideTheHomeIsMeasuredBy :MealsAndSnacksOutsideTheHome)
ObjectPropertyRange(:consumptionOfFoodAndSnacksOutsideTheHomeIsMeasuredBy :Currency)

# Object Property: :consumptionOfFuelIsMeasuredBy (:consumptionOfFuelIsMeasuredBy)

SubObjectPropertyOf(:consumptionOfFuelIsMeasuredBy :consumptionIsMeasuredBy)
ObjectPropertyDomain(:consumptionOfFuelIsMeasuredBy :ExternalPowerSupply)
ObjectPropertyRange(:consumptionOfFuelIsMeasuredBy :Currency)

# Object Property: :coupleContainsAdult (:coupleContainsAdult)

SubObjectPropertyOf(:coupleContainsAdult :hasGroupMemberInGroupOfTwoPeople)
ObjectPropertyDomain(:coupleContainsAdult :Couple)

# Object Property: :earningIsMeasuredBy (:earningIsMeasuredBy)

SubObjectPropertyOf(:earningIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyDomain(:earningIsMeasuredBy :Earnings)
ObjectPropertyRange(:earningIsMeasuredBy :Currency)

# Object Property: :haOutrightOwner (:haOutrightOwner)

SubObjectPropertyOf(:haOutrightOwner :hasOwner)
ObjectPropertyDomain(:haOutrightOwner :Household)
ObjectPropertyRange(:haOutrightOwner :Person)

# Object Property: :hasBTECorBECorTECorEdexcelOrLQL (:hasBTECorBECorTECorEdexcelOrLQL)

AnnotationAssertion(rdfs:comment :hasBTECorBECorTECorEdexcelOrLQL "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasBTECorBECorTECorEdexcelOrLQL "d_qfvoc13"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasBTECorBECorTECorEdexcelOrLQL "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc13"^^xsd:anyURI)
SubObjectPropertyOf(:hasBTECorBECorTECorEdexcelOrLQL :hasVocationalQualification)
ObjectPropertyDomain(:hasBTECorBECorTECorEdexcelOrLQL :Person)
ObjectPropertyRange(:hasBTECorBECorTECorEdexcelOrLQL :BTECOrBECOrTECOrEdexcelOrLQL)

# Object Property: :hasBasicSkills (:hasBasicSkills)

AnnotationAssertion(rdfs:comment :hasBasicSkills "d_inresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasBasicSkills "d_qfvoc3"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasBasicSkills "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc1"^^xsd:anyURI)
SubObjectPropertyOf(:hasBasicSkills :hasVocationalQualification)
ObjectPropertyDomain(:hasBasicSkills :Person)
ObjectPropertyRange(:hasBasicSkills :BasicSkills)

# Object Property: :hasBedroom (:hasBedroom)

AnnotationAssertion(rdfs:comment :hasBedroom "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasBedroom "d_hsbeds"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasBedroom "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_hsbeds"^^xsd:anyURI)
SubObjectPropertyOf(:hasBedroom :hasRoom)
ObjectPropertyDomain(:hasBedroom :Household)
ObjectPropertyRange(:hasBedroom :Bedroom)
DisjointObjectProperties(:hasBedroom :hasOtherRoom)

# Object Property: :hasBusinessIncome (:hasBusinessIncome)

SubObjectPropertyOf(:hasBusinessIncome :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasBusinessIncome :Person)
ObjectPropertyRange(:hasBusinessIncome :BusinessIncome)

# Object Property: :hasCityAndGuildsCertificate (:hasCityAndGuildsCertificate)

AnnotationAssertion(rdfs:comment :hasCityAndGuildsCertificate "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCityAndGuildsCertificate "d_qfvoc7"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCityAndGuildsCertificate "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc7"^^xsd:anyURI)
SubObjectPropertyOf(:hasCityAndGuildsCertificate :hasVocationalQualification)
ObjectPropertyDomain(:hasCityAndGuildsCertificate :Person)
ObjectPropertyRange(:hasCityAndGuildsCertificate :CityAndGuildCertificate)

# Object Property: :hasCurrentEconomicActivityOf (:hasCurrentEconomicActivityOf)

AnnotationAssertion(rdfs:comment :hasCurrentEconomicActivityOf "d_inresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentEconomicActivityOf "d_jbstat"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCurrentEconomicActivityOf "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbstat"^^xsd:anyURI)
SubObjectPropertyOf(:hasCurrentEconomicActivityOf :hasWorkProperty)
FunctionalObjectProperty(:hasCurrentEconomicActivityOf)
AsymmetricObjectProperty(:hasCurrentEconomicActivityOf)
IrreflexiveObjectProperty(:hasCurrentEconomicActivityOf)
ObjectPropertyDomain(:hasCurrentEconomicActivityOf :Person)
ObjectPropertyRange(:hasCurrentEconomicActivityOf :EconomicActivity)

# Object Property: :hasEarnings (:hasEarnings)

SubObjectPropertyOf(:hasEarnings :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasEarnings :Person)
ObjectPropertyRange(:hasEarnings :Earnings)

# Object Property: :hasElectricitySupply (:hasElectricitySupply)

AnnotationAssertion(rdfs:comment :hasElectricitySupply "d_fuelhave1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasElectricitySupply "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasElectricitySupply "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_fuelhave1"^^xsd:anyURI)
SubObjectPropertyOf(:hasElectricitySupply :hasExternalPowerSupply)
ObjectPropertyDomain(:hasElectricitySupply :Household)
ObjectPropertyRange(:hasElectricitySupply :Electricity)

# Object Property: :hasEntryLevelQualificationWales (:hasEntryLevelQualificationWales)

AnnotationAssertion(rdfs:comment :hasEntryLevelQualificationWales "d_inresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasEntryLevelQualificationWales "d_qfvoc4"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasEntryLevelQualificationWales "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc4"^^xsd:anyURI)
SubObjectPropertyOf(:hasEntryLevelQualificationWales :hasVocationalQualification)
ObjectPropertyDomain(:hasEntryLevelQualificationWales :Person)
ObjectPropertyRange(:hasEntryLevelQualificationWales :EntryLevelQualificationWalesOnly)

# Object Property: :hasExternalPowerSupply (:hasExternalPowerSupply)

SubObjectPropertyOf(:hasExternalPowerSupply :hasPowerSupply)
AsymmetricObjectProperty(:hasExternalPowerSupply)
IrreflexiveObjectProperty(:hasExternalPowerSupply)
ObjectPropertyDomain(:hasExternalPowerSupply :Household)
ObjectPropertyRange(:hasExternalPowerSupply :ExternalPowerSupply)

# Object Property: :hasFullOrPartTimePrimaryJob (:hasFullOrPartTimePrimaryJob)

SubObjectPropertyOf(:hasFullOrPartTimePrimaryJob :hasWorkProperty)
ObjectPropertyDomain(:hasFullOrPartTimePrimaryJob :FormOfEmployment)
ObjectPropertyDomain(:hasFullOrPartTimePrimaryJob :Person)
ObjectPropertyRange(:hasFullOrPartTimePrimaryJob :PrimaryJob)

# Object Property: :hasFullOrPartTimePrimaryJobAndNotSelfEmployed (:hasFullOrPartTimePrimaryJobAndNotSelfEmployed)

AnnotationAssertion(rdfs:comment :hasFullOrPartTimePrimaryJobAndNotSelfEmployed "Mising: 

jbhas
jboff"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFullOrPartTimePrimaryJobAndNotSelfEmployed "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFullOrPartTimePrimaryJobAndNotSelfEmployed "d_pjsptft"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasFullOrPartTimePrimaryJobAndNotSelfEmployed "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_pjbptft"^^xsd:anyURI)
SubObjectPropertyOf(:hasFullOrPartTimePrimaryJobAndNotSelfEmployed :hasFullOrPartTimePrimaryJob)
ObjectPropertyDomain(:hasFullOrPartTimePrimaryJobAndNotSelfEmployed :Person)
ObjectPropertyDomain(:hasFullOrPartTimePrimaryJobAndNotSelfEmployed ObjectSomeValuesFrom(:isEmployedOrSelfEmployed :NotSelfEmployed))
ObjectPropertyDomain(:hasFullOrPartTimePrimaryJobAndNotSelfEmployed DataSomeValuesFrom(:worksOnAverageNumberOfHoursPerWeek :unknown))
ObjectPropertyRange(:hasFullOrPartTimePrimaryJobAndNotSelfEmployed :NotSelfEmployed)
ObjectPropertyRange(:hasFullOrPartTimePrimaryJobAndNotSelfEmployed :PrimaryJob)
ObjectPropertyRange(:hasFullOrPartTimePrimaryJobAndNotSelfEmployed ObjectUnionOf(:FullTime :PartTime))

# Object Property: :hasFullOrPartTimePrimaryJobAndSelfEmployed (:hasFullOrPartTimePrimaryJobAndSelfEmployed)

AnnotationAssertion(rdfs:comment :hasFullOrPartTimePrimaryJobAndSelfEmployed "Missing:

jbhas
jboff"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFullOrPartTimePrimaryJobAndSelfEmployed "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFullOrPartTimePrimaryJobAndSelfEmployed "d_jjsptft"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFullOrPartTimePrimaryJobAndSelfEmployed "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_pjsptft"^^xsd:string)
SubObjectPropertyOf(:hasFullOrPartTimePrimaryJobAndSelfEmployed :hasFullOrPartTimePrimaryJob)
ObjectPropertyDomain(:hasFullOrPartTimePrimaryJobAndSelfEmployed :Person)
ObjectPropertyDomain(:hasFullOrPartTimePrimaryJobAndSelfEmployed ObjectSomeValuesFrom(:isEmployedOrSelfEmployed :SelfEmployed))
ObjectPropertyDomain(:hasFullOrPartTimePrimaryJobAndSelfEmployed DataSomeValuesFrom(:worksOnAverageNumberOfHoursPerWeekAndIsSelfEmployed :unknown))
ObjectPropertyRange(:hasFullOrPartTimePrimaryJobAndSelfEmployed :PrimaryJob)
ObjectPropertyRange(:hasFullOrPartTimePrimaryJobAndSelfEmployed :SelfEmployed)
ObjectPropertyRange(:hasFullOrPartTimePrimaryJobAndSelfEmployed ObjectUnionOf(:FullTime :PartTime))

# Object Property: :hasGNVQorSNVQ (:hasGNVQorSNVQ)

AnnotationAssertion(rdfs:comment :hasGNVQorSNVQ "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasGNVQorSNVQ "d_qfvoc8"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasGNVQorSNVQ "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc8"^^xsd:anyURI)
SubObjectPropertyOf(:hasGNVQorSNVQ :hasVocationalQualification)
ObjectPropertyDomain(:hasGNVQorSNVQ :Person)
ObjectPropertyRange(:hasGNVQorSNVQ :GNVQOrGSVQ)

# Object Property: :hasGasSupply (:hasGasSupply)

AnnotationAssertion(rdfs:comment :hasGasSupply "d_fuelhave2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasGasSupply "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasGasSupply "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_fuelhave2"^^xsd:anyURI)
SubObjectPropertyOf(:hasGasSupply :hasExternalPowerSupply)
ObjectPropertyDomain(:hasGasSupply :Household)
ObjectPropertyRange(:hasGasSupply :Gas)

# Object Property: :hasGroupMember (:hasGroupMember)

SubObjectPropertyOf(:hasGroupMember :hasGroupOfPeopleProperty)
InverseObjectProperties(:hasGroupMember :isGroupMember)
ObjectPropertyDomain(:hasGroupMember :GroupOfPeople)
ObjectPropertyRange(:hasGroupMember :Person)

# Object Property: :hasGroupMemberInGroupOfTwoPeople (:hasGroupMemberInGroupOfTwoPeople)

SubObjectPropertyOf(:hasGroupMemberInGroupOfTwoPeople :hasGroupOfPeopleProperty)

# Object Property: :hasGroupOfPeopleProperty (:hasGroupOfPeopleProperty)

ObjectPropertyDomain(:hasGroupOfPeopleProperty :GroupOfPeople)

# Object Property: :hasHNCOrHND (:hasHNCOrHND)

AnnotationAssertion(rdfs:comment :hasHNCOrHND "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHNCOrHND "d_qfvoc11"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasHNCOrHND "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc11"^^xsd:anyURI)
SubObjectPropertyOf(:hasHNCOrHND :hasVocationalQualification)
ObjectPropertyDomain(:hasHNCOrHND :Person)
ObjectPropertyRange(:hasHNCOrHND :HNCOrHND)

# Object Property: :hasHighestQualification (:hasHighestQualification)

AnnotationAssertion(rdfs:comment :hasHighestQualification "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHighestQualification "d_qfhigh"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasHighestQualification "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfhigh"^^xsd:anyURI)
SubObjectPropertyOf(:hasHighestQualification :hasQualification)
ObjectPropertyDomain(:hasHighestQualification :Person)
ObjectPropertyRange(:hasHighestQualification ObjectUnionOf(:Missing :Qualification :Refused :Unknown))

# Object Property: :hasHighestQualificationDerived (:hasHighestQualificationDerived)

AnnotationAssertion(rdfs:comment :hasHighestQualificationDerived "d_hiqual_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHighestQualificationDerived "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHighestQualificationDerived "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasHighestQualificationDerived "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_hiqual_dv"^^xsd:anyURI)
SubObjectPropertyOf(:hasHighestQualificationDerived :hasHighestQualification)
ObjectPropertyDomain(:hasHighestQualificationDerived :Person)
ObjectPropertyRange(:hasHighestQualificationDerived ObjectUnionOf(:ALevel :FirstDegreeOrEquivalent :GCSEOrOLevel :HigherDegree :Missing :NoQualifications :OtherQualification))

# Object Property: :hasHomeGeneratedPower (:hasHomeGeneratedPower)

SubObjectPropertyOf(:hasHomeGeneratedPower :hasPowerSupply)
ObjectPropertyDomain(:hasHomeGeneratedPower :Household)
ObjectPropertyRange(:hasHomeGeneratedPower :HomeGeneration)

# Object Property: :hasHomeGeneratedSolarPower (:hasHomeGeneratedSolarPower)

AnnotationAssertion(rdfs:comment :hasHomeGeneratedSolarPower "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHomeGeneratedSolarPower "d_solar1"^^xsd:string)
SubObjectPropertyOf(:hasHomeGeneratedSolarPower :hasHomeGeneratedPower)
ObjectPropertyDomain(:hasHomeGeneratedSolarPower :Household)
ObjectPropertyRange(:hasHomeGeneratedSolarPower :SolarPanels)

# Object Property: :hasHomeGeneratedSolarWaterHeating (:hasHomeGeneratedSolarWaterHeating)

AnnotationAssertion(rdfs:comment :hasHomeGeneratedSolarWaterHeating "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHomeGeneratedSolarWaterHeating "d_solar2"^^xsd:string)
SubObjectPropertyOf(:hasHomeGeneratedSolarWaterHeating :hasHomeGeneratedPower)
ObjectPropertyDomain(:hasHomeGeneratedSolarWaterHeating :Household)
ObjectPropertyDomain(:hasHomeGeneratedSolarWaterHeating DataHasValue(:hasConsideredSolarWaterHeating "yes - fitted"))
ObjectPropertyRange(:hasHomeGeneratedSolarWaterHeating :SolarHeatedWater)

# Object Property: :hasHomeGeneratedWindPower (:hasHomeGeneratedWindPower)

AnnotationAssertion(rdfs:comment :hasHomeGeneratedWindPower "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHomeGeneratedWindPower "d_solar3"^^xsd:string)
SubObjectPropertyOf(:hasHomeGeneratedWindPower :hasHomeGeneratedPower)
ObjectPropertyDomain(:hasHomeGeneratedWindPower :Household)
ObjectPropertyRange(:hasHomeGeneratedWindPower :WindTurbine)

# Object Property: :hasHouseholdIncomeGrossMonthBeforeInterview (:hasHouseholdIncomeGrossMonthBeforeInterview)

SubObjectPropertyOf(:hasHouseholdIncomeGrossMonthBeforeInterview :hasIncomeOf)
ObjectPropertyDomain(:hasHouseholdIncomeGrossMonthBeforeInterview :Household)
ObjectPropertyRange(:hasHouseholdIncomeGrossMonthBeforeInterview :HouseholdIncomeGrossMonthBeforeInterview)

# Object Property: :hasHouseholdIncomeNetNoDeductions (:hasHouseholdIncomeNetNoDeductions)

SubObjectPropertyOf(:hasHouseholdIncomeNetNoDeductions :hasIncomeOf)
ObjectPropertyDomain(:hasHouseholdIncomeNetNoDeductions :Household)
ObjectPropertyDomain(:hasHouseholdIncomeNetNoDeductions :HouseholdIncomeNetNoDeductions)
ObjectPropertyRange(:hasHouseholdIncomeNetNoDeductions :HouseholdIncomeNetNoDeductions)

# Object Property: :hasHouseholdProperty (:hasHouseholdProperty)

ObjectPropertyDomain(:hasHouseholdProperty :Household)
ObjectPropertyRange(:hasHouseholdProperty ObjectUnionOf(:FoodAndDrink :GovernmentOfficeRegion :HouseholdIncome :HouseholdWaste :Person :PowerSupply :Room))

# Object Property: :hasHusbandWifeOrCivilPartner (:hasHusbandWifeOrCivilPartner)

SubObjectPropertyOf(:hasHusbandWifeOrCivilPartner :hasPartner)
ObjectPropertyDomain(:hasHusbandWifeOrCivilPartner :Person)
ObjectPropertyRange(:hasHusbandWifeOrCivilPartner :Person)

# Object Property: :hasIncomeOf (:hasIncomeOf)

SubObjectPropertyOf(:hasIncomeOf :hasHouseholdProperty)
ObjectPropertyDomain(:hasIncomeOf :Household)
ObjectPropertyRange(:hasIncomeOf :HouseholdIncome)

# Object Property: :hasInvestmentIncome (:hasInvestmentIncome)

SubObjectPropertyOf(:hasInvestmentIncome :hasMonthlyIncomeComponentAmount)
ObjectPropertyDomain(:hasInvestmentIncome :Person)
ObjectPropertyRange(:hasInvestmentIncome :InvestmentIncome)

# Object Property: :hasKeySkills (:hasKeySkills)

AnnotationAssertion(rdfs:comment :hasKeySkills "d_inresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasKeySkills "d_qvoc2"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasKeySkills "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc2"^^xsd:anyURI)
SubObjectPropertyOf(:hasKeySkills :hasVocationalQualification)
ObjectPropertyDomain(:hasKeySkills :Person)
ObjectPropertyRange(:hasKeySkills :KeySkills)

# Object Property: :hasLastJobSOC2000Condensed (:hasLastJobSOC2000Condensed)

AnnotationAssertion(rdfs:comment :hasLastJobSOC2000Condensed "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasLastJobSOC2000Condensed "d_jlsoc00_cc"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasLastJobSOC2000Condensed "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jlsoc00_cc"^^xsd:anyURI)
SubObjectPropertyOf(:hasLastJobSOC2000Condensed :hasWorkProperty)
ObjectPropertyDomain(:hasLastJobSOC2000Condensed :Person)

# Object Property: :hasLoneParentResident (:hasLoneParentResident)

AnnotationAssertion(rdfs:comment :hasLoneParentResident "Assumption: that this is only for children"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasLoneParentResident "d_nonepar_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasLoneParentResident "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasLoneParentResident "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_nonepar_dv"^^xsd:anyURI)
SubObjectPropertyOf(:hasLoneParentResident :hasResident)
ObjectPropertyDomain(:hasLoneParentResident :Household)
ObjectPropertyRange(:hasLoneParentResident :Person)
ObjectPropertyRange(:hasLoneParentResident ObjectSomeValuesFrom(:isResidentLoneParent :Child))

# Object Property: :hasMiscellaneousIncome (:hasMiscellaneousIncome)

SubObjectPropertyOf(:hasMiscellaneousIncome :hasMonthlyIncomeComponentAmount)
ObjectPropertyDomain(:hasMiscellaneousIncome :Person)
ObjectPropertyRange(:hasMiscellaneousIncome :MiscellaneousIncome)

# Object Property: :hasMonthlyIncomeComponentAmount (:hasMonthlyIncomeComponentAmount)

SubObjectPropertyOf(:hasMonthlyIncomeComponentAmount :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasMonthlyIncomeComponentAmount :Person)
ObjectPropertyRange(:hasMonthlyIncomeComponentAmount :MonthlyIncomeComponentAmount)

# Object Property: :hasNVQOrSVQLevel_1_2 (:hasNVQOrSVQLevel_1_2)

AnnotationAssertion(rdfs:comment :hasNVQOrSVQLevel_1_2 "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasNVQOrSVQLevel_1_2 "d_qfvoc9"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasNVQOrSVQLevel_1_2 "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc9"^^xsd:anyURI)
SubObjectPropertyOf(:hasNVQOrSVQLevel_1_2 :hasVocationalQualification)
ObjectPropertyDomain(:hasNVQOrSVQLevel_1_2 :Person)
ObjectPropertyRange(:hasNVQOrSVQLevel_1_2 :NVQOrSVQLevel_1_2)

# Object Property: :hasNVQOrSVQLevel_3_5 (:hasNVQOrSVQLevel_3_5)

AnnotationAssertion(rdfs:comment :hasNVQOrSVQLevel_3_5 "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasNVQOrSVQLevel_3_5 "d_qfvoc10"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasNVQOrSVQLevel_3_5 "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc10"^^xsd:anyURI)
SubObjectPropertyOf(:hasNVQOrSVQLevel_3_5 :hasVocationalQualification)
ObjectPropertyDomain(:hasNVQOrSVQLevel_3_5 :Person)
ObjectPropertyRange(:hasNVQOrSVQLevel_3_5 :NVQOrSVQLevel_3_5)

# Object Property: :hasNetEarningsPrimaryJob (:hasNetEarningsPrimaryJob)

SubObjectPropertyOf(:hasNetEarningsPrimaryJob :hasMonthlyIncomeComponentAmount)
ObjectPropertyDomain(:hasNetEarningsPrimaryJob :Person)
ObjectPropertyRange(:hasNetEarningsPrimaryJob :NetEarningsPrimaryJob)

# Object Property: :hasNetEarningsSecondJob (:hasNetEarningsSecondJob)

SubObjectPropertyOf(:hasNetEarningsSecondJob :hasMonthlyIncomeComponentAmount)
ObjectPropertyDomain(:hasNetEarningsSecondJob :Person)
ObjectPropertyRange(:hasNetEarningsSecondJob :NetEarningsSecondJob)

# Object Property: :hasNetLabourIncome (:hasNetLabourIncome)

SubObjectPropertyOf(:hasNetLabourIncome :hasMonthlyIncomeComponentAmount)
ObjectPropertyDomain(:hasNetLabourIncome :Person)
ObjectPropertyRange(:hasNetLabourIncome :NetLabourIncome)

# Object Property: :hasNoUKVocationalQualification (:hasNoUKVocationalQualification)

AnnotationAssertion(rdfs:comment :hasNoUKVocationalQualification "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasNoUKVocationalQualification "d_qfvoc96"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasNoUKVocationalQualification "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc96"^^xsd:anyURI)
SubObjectPropertyOf(:hasNoUKVocationalQualification :hasPersonProperty)
ObjectPropertyDomain(:hasNoUKVocationalQualification :Person)
DisjointObjectProperties(:hasNoUKVocationalQualification :hasVocationalQualification)

# Object Property: :hasNonUKQualification (:hasNonUKQualification)

SubObjectPropertyOf(:hasNonUKQualification :hasQualification)
ObjectPropertyDomain(:hasNonUKQualification :Person)
ObjectPropertyRange(:hasNonUKQualification :NonUKQualification)

# Object Property: :hasOECDDefinedAdultResident (:hasOECDDefinedAdultResident)

AnnotationAssertion(rdfs:comment :hasOECDDefinedAdultResident "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasOECDDefinedAdultResident "d_nadoecd_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasOECDDefinedAdultResident "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasOECDDefinedAdultResident "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_nadoecd_dv"^^xsd:anyURI)
SubObjectPropertyOf(:hasOECDDefinedAdultResident :hasOECDDefinedResident)
ObjectPropertyDomain(:hasOECDDefinedAdultResident :Household)
ObjectPropertyRange(:hasOECDDefinedAdultResident :OECDAdult)

# Object Property: :hasOECDDefinedChildResident (:hasOECDDefinedChildResident)

AnnotationAssertion(rdfs:comment :hasOECDDefinedChildResident "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasOECDDefinedChildResident "d_nchoecd_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasOECDDefinedChildResident "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasOECDDefinedChildResident "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_nchoecd_dv"^^xsd:anyURI)
SubObjectPropertyOf(:hasOECDDefinedChildResident :hasOECDDefinedResident)
ObjectPropertyDomain(:hasOECDDefinedChildResident :Household)
ObjectPropertyRange(:hasOECDDefinedChildResident :OECDChild)

# Object Property: :hasOECDDefinedResident (:hasOECDDefinedResident)

SubObjectPropertyOf(:hasOECDDefinedResident :hasResident)
ObjectPropertyDomain(:hasOECDDefinedResident :Household)
ObjectPropertyRange(:hasOECDDefinedResident :OECDDefinedPerson)

# Object Property: :hasONCorOND (:hasONCorOND)

AnnotationAssertion(rdfs:comment :hasONCorOND "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasONCorOND "d_qfvoc12"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasONCorOND "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc12"^^xsd:anyURI)
SubObjectPropertyOf(:hasONCorOND :hasVocationalQualification)
ObjectPropertyDomain(:hasONCorOND :Person)
ObjectPropertyRange(:hasONCorOND :ONCOrOND)

# Object Property: :hasOccupierNeitherRentingNorOwning (:hasOccupierNeitherRentingNorOwning)

SubObjectPropertyOf(:hasOccupierNeitherRentingNorOwning :hasTenuredOccupier)
ObjectPropertyDomain(:hasOccupierNeitherRentingNorOwning :Household)

# Object Property: :hasOtherRoom (:hasOtherRoom)

AnnotationAssertion(rdfs:comment :hasOtherRoom "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasOtherRoom "d_hsrooms"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasOtherRoom "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_hsrooms"^^xsd:anyURI)
SubObjectPropertyOf(:hasOtherRoom :hasRoom)
ObjectPropertyDomain(:hasOtherRoom :Household)
ObjectPropertyRange(:hasOtherRoom :OtherRoom)

# Object Property: :hasOtherVocationalOrTechnicalOrProfessionalQualification (:hasOtherVocationalOrTechnicalOrProfessionalQualification)

AnnotationAssertion(rdfs:comment :hasOtherVocationalOrTechnicalOrProfessionalQualification "d_indresp")
AnnotationAssertion(rdfs:comment :hasOtherVocationalOrTechnicalOrProfessionalQualification "d_qfvoc15"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasOtherVocationalOrTechnicalOrProfessionalQualification "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc15"^^xsd:anyURI)
SubObjectPropertyOf(:hasOtherVocationalOrTechnicalOrProfessionalQualification :hasVocationalQualification)
ObjectPropertyDomain(:hasOtherVocationalOrTechnicalOrProfessionalQualification :Person)
ObjectPropertyRange(:hasOtherVocationalOrTechnicalOrProfessionalQualification :OtherVocationalTechnicalOrProfessionalQualification)

# Object Property: :hasOwner (:hasOwner)

SubObjectPropertyOf(:hasOwner :hasTenuredOccupier)
InverseObjectProperties(:hasOwner :hasOwner)
ObjectPropertyDomain(:hasOwner :Household)
ObjectPropertyRange(:hasOwner :Person)

# Object Property: :hasOwnerWithMortgage (:hasOwnerWithMortgage)

SubObjectPropertyOf(:hasOwnerWithMortgage :hasOwner)
ObjectPropertyDomain(:hasOwnerWithMortgage :Household)
ObjectPropertyRange(:hasOwnerWithMortgage :Person)

# Object Property: :hasPartner (:hasPartner)

SubObjectPropertyOf(:hasPartner :hasPersonProperty)
ObjectPropertyDomain(:hasPartner :Person)
ObjectPropertyRange(:hasPartner :Person)

# Object Property: :hasPaymentPeriod (:hasPaymentPeriod)

SubObjectPropertyOf(:hasPaymentPeriod :hasTimePeriod)
ObjectPropertyDomain(:hasPaymentPeriod :TakeHomePay)
ObjectPropertyRange(:hasPaymentPeriod ObjectUnionOf(:PaymentPeriod :Proxy :Unknown))

# Object Property: :hasPaymentPeriodForLatestPersonalIncomeGross (:hasPaymentPeriodForLatestPersonalIncomeGross)

AnnotationAssertion(rdfs:comment :hasPaymentPeriodForLatestPersonalIncomeGross "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPaymentPeriodForLatestPersonalIncomeGross "d_paygwc"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasPaymentPeriodForLatestPersonalIncomeGross "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_paygwc"^^xsd:anyURI)
SubObjectPropertyOf(:hasPaymentPeriodForLatestPersonalIncomeGross :hasPaymentPeriod)
ObjectPropertyDomain(:hasPaymentPeriodForLatestPersonalIncomeGross :TakeHomePay)
ObjectPropertyRange(:hasPaymentPeriodForLatestPersonalIncomeGross ObjectUnionOf(:PaymentPeriod :Proxy :Unknown))

# Object Property: :hasPaymentPeriodForLatestPersonalIncomeTakeHomePay (:hasPaymentPeriodForLatestPersonalIncomeTakeHomePay)

AnnotationAssertion(rdfs:comment :hasPaymentPeriodForLatestPersonalIncomeTakeHomePay "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPaymentPeriodForLatestPersonalIncomeTakeHomePay "d_paynwc"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasPaymentPeriodForLatestPersonalIncomeTakeHomePay "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_paynwc"^^xsd:anyURI)
SubObjectPropertyOf(:hasPaymentPeriodForLatestPersonalIncomeTakeHomePay :hasPaymentPeriod)
ObjectPropertyDomain(:hasPaymentPeriodForLatestPersonalIncomeTakeHomePay :TakeHomePay)
ObjectPropertyRange(:hasPaymentPeriodForLatestPersonalIncomeTakeHomePay ObjectUnionOf(:PaymentPeriod :Proxy :Unknown))

# Object Property: :hasPaymentPeriodForUsualPersonalIncome (:hasPaymentPeriodForUsualPersonalIncome)

AnnotationAssertion(rdfs:comment :hasPaymentPeriodForUsualPersonalIncome "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPaymentPeriodForUsualPersonalIncome "d_payuwc"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasPaymentPeriodForUsualPersonalIncome "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_payuwc"^^xsd:anyURI)
SubObjectPropertyOf(:hasPaymentPeriodForUsualPersonalIncome :hasPaymentPeriod)
ObjectPropertyDomain(:hasPaymentPeriodForUsualPersonalIncome :TakeHomePay)
ObjectPropertyRange(:hasPaymentPeriodForUsualPersonalIncome ObjectUnionOf(:PaymentPeriod :Proxy :Unknown))

# Object Property: :hasPensionIncome (:hasPensionIncome)

SubObjectPropertyOf(:hasPensionIncome :hasMonthlyIncomeComponentAmount)
ObjectPropertyDomain(:hasPensionIncome :Person)
ObjectPropertyRange(:hasPensionIncome :PensionIncome)

# Object Property: :hasPermanentOrTemporaryEmploymentForPrimaryJob (:hasPermanentOrTemporaryEmploymentForPrimaryJob)

AnnotationAssertion(rdfs:comment :hasPermanentOrTemporaryEmploymentForPrimaryJob "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPermanentOrTemporaryEmploymentForPrimaryJob "d_jbterm1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPermanentOrTemporaryEmploymentForPrimaryJob "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbterm1"^^xsd:anyURI)
SubObjectPropertyOf(:hasPermanentOrTemporaryEmploymentForPrimaryJob :hasWorkProperty)
ObjectPropertyDomain(:hasPermanentOrTemporaryEmploymentForPrimaryJob :Person)
ObjectPropertyRange(:hasPermanentOrTemporaryEmploymentForPrimaryJob ObjectUnionOf(:NotPermanent :Permanent :Unknown))

# Object Property: :hasPersonProperty (:hasPersonProperty)

ObjectPropertyDomain(:hasPersonProperty :Person)
ObjectPropertyRange(:hasPersonProperty ObjectUnionOf(:Person :PoliticalParty :Qualification :Transport))

# Object Property: :hasPersonalIncomeNetUsualPay (:hasPersonalIncomeNetUsualPay)

SubObjectPropertyOf(:hasPersonalIncomeNetUsualPay :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasPersonalIncomeNetUsualPay :Person)

# Object Property: :hasPersonalIncomeOf (:hasPersonalIncomeOf)

AnnotationAssertion(rdfs:comment :hasPersonalIncomeOf "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPersonalIncomeOf "d_pjbptft"^^xsd:string)
SubObjectPropertyOf(:hasPersonalIncomeOf :hasWorkProperty)
ObjectPropertyDomain(:hasPersonalIncomeOf :Person)
ObjectPropertyRange(:hasPersonalIncomeOf :PersonalIncome)

# Object Property: :hasPersonalIncomeUsualPay (:hasPersonalIncomeUsualPay)

SubObjectPropertyOf(:hasPersonalIncomeUsualPay :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasPersonalIncomeUsualPay :Person)

# Object Property: :hasPersonalUseOfMobilePhone (:hasPersonalUseOfMobilePhone)

AnnotationAssertion(rdfs:comment :hasPersonalUseOfMobilePhone "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPersonalUseOfMobilePhone "d_mobuse"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasPersonalUseOfMobilePhone "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_mobuse"^^xsd:anyURI)
SubObjectPropertyOf(:hasPersonalUseOfMobilePhone :hasPersonProperty)
ObjectPropertyDomain(:hasPersonalUseOfMobilePhone :Person)
ObjectPropertyRange(:hasPersonalUseOfMobilePhone :MobilePhone)

# Object Property: :hasPoliticalConnection (:hasPoliticalConnection)

SubObjectPropertyOf(:hasPoliticalConnection :hasPersonProperty)
ObjectPropertyDomain(:hasPoliticalConnection :Person)
ObjectPropertyRange(:hasPoliticalConnection :PoliticalParty)

# Object Property: :hasPowerSupply (:hasPowerSupply)

SubObjectPropertyOf(:hasPowerSupply :hasHouseholdProperty)
ObjectPropertyDomain(:hasPowerSupply :Household)
ObjectPropertyRange(:hasPowerSupply :PowerSupply)

# Object Property: :hasPrimaryJobOf (:hasPrimaryJobOf)

SubObjectPropertyOf(:hasPrimaryJobOf :hasCurrentEconomicActivityOf)
ObjectPropertyDomain(:hasPrimaryJobOf :Person)
ObjectPropertyRange(:hasPrimaryJobOf :PrimaryJob)

# Object Property: :hasPrivateBenefitIncome (:hasPrivateBenefitIncome)

SubObjectPropertyOf(:hasPrivateBenefitIncome :hasMonthlyIncomeComponentAmount)
ObjectPropertyDomain(:hasPrivateBenefitIncome :Person)
ObjectPropertyRange(:hasPrivateBenefitIncome :PrivateBenefitIncome)

# Object Property: :hasQualification (:hasQualification)

AnnotationAssertion(rdfs:comment :hasQualification "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasQualification "d_qualoc"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasQualification "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qualoc"^^xsd:anyURI)
SubObjectPropertyOf(:hasQualification :hasPersonProperty)
ObjectPropertyDomain(:hasQualification :Person)
ObjectPropertyRange(:hasQualification :Qualification)

# Object Property: :hasRSAOrOCROrCleriOrCommQualification (:hasRSAOrOCROrCleriOrCommQualification)

AnnotationAssertion(rdfs:comment :hasRSAOrOCROrCleriOrCommQualification "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasRSAOrOCROrCleriOrCommQualification "d_qvfvoc6"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasRSAOrOCROrCleriOrCommQualification "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc6"^^xsd:anyURI)
SubObjectPropertyOf(:hasRSAOrOCROrCleriOrCommQualification :hasVocationalQualification)
ObjectPropertyDomain(:hasRSAOrOCROrCleriOrCommQualification :Person)
ObjectPropertyRange(:hasRSAOrOCROrCleriOrCommQualification :RSAOrOCROrCleriOrCommQualification)

# Object Property: :hasRenter (:hasRenter)

SubObjectPropertyOf(:hasRenter :hasTenuredOccupier)
InverseObjectProperties(:hasRenter :hasRenter)
ObjectPropertyDomain(:hasRenter :Household)
ObjectPropertyRange(:hasRenter :Person)

# Object Property: :hasRenterAndRentIncludesHeatingLightingOrWater (:hasRenterAndRentIncludesHeatingLightingOrWater)

AnnotationAssertion(rdfs:comment :hasRenterAndRentIncludesHeatingLightingOrWater "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasRenterAndRentIncludesHeatingLightingOrWater "d_rentinc1"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasRenterAndRentIncludesHeatingLightingOrWater "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_rentinc2"^^xsd:anyURI)
SubObjectPropertyOf(:hasRenterAndRentIncludesHeatingLightingOrWater :hasRenter)
ObjectPropertyDomain(:hasRenterAndRentIncludesHeatingLightingOrWater :Household)
ObjectPropertyRange(:hasRenterAndRentIncludesHeatingLightingOrWater :Person)

# Object Property: :hasRenterAndRentIncludesSewageAndWaterCharges (:hasRenterAndRentIncludesSewageAndWaterCharges)

AnnotationAssertion(rdfs:comment :hasRenterAndRentIncludesSewageAndWaterCharges "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasRenterAndRentIncludesSewageAndWaterCharges "d_rentinc2"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasRenterAndRentIncludesSewageAndWaterCharges "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_rentinc1"^^xsd:anyURI)
SubObjectPropertyOf(:hasRenterAndRentIncludesSewageAndWaterCharges :hasRenter)
ObjectPropertyDomain(:hasRenterAndRentIncludesSewageAndWaterCharges :Household)
ObjectPropertyRange(:hasRenterAndRentIncludesSewageAndWaterCharges :Person)

# Object Property: :hasRenterAndRentsFromAHousingAssociation (:hasRenterAndRentsFromAHousingAssociation)

SubObjectPropertyOf(:hasRenterAndRentsFromAHousingAssociation :hasRenter)
ObjectPropertyDomain(:hasRenterAndRentsFromAHousingAssociation :Household)
ObjectPropertyRange(:hasRenterAndRentsFromAHousingAssociation :Person)

# Object Property: :hasRenterAndRentsFromCouncilOrLocalAuthority (:hasRenterAndRentsFromCouncilOrLocalAuthority)

SubObjectPropertyOf(:hasRenterAndRentsFromCouncilOrLocalAuthority :hasRenter)
ObjectPropertyDomain(:hasRenterAndRentsFromCouncilOrLocalAuthority :Household)
ObjectPropertyRange(:hasRenterAndRentsFromCouncilOrLocalAuthority :Person)

# Object Property: :hasRenterAndRentsFromEmployerOfAResident (:hasRenterAndRentsFromEmployerOfAResident)

SubObjectPropertyOf(:hasRenterAndRentsFromEmployerOfAResident :hasRenter)
ObjectPropertyDomain(:hasRenterAndRentsFromEmployerOfAResident :Household)
ObjectPropertyRange(:hasRenterAndRentsFromEmployerOfAResident :Person)

# Object Property: :hasRenterAndRentsFromHousingAssociation (:hasRenterAndRentsFromHousingAssociation)

SubObjectPropertyOf(:hasRenterAndRentsFromHousingAssociation :hasRenter)
ObjectPropertyDomain(:hasRenterAndRentsFromHousingAssociation :Household)
ObjectPropertyRange(:hasRenterAndRentsFromHousingAssociation :Person)

# Object Property: :hasRenterAndRentsFromPrivateLandlord (:hasRenterAndRentsFromPrivateLandlord)

SubObjectPropertyOf(:hasRenterAndRentsFromPrivateLandlord :hasRenter)
ObjectPropertyDomain(:hasRenterAndRentsFromPrivateLandlord :Household)
ObjectPropertyRange(:hasRenterAndRentsFromPrivateLandlord :Person)

# Object Property: :hasRenterAndRentsFromPrivateLandlordFurnished (:hasRenterAndRentsFromPrivateLandlordFurnished)

SubObjectPropertyOf(:hasRenterAndRentsFromPrivateLandlordFurnished :hasRenterAndRentsFromPrivateLandlord)
ObjectPropertyDomain(:hasRenterAndRentsFromPrivateLandlordFurnished :Household)
ObjectPropertyRange(:hasRenterAndRentsFromPrivateLandlordFurnished :Person)

# Object Property: :hasRenterAndRentsFromPrivateLandlordUnfurnished (:hasRenterAndRentsFromPrivateLandlordUnfurnished)

SubObjectPropertyOf(:hasRenterAndRentsFromPrivateLandlordUnfurnished :hasRenterAndRentsFromPrivateLandlord)
ObjectPropertyDomain(:hasRenterAndRentsFromPrivateLandlordUnfurnished :Household)
ObjectPropertyRange(:hasRenterAndRentsFromPrivateLandlordUnfurnished :Person)

# Object Property: :hasResident (:hasResident)

AnnotationAssertion(rdfs:comment :hasResident "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResident "d_hhsize"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasResident "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_hhsize"^^xsd:anyURI)
SubObjectPropertyOf(:hasResident :hasHouseholdProperty)
InverseObjectProperties(:hasResident :isResident)
AsymmetricObjectProperty(:hasResident)
IrreflexiveObjectProperty(:hasResident)
ObjectPropertyDomain(:hasResident :Household)
ObjectPropertyRange(:hasResident :Person)

# Object Property: :hasResidentAdultPerson (:hasResidentAdultPerson)

AnnotationAssertion(rdfs:comment :hasResidentAdultPerson "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentAdultPerson "dd_numadult"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasResidentAdultPerson "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_numadult"^^xsd:anyURI)
SubObjectPropertyOf(:hasResidentAdultPerson :hasResident)
ObjectPropertyDomain(:hasResidentAdultPerson :Household)
ObjectPropertyRange(:hasResidentAdultPerson :Adult)

# Object Property: :hasResidentChild (:hasResidentChild)

AnnotationAssertion(rdfs:comment :hasResidentChild "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentChild "d_nkids_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentChild "d_numchild"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentChild "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasResidentChild "https://www.understandingsociety.ac.uk/documentation/innovation-panel/dataset-documentation/wave/4/datafile/d_hhresp_ip/variable/d_nkids_dv"^^xsd:anyURI)
SubObjectPropertyOf(:hasResidentChild :hasResident)
ObjectPropertyDomain(:hasResidentChild :Household)
ObjectPropertyRange(:hasResidentChild :Child)

# Object Property: :hasResidentChildAge_0-2 (:hasResidentChildAge_0-2)

AnnotationAssertion(rdfs:comment :hasResidentChildAge_0-2 "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentChildAge_0-2 "d_nch02_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentChildAge_0-2 "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasResidentChildAge_0-2 "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_nch02_dv"^^xsd:anyURI)
SubObjectPropertyOf(:hasResidentChildAge_0-2 :hasResidentChild)
ObjectPropertyDomain(:hasResidentChildAge_0-2 :Household)
ObjectPropertyRange(:hasResidentChildAge_0-2 :ChildAged_00_to_02)

# Object Property: :hasResidentChildAge_0-9 (:hasResidentChildAge_0-9)

AnnotationAssertion(rdfs:comment :hasResidentChildAge_0-9 "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentChildAge_0-9 "d_nunder10"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasResidentChildAge_0-9 "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_nunder10"^^xsd:anyURI)
SubObjectPropertyOf(:hasResidentChildAge_0-9 :hasResidentChild)
ObjectPropertyDomain(:hasResidentChildAge_0-9 :Household)
ObjectPropertyRange(:hasResidentChildAge_0-9 :ChildAged_00_to_09)

# Object Property: :hasResidentChildAge_10-15 (:hasResidentChildAge_10-15)

AnnotationAssertion(rdfs:comment :hasResidentChildAge_10-15 "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentChildAge_10-15 "d_n10n15"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasResidentChildAge_10-15 "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_n10to15"^^xsd:anyURI)
SubObjectPropertyOf(:hasResidentChildAge_10-15 :hasResidentChild)
ObjectPropertyDomain(:hasResidentChildAge_10-15 :Household)
ObjectPropertyRange(:hasResidentChildAge_10-15 :ChildAged_10_to_15)

# Object Property: :hasResidentChildAge_12-15 (:hasResidentChildAge_12-15)

AnnotationAssertion(rdfs:comment :hasResidentChildAge_12-15 "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentChildAge_12-15 "d_nch1215_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentChildAge_12-15 "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasResidentChildAge_12-15 "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_nch1215_dv"^^xsd:anyURI)
SubObjectPropertyOf(:hasResidentChildAge_12-15 :hasResidentChild)
ObjectPropertyDomain(:hasResidentChildAge_12-15 :Household)
ObjectPropertyRange(:hasResidentChildAge_12-15 :ChildAged_12_to_15)

# Object Property: :hasResidentChildAge_3-4 (:hasResidentChildAge_3-4)

AnnotationAssertion(rdfs:comment :hasResidentChildAge_3-4 "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentChildAge_3-4 "d_nch34_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentChildAge_3-4 "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasResidentChildAge_3-4 "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_nch34_dv"^^xsd:anyURI)
SubObjectPropertyOf(:hasResidentChildAge_3-4 :hasResidentChild)
ObjectPropertyDomain(:hasResidentChildAge_3-4 :Household)
ObjectPropertyRange(:hasResidentChildAge_3-4 :ChildAged_03_to_04)

# Object Property: :hasResidentChildAge_5-11 (:hasResidentChildAge_5-11)

AnnotationAssertion(rdfs:comment :hasResidentChildAge_5-11 "d_nch511_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentChildAge_5-11 "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasResidentChildAge_5-11 "d_hhresp"^^xsd:anyURI)
AnnotationAssertion(rdfs:isDefinedBy :hasResidentChildAge_5-11 "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_nch511_dv"^^xsd:anyURI)
SubObjectPropertyOf(:hasResidentChildAge_5-11 :hasResidentChild)
ObjectPropertyDomain(:hasResidentChildAge_5-11 :Household)
ObjectPropertyRange(:hasResidentChildAge_5-11 :ChildAged_05_to_11)

# Object Property: :hasResidentCouple (:hasResidentCouple)

AnnotationAssertion(rdfs:comment :hasResidentCouple "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentCouple "d_ncouple_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentCouple "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasResidentCouple "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_ncouple_dv"^^xsd:anyURI)
SubObjectPropertyOf(:hasResidentCouple :hasResident)
ObjectPropertyDomain(:hasResidentCouple :Household)
ObjectPropertyRange(:hasResidentCouple :Couple)

# Object Property: :hasResidentInPaidEmployment (:hasResidentInPaidEmployment)

AnnotationAssertion(rdfs:comment :hasResidentInPaidEmployment "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentInPaidEmployment "d_nemp_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentInPaidEmployment "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasResidentInPaidEmployment "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_nemp_dv"^^xsd:anyURI)
SubObjectPropertyOf(:hasResidentInPaidEmployment :hasResident)
ObjectPropertyDomain(:hasResidentInPaidEmployment :Household)
ObjectPropertyRange(:hasResidentInPaidEmployment :PersonInPaidEmployment)
DisjointObjectProperties(:hasResidentInPaidEmployment :hasResidentNotInPaidEmployment)

# Object Property: :hasResidentNotInPaidEmployment (:hasResidentNotInPaidEmployment)

AnnotationAssertion(rdfs:comment :hasResidentNotInPaidEmployment "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentNotInPaidEmployment "d_nue_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentNotInPaidEmployment "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasResidentNotInPaidEmployment "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_nue_dv"^^xsd:anyURI)
SubObjectPropertyOf(:hasResidentNotInPaidEmployment :hasResident)
ObjectPropertyDomain(:hasResidentNotInPaidEmployment :Household)
ObjectPropertyRange(:hasResidentNotInPaidEmployment :Person)

# Object Property: :hasResidentOfWorkingAge (:hasResidentOfWorkingAge)

AnnotationAssertion(rdfs:comment :hasResidentOfWorkingAge "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentOfWorkingAge "d_nwage_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentOfWorkingAge "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasResidentOfWorkingAge "https://www.gov.uk/child-employment/minimum-ages-children-can-work"^^xsd:anyURI)
AnnotationAssertion(rdfs:isDefinedBy :hasResidentOfWorkingAge "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/1/datafile/a_hhresp/variable/a_nwage_dv"^^xsd:anyURI)
SubObjectPropertyOf(:hasResidentOfWorkingAge :hasResident)
ObjectPropertyDomain(:hasResidentOfWorkingAge :Household)
ObjectPropertyRange(:hasResidentOfWorkingAge DataSomeValuesFrom(:hasAgeValueInYears DatatypeRestriction(xsd:positiveInteger xsd:minExclusive "15"^^xsd:positiveInteger)))

# Object Property: :hasResidentPensionablePerson (:hasResidentPensionablePerson)

AnnotationAssertion(rdfs:comment :hasResidentPensionablePerson "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentPensionablePerson "d_npens_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasResidentPensionablePerson "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasResidentPensionablePerson "https://www.understandingsociety.ac.uk/documentation/innovation-panel/dataset-documentation/wave/4/datafile/d_hhresp_ip/variable/d_npens_dv"^^xsd:anyURI)
SubObjectPropertyOf(:hasResidentPensionablePerson :hasResident)
ObjectPropertyDomain(:hasResidentPensionablePerson :Household)
ObjectPropertyRange(:hasResidentPensionablePerson :PensionableAgePerson)

# Object Property: :hasRoom (:hasRoom)

SubObjectPropertyOf(:hasRoom :hasHouseholdProperty)
AsymmetricObjectProperty(:hasRoom)
IrreflexiveObjectProperty(:hasRoom)
ObjectPropertyDomain(:hasRoom :Household)
ObjectPropertyRange(:hasRoom :Room)

# Object Property: :hasScotVECOrScoTECOrScotBec (:hasScotVECOrScoTECOrScotBec)

AnnotationAssertion(rdfs:comment :hasScotVECOrScoTECOrScotBec "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasScotVECOrScoTECOrScotBec "d_qfvoc14"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasScotVECOrScoTECOrScotBec "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc14"^^xsd:anyURI)
SubObjectPropertyOf(:hasScotVECOrScoTECOrScotBec :hasVocationalQualification)
ObjectPropertyDomain(:hasScotVECOrScoTECOrScotBec :Person)
ObjectPropertyRange(:hasScotVECOrScoTECOrScotBec :ScotVECorScoTECOrScotBEC)

# Object Property: :hasSelfEmployedIncome (:hasSelfEmployedIncome)

AnnotationAssertion(rdfs:isDefinedBy :hasSelfEmployedIncome "d_indresp"^^xsd:anyURI)
AnnotationAssertion(rdfs:isDefinedBy :hasSelfEmployedIncome "d_jspayu"^^xsd:anyURI)
AnnotationAssertion(rdfs:isDefinedBy :hasSelfEmployedIncome "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jspayu"^^xsd:anyURI)
SubObjectPropertyOf(:hasSelfEmployedIncome :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasSelfEmployedIncome :Person)
ObjectPropertyDomain(:hasSelfEmployedIncome ObjectSomeValuesFrom(:isEmployedOrSelfEmployed :SelfEmployed))
ObjectPropertyRange(:hasSelfEmployedIncome :SelfEmployedIncome)

# Object Property: :hasSexOf (:hasSexOf)

AnnotationAssertion(rdfs:comment :hasSexOf "d_indresp")
AnnotationAssertion(rdfs:comment :hasSexOf "d_sex_cr"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasSexOf "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_sex_cr"^^xsd:anyURI)
SubObjectPropertyOf(:hasSexOf :hasPersonProperty)
ObjectPropertyDomain(:hasSexOf :Person)
ObjectPropertyRange(:hasSexOf ObjectUnionOf(:Female :Male))

# Object Property: :hasShareOfIncomeFromBenefitsAndIncomeNEC (:hasShareOfIncomeFromBenefitsAndIncomeNEC)

SubObjectPropertyOf(:hasShareOfIncomeFromBenefitsAndIncomeNEC :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasShareOfIncomeFromBenefitsAndIncomeNEC :Person)
ObjectPropertyRange(:hasShareOfIncomeFromBenefitsAndIncomeNEC :ShareOfIncomeFromBenefitsAndIncomeNEC)

# Object Property: :hasSharedOwner (:hasSharedOwner)

SubObjectPropertyOf(:hasSharedOwner :hasOwner)
ObjectPropertyDomain(:hasSharedOwner :Household)
ObjectPropertyRange(:hasSharedOwner :Person)

# Object Property: :hasSocialBenefitIncome (:hasSocialBenefitIncome)

SubObjectPropertyOf(:hasSocialBenefitIncome :hasMonthlyIncomeComponentAmount)
ObjectPropertyDomain(:hasSocialBenefitIncome :Person)
ObjectPropertyRange(:hasSocialBenefitIncome :SocialBenefitIncome)

# Object Property: :hasSpouse (:hasSpouse)

SubObjectPropertyOf(:hasSpouse :hasHusbandWifeOrCivilPartner)
ObjectPropertyDomain(:hasSpouse :Person)
ObjectPropertyRange(:hasSpouse :Person)

# Object Property: :hasTakeHomePay (:hasTakeHomePay)

SubObjectPropertyOf(:hasTakeHomePay :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasTakeHomePay ObjectSomeValuesFrom(:isEmployedOrSelfEmployed :NotSelfEmployed))
ObjectPropertyRange(:hasTakeHomePay :TakeHomePay)

# Object Property: :hasTenuredOccupier (:hasTenuredOccupier)

AnnotationAssertion(rdfs:comment :hasTenuredOccupier "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTenuredOccupier "d_hsownd"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTenuredOccupier "d_tenure_dv"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasTenuredOccupier "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_hsownd"^^xsd:anyURI)
SubObjectPropertyOf(:hasTenuredOccupier :hasHouseholdProperty)
ObjectPropertyDomain(:hasTenuredOccupier :Household)
ObjectPropertyRange(:hasTenuredOccupier :Adult)

# Object Property: :hasTotalMonthlyLabourIncome (:hasTotalMonthlyLabourIncome)

SubObjectPropertyOf(:hasTotalMonthlyLabourIncome :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasTotalMonthlyLabourIncome :Person)
ObjectPropertyRange(:hasTotalMonthlyLabourIncome :TotalMonthlyLabourIncome)

# Object Property: :hasTotalMonthlyPersonalIncome (:hasTotalMonthlyPersonalIncome)

SubObjectPropertyOf(:hasTotalMonthlyPersonalIncome :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasTotalMonthlyPersonalIncome :Person)
ObjectPropertyRange(:hasTotalMonthlyPersonalIncome :TotalMonthlyPersonalIncome)

# Object Property: :hasTotalNetPersonalIncome (:hasTotalNetPersonalIncome)

SubObjectPropertyOf(:hasTotalNetPersonalIncome :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasTotalNetPersonalIncome :Person)
ObjectPropertyRange(:hasTotalNetPersonalIncome :TotalNetPersonalIncome)

# Object Property: :hasTotalPersonalIncome (:hasTotalPersonalIncome)

AnnotationAssertion(rdfs:comment :hasTotalPersonalIncome "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTotalPersonalIncome "dprfitba"^^xsd:string)
SubObjectPropertyOf(:hasTotalPersonalIncome :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasTotalPersonalIncome :Person)
ObjectPropertyRange(:hasTotalPersonalIncome :TotalPersonalIncome)

# Object Property: :hasTotalPersonalIncomeWeekly (:hasTotalPersonalIncomeWeekly)

AnnotationAssertion(rdfs:comment :hasTotalPersonalIncomeWeekly "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTotalPersonalIncomeWeekly "dprfitbw"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasTotalPersonalIncomeWeekly "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_prfitbw"^^xsd:anyURI)
SubObjectPropertyOf(:hasTotalPersonalIncomeWeekly :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasTotalPersonalIncomeWeekly :Person)
ObjectPropertyDomain(:hasTotalPersonalIncomeWeekly DataHasValue(:hasTotalPersonalIncomeValueType "answer in weekly amount"))
ObjectPropertyRange(:hasTotalPersonalIncomeWeekly ObjectUnionOf(:Refused :TotalPersonalIncomeWeekly :Unknown))

# Object Property: :hasTotalPersonalIncomeYearly (:hasTotalPersonalIncomeYearly)

AnnotationAssertion(rdfs:comment :hasTotalPersonalIncomeYearly "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTotalPersonalIncomeYearly "dprfitba"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasTotalPersonalIncomeYearly "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_prfitba"^^xsd:anyURI)
SubObjectPropertyOf(:hasTotalPersonalIncomeYearly :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasTotalPersonalIncomeYearly :Person)
ObjectPropertyDomain(:hasTotalPersonalIncomeYearly DataHasValue(:hasTotalPersonalIncomeValueType "answer in annual amount"))
ObjectPropertyRange(:hasTotalPersonalIncomeYearly ObjectUnionOf(:Refused :TotalPersonalIncomeYearly :Unknown))

# Object Property: :hasTotalWeeklyEarnings (:hasTotalWeeklyEarnings)

AnnotationAssertion(rdfs:comment :hasTotalWeeklyEarnings "Mising jbhas and jboff"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTotalWeeklyEarnings "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTotalWeeklyEarnings "d_prearnw"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasTotalWeeklyEarnings "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_prearnw"^^xsd:anyURI)
SubObjectPropertyOf(:hasTotalWeeklyEarnings :hasEarnings)
ObjectPropertyDomain(:hasTotalWeeklyEarnings :Person)
ObjectPropertyDomain(:hasTotalWeeklyEarnings DataHasValue(:hasTotalEarningsType "answer in weekly amount"))
ObjectPropertyRange(:hasTotalWeeklyEarnings ObjectUnionOf(:Refused :TotalEarningsWeekly :Unknown))

# Object Property: :hasTotalYearlyEarnings (:hasTotalYearlyEarnings)

AnnotationAssertion(rdfs:comment :hasTotalYearlyEarnings "Mising jbhas and jboff"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTotalYearlyEarnings "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTotalYearlyEarnings "d_prearna"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasTotalYearlyEarnings "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_prearna"^^xsd:anyURI)
SubObjectPropertyOf(:hasTotalYearlyEarnings :hasEarnings)
ObjectPropertyDomain(:hasTotalYearlyEarnings :Person)
ObjectPropertyDomain(:hasTotalYearlyEarnings DataHasValue(:hasTotalEarningsType "answer in yearly amount"))
ObjectPropertyRange(:hasTotalYearlyEarnings ObjectUnionOf(:Refused :TotalEarningsYearly :Unknown))

# Object Property: :hasUKQualification (:hasUKQualification)

SubObjectPropertyOf(:hasUKQualification :hasQualification)
ObjectPropertyDomain(:hasUKQualification :Person)
ObjectPropertyRange(:hasUKQualification :UKQualification)

# Object Property: :hasUseOf (:hasUseOf)

SubObjectPropertyOf(:hasUseOf :hasHouseholdProperty)
AsymmetricObjectProperty(:hasUseOf)
IrreflexiveObjectProperty(:hasUseOf)
ObjectPropertyDomain(:hasUseOf :Household)
ObjectPropertyRange(:hasUseOf ObjectUnionOf(:Car :ConsumerDuarable))

# Object Property: :hasUseOfAutomobile (:hasUseOfAutomobile)

AnnotationAssertion(rdfs:comment :hasUseOfAutomobile "d_caruse"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUseOfAutomobile "d_indresp")
AnnotationAssertion(rdfs:isDefinedBy :hasUseOfAutomobile "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_caruse"^^xsd:anyURI)
SubObjectPropertyOf(:hasUseOfAutomobile :hasPersonProperty)
ObjectPropertyDomain(:hasUseOfAutomobile :Person)
ObjectPropertyRange(:hasUseOfAutomobile ObjectUnionOf(:Car :Van))

# Object Property: :hasUseOfCar (:hasUseOfCar)

AnnotationAssertion(rdfs:comment :hasUseOfCar "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUseOfCar "d_ncars"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUseOfCar "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_ncars"^^xsd:anyURI)
SubObjectPropertyOf(:hasUseOfCar :hasUseOf)
ObjectPropertyDomain(:hasUseOfCar :Household)
ObjectPropertyRange(:hasUseOfCar :Car)

# Object Property: :hasUseOfColourTelevision (:hasUseOfColourTelevision)

AnnotationAssertion(rdfs:comment :hasUseOfColourTelevision "d_cduse1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUseOfColourTelevision "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUseOfColourTelevision "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_cduse1"^^xsd:anyURI)
SubObjectPropertyOf(:hasUseOfColourTelevision :hasUseOfConsumerElectronics)
ObjectPropertyDomain(:hasUseOfColourTelevision :Household)
ObjectPropertyRange(:hasUseOfColourTelevision :ColourTelevision)

# Object Property: :hasUseOfCompactDiscPlayer (:hasUseOfCompactDiscPlayer)

AnnotationAssertion(rdfs:comment :hasUseOfCompactDiscPlayer "d_cduse11"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUseOfCompactDiscPlayer "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUseOfCompactDiscPlayer "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_cduse11"^^xsd:anyURI)
SubObjectPropertyOf(:hasUseOfCompactDiscPlayer :hasUseOfConsumerElectronics)
ObjectPropertyDomain(:hasUseOfCompactDiscPlayer :Household)
ObjectPropertyRange(:hasUseOfCompactDiscPlayer :CompactDiscPlayer)

# Object Property: :hasUseOfConsumerDurables (:hasUseOfConsumerDurables)

SubObjectPropertyOf(:hasUseOfConsumerDurables :hasUseOf)

# Object Property: :hasUseOfConsumerElectronics (:hasUseOfConsumerElectronics)

SubObjectPropertyOf(:hasUseOfConsumerElectronics :hasUseOfConsumerDurables)
ObjectPropertyDomain(:hasUseOfConsumerElectronics :Household)
ObjectPropertyRange(:hasUseOfConsumerElectronics :ConsumerElectronics)

# Object Property: :hasUseOfDishWasher (:hasUseOfDishWasher)

AnnotationAssertion(rdfs:comment :hasUseOfDishWasher "d_cduse8"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUseOfDishWasher "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUseOfDishWasher "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_cduse8"^^xsd:anyURI)
SubObjectPropertyOf(:hasUseOfDishWasher :hasUseOfWhiteGoods)
ObjectPropertyDomain(:hasUseOfDishWasher :Household)
ObjectPropertyRange(:hasUseOfDishWasher :Dishwasher)

# Object Property: :hasUseOfFreezer (:hasUseOfFreezer)

AnnotationAssertion(rdfs:comment :hasUseOfFreezer "d_cduse5"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUseOfFreezer "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUseOfFreezer "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_cduse5"^^xsd:anyURI)
SubObjectPropertyOf(:hasUseOfFreezer :hasUseOfWhiteGoods)
FunctionalObjectProperty(:hasUseOfFreezer)
ObjectPropertyDomain(:hasUseOfFreezer :Household)
ObjectPropertyRange(:hasUseOfFreezer :Freezer)

# Object Property: :hasUseOfHomeComputer (:hasUseOfHomeComputer)

AnnotationAssertion(rdfs:comment :hasUseOfHomeComputer "d_cduse10"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUseOfHomeComputer "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUseOfHomeComputer "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_cduse10"^^xsd:anyURI)
SubObjectPropertyOf(:hasUseOfHomeComputer :hasUseOfConsumerElectronics)
ObjectPropertyDomain(:hasUseOfHomeComputer :Household)
ObjectPropertyRange(:hasUseOfHomeComputer :HomeComputer)

# Object Property: :hasUseOfLandLine (:hasUseOfLandLine)

AnnotationAssertion(rdfs:comment :hasUseOfLandLine "d_cduse12")
AnnotationAssertion(rdfs:comment :hasUseOfLandLine "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUseOfLandLine "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_cduse12"^^xsd:anyURI)
SubObjectPropertyOf(:hasUseOfLandLine :hasUseOfTelephone)
ObjectPropertyDomain(:hasUseOfLandLine :Household)
ObjectPropertyRange(:hasUseOfLandLine :Landline)

# Object Property: :hasUseOfMicrowaveOven (:hasUseOfMicrowaveOven)

AnnotationAssertion(rdfs:comment :hasUseOfMicrowaveOven "d_cduse9"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUseOfMicrowaveOven "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUseOfMicrowaveOven "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_cduse9"^^xsd:anyURI)
SubObjectPropertyOf(:hasUseOfMicrowaveOven :hasUseOfWhiteGoods)
FunctionalObjectProperty(:hasUseOfMicrowaveOven)
AsymmetricObjectProperty(:hasUseOfMicrowaveOven)
IrreflexiveObjectProperty(:hasUseOfMicrowaveOven)
ObjectPropertyDomain(:hasUseOfMicrowaveOven :Household)
ObjectPropertyRange(:hasUseOfMicrowaveOven :MicrowaveOven)

# Object Property: :hasUseOfMobilePhone (:hasUseOfMobilePhone)

AnnotationAssertion(rdfs:comment :hasUseOfMobilePhone "d_cduse13")
AnnotationAssertion(rdfs:comment :hasUseOfMobilePhone "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUseOfMobilePhone "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_cduse13"^^xsd:anyURI)
SubObjectPropertyOf(:hasUseOfMobilePhone :hasUseOfTelephone)
ObjectPropertyDomain(:hasUseOfMobilePhone :Household)
ObjectPropertyRange(:hasUseOfMobilePhone :MobilePhone)

# Object Property: :hasUseOfNoConsumerDurables (:hasUseOfNoConsumerDurables)

AnnotationAssertion(rdfs:comment :hasUseOfNoConsumerDurables "d_cduse96"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUseOfNoConsumerDurables "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUseOfNoConsumerDurables "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_cduse96"^^xsd:anyURI)
SubObjectPropertyOf(:hasUseOfNoConsumerDurables :hasUseOf)
ObjectPropertyDomain(:hasUseOfNoConsumerDurables :Household)
ObjectPropertyRange(:hasUseOfNoConsumerDurables :NoRecognizedWhiteGood)

# Object Property: :hasUseOfTelephone (:hasUseOfTelephone)

SubObjectPropertyOf(:hasUseOfTelephone :hasUseOfConsumerElectronics)
ObjectPropertyDomain(:hasUseOfTelephone :Household)
ObjectPropertyRange(:hasUseOfTelephone :Telephone)

# Object Property: :hasUseOfTumbleDryer (:hasUseOfTumbleDryer)

AnnotationAssertion(rdfs:comment :hasUseOfTumbleDryer "d_cduse7"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUseOfTumbleDryer "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUseOfTumbleDryer "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_cduse7"^^xsd:anyURI)
SubObjectPropertyOf(:hasUseOfTumbleDryer :hasUseOfWhiteGoods)
FunctionalObjectProperty(:hasUseOfTumbleDryer)
AsymmetricObjectProperty(:hasUseOfTumbleDryer)
IrreflexiveObjectProperty(:hasUseOfTumbleDryer)
ObjectPropertyDomain(:hasUseOfTumbleDryer :Household)
ObjectPropertyRange(:hasUseOfTumbleDryer :TumbleDryer)

# Object Property: :hasUseOfVideoRecordOrDVDPlayer (:hasUseOfVideoRecordOrDVDPlayer)

AnnotationAssertion(rdfs:comment :hasUseOfVideoRecordOrDVDPlayer "d_cduse2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUseOfVideoRecordOrDVDPlayer "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUseOfVideoRecordOrDVDPlayer "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_cduse2"^^xsd:anyURI)
SubObjectPropertyOf(:hasUseOfVideoRecordOrDVDPlayer :hasUseOfConsumerElectronics)
ObjectPropertyDomain(:hasUseOfVideoRecordOrDVDPlayer :Household)
ObjectPropertyRange(:hasUseOfVideoRecordOrDVDPlayer :VideoRecorderOrDVDPlayer)

# Object Property: :hasUseOfWashingMachine (:hasUseOfWashingMachine)

AnnotationAssertion(rdfs:comment :hasUseOfWashingMachine "d_cduse6"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUseOfWashingMachine "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUseOfWashingMachine "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_cduse6"^^xsd:anyURI)
SubObjectPropertyOf(:hasUseOfWashingMachine :hasUseOfWhiteGoods)
ObjectPropertyDomain(:hasUseOfWashingMachine :Household)
ObjectPropertyRange(:hasUseOfWashingMachine :WashingMachine)

# Object Property: :hasUseOfWhiteGoods (:hasUseOfWhiteGoods)

SubObjectPropertyOf(:hasUseOfWhiteGoods :hasUseOfConsumerDurables)
ObjectPropertyDomain(:hasUseOfWhiteGoods :Household)
ObjectPropertyRange(:hasUseOfWhiteGoods :WhiteGood)

# Object Property: :hasUsualPayFromSecondJob (:hasUsualPayFromSecondJob)

SubObjectPropertyOf(:hasUsualPayFromSecondJob :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasUsualPayFromSecondJob :Person)
ObjectPropertyRange(:hasUsualPayFromSecondJob :UsualPayFromSecondJob)

# Object Property: :hasVocationalQualification (:hasVocationalQualification)

SubObjectPropertyOf(:hasVocationalQualification :hasUKQualification)
ObjectPropertyDomain(:hasVocationalQualification :Person)
ObjectPropertyRange(:hasVocationalQualification :VocationalOrProfessionalOrTechnicalQualification)

# Object Property: :hasWorkProperty (:hasWorkProperty)

SubObjectPropertyOf(:hasWorkProperty :hasPersonProperty)
ObjectPropertyDomain(:hasWorkProperty :Person)
ObjectPropertyRange(:hasWorkProperty ObjectUnionOf(:EconomicActivity :Location :PersonalIncome :Transport))

# Object Property: :hasYearlyIncomeFromInvestmentsAndSavings (:hasYearlyIncomeFromInvestmentsAndSavings)

SubObjectPropertyOf(:hasYearlyIncomeFromInvestmentsAndSavings :hasPersonalIncomeOf)
ObjectPropertyDomain(:hasYearlyIncomeFromInvestmentsAndSavings :Person)
ObjectPropertyRange(:hasYearlyIncomeFromInvestmentsAndSavings :YearlyIncomeFromInvestmentsAndSavings)

# Object Property: :hasYoungestResident (:hasYoungestResident)

SubObjectPropertyOf(:hasYoungestResident :hasResident)
InverseObjectProperties(:hasYoungestResident :isYoungestResident)
ObjectPropertyDomain(:hasYoungestResident :Household)
ObjectPropertyRange(:hasYoungestResident :Person)

# Object Property: :hasYouthTrainingCertificate (:hasYouthTrainingCertificate)

AnnotationAssertion(rdfs:comment :hasYouthTrainingCertificate "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasYouthTrainingCertificate "d_qfvoc1"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasYouthTrainingCertificate "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc1"^^xsd:anyURI)
SubObjectPropertyOf(:hasYouthTrainingCertificate :hasVocationalQualification)
ObjectPropertyDomain(:hasYouthTrainingCertificate :Person)
ObjectPropertyRange(:hasYouthTrainingCertificate :YouthTraningCertificate)

# Object Property: :householdIncomeGrossMonthBeforeInterviewIsMeasuredBy (:householdIncomeGrossMonthBeforeInterviewIsMeasuredBy)

SubObjectPropertyOf(:householdIncomeGrossMonthBeforeInterviewIsMeasuredBy :householdIncomeIsMeasuredBy)
ObjectPropertyDomain(:householdIncomeGrossMonthBeforeInterviewIsMeasuredBy :HouseholdIncomeGrossMonthBeforeInterview)
ObjectPropertyRange(:householdIncomeGrossMonthBeforeInterviewIsMeasuredBy :Currency)

# Object Property: :householdIncomeIsMeasuredBy (:householdIncomeIsMeasuredBy)

SubObjectPropertyOf(:householdIncomeIsMeasuredBy :incomeIsMeasuredBy)
ObjectPropertyDomain(:householdIncomeIsMeasuredBy :HouseholdIncome)
ObjectPropertyRange(:householdIncomeIsMeasuredBy :Currency)

# Object Property: :householdIncomeNetNoDeductionsIsMeasuredBy (:householdIncomeNetNoDeductionsIsMeasuredBy)

SubObjectPropertyOf(:householdIncomeNetNoDeductionsIsMeasuredBy :householdIncomeIsMeasuredBy)
ObjectPropertyDomain(:householdIncomeNetNoDeductionsIsMeasuredBy :HouseholdIncomeNetNoDeductions)
ObjectPropertyRange(:householdIncomeNetNoDeductionsIsMeasuredBy :Currency)

# Object Property: :incomeIsMeasuredBy (:incomeIsMeasuredBy)

SubObjectPropertyOf(:incomeIsMeasuredBy :isMeasuredBy)
ObjectPropertyDomain(:incomeIsMeasuredBy :Income)
ObjectPropertyRange(:incomeIsMeasuredBy :Currency)

# Object Property: :investmentIncomeIsMeasuredBy (:investmentIncomeIsMeasuredBy)

SubObjectPropertyOf(:investmentIncomeIsMeasuredBy :monthlyIncomeComponentAmountIsMeasuredBy)
ObjectPropertyDomain(:investmentIncomeIsMeasuredBy :InvestmentIncome)
ObjectPropertyRange(:investmentIncomeIsMeasuredBy :Currency)

# Object Property: :isCitizen (:isCitizen)

SubObjectPropertyOf(:isCitizen :hasPersonProperty)
ObjectPropertyDomain(:isCitizen :Person)
ObjectPropertyRange(:isCitizen :Citizen)

# Object Property: :isEmployedOrSelfEmployed (:isEmployedOrSelfEmployed)

SubObjectPropertyOf(:isEmployedOrSelfEmployed :hasWorkProperty)
ObjectPropertyDomain(:isEmployedOrSelfEmployed :Person)
ObjectPropertyRange(:isEmployedOrSelfEmployed :FormOfEmployment)
ObjectPropertyRange(:isEmployedOrSelfEmployed ObjectUnionOf(:NotSelfEmployed :SelfEmployed))

# Object Property: :isEmployedOrSelfEmployedForPrimaryJob (:isEmployedOrSelfEmployedForPrimaryJob)

AnnotationAssertion(rdfs:comment :isEmployedOrSelfEmployedForPrimaryJob "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isEmployedOrSelfEmployedForPrimaryJob "d_jbsemp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isEmployedOrSelfEmployedForPrimaryJob "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbsemp"^^xsd:anyURI)
SubObjectPropertyOf(:isEmployedOrSelfEmployedForPrimaryJob :isEmployedOrSelfEmployed)
ObjectPropertyDomain(:isEmployedOrSelfEmployedForPrimaryJob :Person)
ObjectPropertyRange(:isEmployedOrSelfEmployedForPrimaryJob ObjectUnionOf(:NegativeResponse :NotSelfEmployed :SelfEmployed))

# Object Property: :isEmployedOrSelfEmployedForSecondJob (:isEmployedOrSelfEmployedForSecondJob)

AnnotationAssertion(rdfs:comment :isEmployedOrSelfEmployedForSecondJob "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isEmployedOrSelfEmployedForSecondJob "d_j2semp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isEmployedOrSelfEmployedForSecondJob "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_j2semp"^^xsd:anyURI)
SubObjectPropertyOf(:isEmployedOrSelfEmployedForSecondJob :isEmployedOrSelfEmployed)
ObjectPropertyDomain(:isEmployedOrSelfEmployedForSecondJob :Person)
ObjectPropertyDomain(:isEmployedOrSelfEmployedForSecondJob DataHasValue(:has2ndJob "true"^^xsd:boolean))
ObjectPropertyRange(:isEmployedOrSelfEmployedForSecondJob :SecondJob)
ObjectPropertyRange(:isEmployedOrSelfEmployedForSecondJob ObjectUnionOf(:FormOfEmployment :SelfEmployed))

# Object Property: :isFemale (:isFemale)

SubObjectPropertyOf(:isFemale :hasSexOf)
ObjectPropertyDomain(:isFemale :Person)
ObjectPropertyRange(:isFemale :Female)
DisjointObjectProperties(:isFemale :isMale)

# Object Property: :isGroupMember (:isGroupMember)

SubObjectPropertyOf(:isGroupMember :hasPersonProperty)
ObjectPropertyDomain(:isGroupMember :Person)
ObjectPropertyRange(:isGroupMember :GroupOfPeople)

# Object Property: :isInGovernmentOfficeRegion (:isInGovernmentOfficeRegion)

AnnotationAssertion(rdfs:comment :isInGovernmentOfficeRegion "d_gor_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :isInGovernmentOfficeRegion "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isInGovernmentOfficeRegion "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isInGovernmentOfficeRegion "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhsamp/variable/d_gor_dv"^^xsd:anyURI)
SubObjectPropertyOf(:isInGovernmentOfficeRegion :hasHouseholdProperty)
ObjectPropertyDomain(:isInGovernmentOfficeRegion :Household)
ObjectPropertyRange(:isInGovernmentOfficeRegion ObjectUnionOf(:GovernmentOfficeRegion :Missing))

# Object Property: :isMale (:isMale)

SubObjectPropertyOf(:isMale :hasSexOf)
ObjectPropertyDomain(:isMale :Person)
ObjectPropertyRange(:isMale :Male)

# Object Property: :isMeasuredBy (:isMeasuredBy)

ObjectPropertyDomain(:isMeasuredBy ObjectUnionOf(:Consumption :Income :TravelTimeToWorkAndNotSelfEmployed))
ObjectPropertyRange(:isMeasuredBy :Units)

# Object Property: :isMostRecentSecondJobPay (:isMostRecentSecondJobPay)

AnnotationAssertion(rdfs:comment :isMostRecentSecondJobPay "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isMostRecentSecondJobPay "d_j2pay"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isMostRecentSecondJobPay "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_j2pay"^^xsd:anyURI)
AnnotationAssertion(rdfs:seeAlso :isMostRecentSecondJobPay :hasGrossEarningsForLastMonthFromSecondJob)
SubObjectPropertyOf(:isMostRecentSecondJobPay :hasPersonalIncomeOf)
ObjectPropertyDomain(:isMostRecentSecondJobPay :Person)
ObjectPropertyDomain(:isMostRecentSecondJobPay DataHasValue(:has2ndJob "true"^^xsd:boolean))
ObjectPropertyRange(:isMostRecentSecondJobPay :LatestSecondJobIncome)

# Object Property: :isNonUKCitizen (:isNonUKCitizen)

AnnotationAssertion(rdfs:comment :isNonUKCitizen "c_citzn3"^^xsd:string)
AnnotationAssertion(rdfs:comment :isNonUKCitizen "d_inresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isNonUKCitizen "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_citzn3"^^xsd:anyURI)
SubObjectPropertyOf(:isNonUKCitizen :isCitizen)
ObjectPropertyDomain(:isNonUKCitizen :Person)
ObjectPropertyRange(:isNonUKCitizen :NonUKCitizen)

# Object Property: :isNotSelfEmployedForPrimaryJob (:isNotSelfEmployedForPrimaryJob)

SubObjectPropertyOf(:isNotSelfEmployedForPrimaryJob :isEmployedOrSelfEmployedForPrimaryJob)
ObjectPropertyDomain(:isNotSelfEmployedForPrimaryJob :Person)
ObjectPropertyRange(:isNotSelfEmployedForPrimaryJob :PrimaryJob)

# Object Property: :isNotSelfEmployedForSecondJob (:isNotSelfEmployedForSecondJob)

SubObjectPropertyOf(:isNotSelfEmployedForSecondJob :isEmployedOrSelfEmployedForSecondJob)
ObjectPropertyDomain(:isNotSelfEmployedForSecondJob :Person)
ObjectPropertyRange(:isNotSelfEmployedForSecondJob :SecondJob)

# Object Property: :isParentOf (:isParentOf)

SubObjectPropertyOf(:isParentOf :hasPersonProperty)
ObjectPropertyDomain(:isParentOf :Person)
ObjectPropertyRange(:isParentOf :Person)

# Object Property: :isParentOfResidentChild (:isParentOfResidentChild)

AnnotationAssertion(rdfs:comment :isParentOfResidentChild "Missing:

d_relationship_dv 
d_egoalt"^^xsd:string)
AnnotationAssertion(rdfs:comment :isParentOfResidentChild "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isParentOfResidentChild "d_nchild_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :isParentOfResidentChild "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isParentOfResidentChild "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indall/variable/d_nchild_dv"^^xsd:anyURI)
SubObjectPropertyOf(:isParentOfResidentChild :isParentOf)
ObjectPropertyDomain(:isParentOfResidentChild :Person)
ObjectPropertyDomain(:isParentOfResidentChild ObjectSomeValuesFrom(:isParentOf :Child))
ObjectPropertyDomain(:isParentOfResidentChild ObjectSomeValuesFrom(:livesWithChild :Child))
ObjectPropertyRange(:isParentOfResidentChild :Child)

# Object Property: :isParticipantHouseholdInWave (:isParticipantHouseholdInWave)

SubObjectPropertyOf(:isParticipantHouseholdInWave :hasHouseholdProperty)
ObjectPropertyDomain(:isParticipantHouseholdInWave :Household)
ObjectPropertyRange(:isParticipantHouseholdInWave :Wave)

# Object Property: :isParticipantPersonInWave (:isParticipantPersonInWave)

SubObjectPropertyOf(:isParticipantPersonInWave :hasPersonProperty)
ObjectPropertyDomain(:isParticipantPersonInWave :Person)
ObjectPropertyRange(:isParticipantPersonInWave :Wave)

# Object Property: :isResident (:isResident)

SubObjectPropertyOf(:isResident :hasPersonProperty)
ObjectPropertyDomain(:isResident :Person)
ObjectPropertyRange(:isResident :Household)

# Object Property: :isResidentLoneParent (:isResidentLoneParent)

SubObjectPropertyOf(:isResidentLoneParent :isParentOf)
ObjectPropertyDomain(:isResidentLoneParent :Person)
ObjectPropertyRange(:isResidentLoneParent :Person)

# Object Property: :isSelfEmployedAndHasWorkLocationForPrimaryJobOf (:isSelfEmployedAndHasWorkLocationForPrimaryJobOf)

AnnotationAssertion(rdfs:comment :isSelfEmployedAndHasWorkLocationForPrimaryJobOf "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isSelfEmployedAndHasWorkLocationForPrimaryJobOf "d_jspl"^^xsd:string)
SubObjectPropertyOf(:isSelfEmployedAndHasWorkLocationForPrimaryJobOf :hasWorkProperty)
ObjectPropertyDomain(:isSelfEmployedAndHasWorkLocationForPrimaryJobOf :Person)
ObjectPropertyRange(:isSelfEmployedAndHasWorkLocationForPrimaryJobOf :Location)

# Object Property: :isSelfEmployedForPrimaryJob (:isSelfEmployedForPrimaryJob)

SubObjectPropertyOf(:isSelfEmployedForPrimaryJob :isEmployedOrSelfEmployedForPrimaryJob)
ObjectPropertyDomain(:isSelfEmployedForPrimaryJob :Person)
ObjectPropertyRange(:isSelfEmployedForPrimaryJob :PrimaryJob)

# Object Property: :isSelfEmployedForSecondJob (:isSelfEmployedForSecondJob)

SubObjectPropertyOf(:isSelfEmployedForSecondJob :isEmployedOrSelfEmployedForSecondJob)
ObjectPropertyDomain(:isSelfEmployedForSecondJob :Person)
ObjectPropertyRange(:isSelfEmployedForSecondJob :SecondJob)

# Object Property: :isUKCitizen (:isUKCitizen)

AnnotationAssertion(rdfs:comment :isUKCitizen "c_citzn1"^^xsd:string)
AnnotationAssertion(rdfs:comment :isUKCitizen "d_inresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isUKCitizen "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_citzn1"^^xsd:anyURI)
SubObjectPropertyOf(:isUKCitizen :isCitizen)
ObjectPropertyDomain(:isUKCitizen :Person)
ObjectPropertyRange(:isUKCitizen :UKCitizen)

# Object Property: :isYoungestResident (:isYoungestResident)

SubObjectPropertyOf(:isYoungestResident :isResident)
ObjectPropertyDomain(:isYoungestResident :Person)
ObjectPropertyRange(:isYoungestResident :Household)

# Object Property: :journeysToNotSelfEmployedWorkUsing (:journeysToNotSelfEmployedWorkUsing)

AnnotationAssertion(rdfs:comment :journeysToNotSelfEmployedWorkUsing "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :journeysToNotSelfEmployedWorkUsing "d_worktrav"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :journeysToNotSelfEmployedWorkUsing "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_worktrav"^^xsd:anyURI)
SubObjectPropertyOf(:journeysToNotSelfEmployedWorkUsing :journeysToWorkUsing)
ObjectPropertyDomain(:journeysToNotSelfEmployedWorkUsing :Person)
ObjectPropertyDomain(:journeysToNotSelfEmployedWorkUsing ObjectSomeValuesFrom(:isEmployedOrSelfEmployed :NotSelfEmployed))
ObjectPropertyRange(:journeysToNotSelfEmployedWorkUsing ObjectUnionOf(:IndeterminateResponse :Transport))

# Object Property: :journeysToSelfEmployedWorkUsing (:journeysToSelfEmployedWorkUsing)

AnnotationAssertion(rdfs:comment :journeysToSelfEmployedWorkUsing "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :journeysToSelfEmployedWorkUsing "d_jsworktrav"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :journeysToSelfEmployedWorkUsing "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jsworktrav"^^xsd:anyURI)
SubObjectPropertyOf(:journeysToSelfEmployedWorkUsing :journeysToWorkUsing)
ObjectPropertyDomain(:journeysToSelfEmployedWorkUsing :Person)
ObjectPropertyDomain(:journeysToSelfEmployedWorkUsing ObjectSomeValuesFrom(:isEmployedOrSelfEmployed :SelfEmployed))
ObjectPropertyRange(:journeysToSelfEmployedWorkUsing ObjectUnionOf(:IndeterminateResponse :Transport))

# Object Property: :journeysToWorkUsing (:journeysToWorkUsing)

SubObjectPropertyOf(:journeysToWorkUsing :hasWorkProperty)
ObjectPropertyDomain(:journeysToWorkUsing :Person)
ObjectPropertyDomain(:journeysToWorkUsing ObjectSomeValuesFrom(:isEmployedOrSelfEmployed :FormOfEmployment))
ObjectPropertyRange(:journeysToWorkUsing ObjectUnionOf(:IndeterminateResponse :Transport))

# Object Property: :latestPersonalIncomeGrossIsMeasuredBy (:latestPersonalIncomeGrossIsMeasuredBy)

SubObjectPropertyOf(:latestPersonalIncomeGrossIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyRange(:latestPersonalIncomeGrossIsMeasuredBy :Currency)

# Object Property: :latestPersonalIncomeTakeHomeIsMeasuredBy (:latestPersonalIncomeTakeHomeIsMeasuredBy)

SubObjectPropertyOf(:latestPersonalIncomeTakeHomeIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyRange(:latestPersonalIncomeTakeHomeIsMeasuredBy :Currency)

# Object Property: :livesWith (:livesWith)

SubObjectPropertyOf(:livesWith :hasPersonProperty)
FunctionalObjectProperty(:livesWith)
SymmetricObjectProperty(:livesWith)
ObjectPropertyDomain(:livesWith :Person)
ObjectPropertyRange(:livesWith :Person)

# Object Property: :livesWithChild (:livesWithChild)

SubObjectPropertyOf(:livesWithChild :livesWith)
ObjectPropertyDomain(:livesWithChild :Adult)
ObjectPropertyRange(:livesWithChild :Child)

# Object Property: :miscellaneousIncomeIsMeasuredBy (:miscellaneousIncomeIsMeasuredBy)

SubObjectPropertyOf(:miscellaneousIncomeIsMeasuredBy :monthlyIncomeComponentAmountIsMeasuredBy)
ObjectPropertyDomain(:miscellaneousIncomeIsMeasuredBy :MiscellaneousIncome)
ObjectPropertyRange(:miscellaneousIncomeIsMeasuredBy :Currency)

# Object Property: :monthlyIncomeComponentAmountIsMeasuredBy (:monthlyIncomeComponentAmountIsMeasuredBy)

SubObjectPropertyOf(:monthlyIncomeComponentAmountIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyDomain(:monthlyIncomeComponentAmountIsMeasuredBy :MonthlyIncomeComponentAmount)
ObjectPropertyRange(:monthlyIncomeComponentAmountIsMeasuredBy :Currency)

# Object Property: :netEarningsPrimaryJobIsMeasuredBy (:netEarningsPrimaryJobIsMeasuredBy)

SubObjectPropertyOf(:netEarningsPrimaryJobIsMeasuredBy :monthlyIncomeComponentAmountIsMeasuredBy)
ObjectPropertyDomain(:netEarningsPrimaryJobIsMeasuredBy :NetEarningsPrimaryJob)
ObjectPropertyRange(:netEarningsPrimaryJobIsMeasuredBy :Currency)

# Object Property: :netEarningsSecondJobIsMeasuredBy (:netEarningsSecondJobIsMeasuredBy)

SubObjectPropertyOf(:netEarningsSecondJobIsMeasuredBy :monthlyIncomeComponentAmountIsMeasuredBy)
ObjectPropertyDomain(:netEarningsSecondJobIsMeasuredBy :NetEarningsSecondJob)
ObjectPropertyRange(:netEarningsSecondJobIsMeasuredBy :Currency)

# Object Property: :netLabourIncomeIsMeasuredBy (:netLabourIncomeIsMeasuredBy)

SubObjectPropertyOf(:netLabourIncomeIsMeasuredBy :monthlyIncomeComponentAmountIsMeasuredBy)
ObjectPropertyDomain(:netLabourIncomeIsMeasuredBy :NetLabourIncome)
ObjectPropertyRange(:netLabourIncomeIsMeasuredBy :Currency)

# Object Property: :pensionIncomeIsMeasuredBy (:pensionIncomeIsMeasuredBy)

SubObjectPropertyOf(:pensionIncomeIsMeasuredBy :monthlyIncomeComponentAmountIsMeasuredBy)
ObjectPropertyDomain(:pensionIncomeIsMeasuredBy :PensionIncome)
ObjectPropertyRange(:pensionIncomeIsMeasuredBy :Currency)

# Object Property: :personalBasicIncomeIsMeasuredBy (:personalBasicIncomeIsMeasuredBy)

SubObjectPropertyOf(:personalBasicIncomeIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyRange(:personalBasicIncomeIsMeasuredBy :Currency)

# Object Property: :personalIncomeAndSelfEmployedIsMeasuredBy (:personalIncomeAndSelfEmployedIsMeasuredBy)

SubObjectPropertyOf(:personalIncomeAndSelfEmployedIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyDomain(:personalIncomeAndSelfEmployedIsMeasuredBy :SelfEmployedIncome)
ObjectPropertyRange(:personalIncomeAndSelfEmployedIsMeasuredBy :Currency)

# Object Property: :personalIncomeIsMeasuredBy (:personalIncomeIsMeasuredBy)

SubObjectPropertyOf(:personalIncomeIsMeasuredBy :incomeIsMeasuredBy)
ObjectPropertyDomain(:personalIncomeIsMeasuredBy :PersonalIncome)
ObjectPropertyRange(:personalIncomeIsMeasuredBy :Currency)

# Object Property: :personalIncomeNetUsualPayIsMeasuredBy (:personalIncomeNetUsualPayIsMeasuredBy)

SubObjectPropertyOf(:personalIncomeNetUsualPayIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyRange(:personalIncomeNetUsualPayIsMeasuredBy :Currency)

# Object Property: :personalIncomeUsualPayIsMeasureBy (:personalIncomeUsualPayIsMeasureBy)

SubObjectPropertyOf(:personalIncomeUsualPayIsMeasureBy :personalIncomeIsMeasuredBy)
ObjectPropertyRange(:personalIncomeUsualPayIsMeasureBy :Currency)

# Object Property: :privateBenefitIncomeIsMeasuredBy (:privateBenefitIncomeIsMeasuredBy)

SubObjectPropertyOf(:privateBenefitIncomeIsMeasuredBy :monthlyIncomeComponentAmountIsMeasuredBy)
ObjectPropertyDomain(:privateBenefitIncomeIsMeasuredBy :PrivateBenefitIncome)
ObjectPropertyRange(:privateBenefitIncomeIsMeasuredBy :Currency)

# Object Property: :producesWaste (:producesWaste)

SubObjectPropertyOf(:producesWaste :hasHouseholdProperty)
ObjectPropertyDomain(:producesWaste :Household)
ObjectPropertyRange(:producesWaste :HouseholdWaste)

# Object Property: :secondJobLatestGrossIncomeIsMeasuredBy (:secondJobLatestGrossIncomeIsMeasuredBy)

SubObjectPropertyOf(:secondJobLatestGrossIncomeIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyDomain(:secondJobLatestGrossIncomeIsMeasuredBy :LatestSecondJobIncome)
ObjectPropertyRange(:secondJobLatestGrossIncomeIsMeasuredBy :Currency)

# Object Property: :shareOfIncomeFromBenefitsAndIncomeNECIsMeasuredBy (:shareOfIncomeFromBenefitsAndIncomeNECIsMeasuredBy)

SubObjectPropertyOf(:shareOfIncomeFromBenefitsAndIncomeNECIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyDomain(:shareOfIncomeFromBenefitsAndIncomeNECIsMeasuredBy :ShareOfIncomeFromBenefitsAndIncomeNEC)
ObjectPropertyRange(:shareOfIncomeFromBenefitsAndIncomeNECIsMeasuredBy :Currency)

# Object Property: :socialBenefitIncomeIsMeasuredBy (:socialBenefitIncomeIsMeasuredBy)

SubObjectPropertyOf(:socialBenefitIncomeIsMeasuredBy :monthlyIncomeComponentAmountIsMeasuredBy)
ObjectPropertyDomain(:socialBenefitIncomeIsMeasuredBy :SocialBenefitIncome)
ObjectPropertyRange(:socialBenefitIncomeIsMeasuredBy :Currency)

# Object Property: :supermarketBillIsMeasuredBy (:supermarketBillIsMeasuredBy)

SubObjectPropertyOf(:supermarketBillIsMeasuredBy :consumptionOfFoodAndIsDrinkMeasuredBy)
ObjectPropertyDomain(:supermarketBillIsMeasuredBy :FoodPurchasedFromSupermarket)
ObjectPropertyRange(:supermarketBillIsMeasuredBy :Currency)

# Object Property: :supportsParty (:supportsParty)

AnnotationAssertion(rdfs:comment :supportsParty "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :supportsParty "d_vote4_all"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :supportsParty "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_vote4_all"^^xsd:anyURI)
SubObjectPropertyOf(:supportsParty :hasPoliticalConnection)
ObjectPropertyDomain(:supportsParty :Person)
ObjectPropertyRange(:supportsParty ObjectUnionOf(:Missing :PoliticalParty :Proxy :Refused :Unknown))

# Object Property: :timeTakeToTravelToWorkAndNotSelfEmployed (:timeTakeToTravelToWorkAndNotSelfEmployed)

AnnotationAssertion(rdfs:comment :timeTakeToTravelToWorkAndNotSelfEmployed "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :timeTakeToTravelToWorkAndNotSelfEmployed "d_jbttwt"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :timeTakeToTravelToWorkAndNotSelfEmployed "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jsttwtb"^^xsd:anyURI)
SubObjectPropertyOf(:timeTakeToTravelToWorkAndNotSelfEmployed :timeTakenToTravelToWork)
ObjectPropertyDomain(:timeTakeToTravelToWorkAndNotSelfEmployed ObjectSomeValuesFrom(:isEmployedOrSelfEmployed :NotSelfEmployed))
ObjectPropertyRange(:timeTakeToTravelToWorkAndNotSelfEmployed :TravelTimeToWorkAndNotSelfEmployed)

# Object Property: :timeTakenToTravelToWork (:timeTakenToTravelToWork)

SubObjectPropertyOf(:timeTakenToTravelToWork :hasWorkProperty)
ObjectPropertyDomain(:timeTakenToTravelToWork :Person)
ObjectPropertyDomain(:timeTakenToTravelToWork ObjectSomeValuesFrom(:isEmployedOrSelfEmployed :FormOfEmployment))
ObjectPropertyRange(:timeTakenToTravelToWork :TravelTimeToWork)

# Object Property: :timeTakenToTravelToWorkAndSelfEmployed (:timeTakenToTravelToWorkAndSelfEmployed)

AnnotationAssertion(rdfs:comment :timeTakenToTravelToWorkAndSelfEmployed "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :timeTakenToTravelToWorkAndSelfEmployed "d_jsttwtb"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :timeTakenToTravelToWorkAndSelfEmployed "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jsttwtb"^^xsd:anyURI)
SubObjectPropertyOf(:timeTakenToTravelToWorkAndSelfEmployed :timeTakenToTravelToWork)
ObjectPropertyDomain(:timeTakenToTravelToWorkAndSelfEmployed ObjectSomeValuesFrom(:isEmployedOrSelfEmployed :SelfEmployed))
ObjectPropertyRange(:timeTakenToTravelToWorkAndSelfEmployed :TravelTimeToWorkAndSelfEmployed)

# Object Property: :totalEarningsWeeklyIsMeasuredBy (:totalEarningsWeeklyIsMeasuredBy)

SubObjectPropertyOf(:totalEarningsWeeklyIsMeasuredBy :earningIsMeasuredBy)
ObjectPropertyDomain(:totalEarningsWeeklyIsMeasuredBy :TotalEarningsWeekly)
ObjectPropertyRange(:totalEarningsWeeklyIsMeasuredBy :Currency)

# Object Property: :totalEarningsYearlyIsMeasuredBy (:totalEarningsYearlyIsMeasuredBy)

SubObjectPropertyOf(:totalEarningsYearlyIsMeasuredBy :earningIsMeasuredBy)
ObjectPropertyDomain(:totalEarningsYearlyIsMeasuredBy :TotalEarningsYearly)
ObjectPropertyRange(:totalEarningsYearlyIsMeasuredBy :Currency)

# Object Property: :totalMonthlyLabourIncomeIsMeasuredBy (:totalMonthlyLabourIncomeIsMeasuredBy)

SubObjectPropertyOf(:totalMonthlyLabourIncomeIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyDomain(:totalMonthlyLabourIncomeIsMeasuredBy :TotalMonthlyLabourIncome)
ObjectPropertyRange(:totalMonthlyLabourIncomeIsMeasuredBy :Currency)

# Object Property: :totalMonthlyPersonalIncomeIsMeasuredBy (:totalMonthlyPersonalIncomeIsMeasuredBy)

SubObjectPropertyOf(:totalMonthlyPersonalIncomeIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyDomain(:totalMonthlyPersonalIncomeIsMeasuredBy :TotalMonthlyPersonalIncome)
ObjectPropertyRange(:totalMonthlyPersonalIncomeIsMeasuredBy :Currency)

# Object Property: :totalNetPersonalIncomeIsMeasuredBy (:totalNetPersonalIncomeIsMeasuredBy)

SubObjectPropertyOf(:totalNetPersonalIncomeIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyDomain(:totalNetPersonalIncomeIsMeasuredBy :TotalNetPersonalIncome)
ObjectPropertyRange(:totalNetPersonalIncomeIsMeasuredBy :Currency)

# Object Property: :totalPersonalIncomeIsMeasuredBy (:totalPersonalIncomeIsMeasuredBy)

SubObjectPropertyOf(:totalPersonalIncomeIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyDomain(:totalPersonalIncomeIsMeasuredBy :TotalPersonalIncome)
ObjectPropertyRange(:totalPersonalIncomeIsMeasuredBy :Currency)

# Object Property: :totalPersonalIncomeWeeklyIsMeasuredBy (:totalPersonalIncomeWeeklyIsMeasuredBy)

SubObjectPropertyOf(:totalPersonalIncomeWeeklyIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyDomain(:totalPersonalIncomeWeeklyIsMeasuredBy :TotalPersonalIncomeWeekly)
ObjectPropertyRange(:totalPersonalIncomeWeeklyIsMeasuredBy :Currency)

# Object Property: :totalPersonalIncomeYearlyIsMeasuredBy (:totalPersonalIncomeYearlyIsMeasuredBy)

SubObjectPropertyOf(:totalPersonalIncomeYearlyIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyDomain(:totalPersonalIncomeYearlyIsMeasuredBy :TotalPersonalIncomeYearly)
ObjectPropertyRange(:totalPersonalIncomeYearlyIsMeasuredBy :Currency)

# Object Property: :userTimeSpanUnitsForShareOfIncomeFromBenefitsAndIncomeNEC (:userTimeSpanUnitsForShareOfIncomeFromBenefitsAndIncomeNEC)

SubObjectPropertyOf(:userTimeSpanUnitsForShareOfIncomeFromBenefitsAndIncomeNEC :usesTimeSpanUnitsForPersonalIncome)
ObjectPropertyDomain(:userTimeSpanUnitsForShareOfIncomeFromBenefitsAndIncomeNEC :ShareOfIncomeFromBenefitsAndIncomeNEC)
ObjectPropertyRange(:userTimeSpanUnitsForShareOfIncomeFromBenefitsAndIncomeNEC :UnitsOfTime)

# Object Property: :usesNoExternalPowerSupply (:usesNoExternalPowerSupply)

AnnotationAssertion(rdfs:comment :usesNoExternalPowerSupply "d_fuelhave96"^^xsd:string)
AnnotationAssertion(rdfs:comment :usesNoExternalPowerSupply "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :usesNoExternalPowerSupply "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_fuelhave96"^^xsd:anyURI)
SubObjectPropertyOf(:usesNoExternalPowerSupply :hasPowerSupply)
ObjectPropertyDomain(:usesNoExternalPowerSupply :HouseholdWithNoExternalPowerSupply)
ObjectPropertyRange(:usesNoExternalPowerSupply :PowerSupply)

# Object Property: :usesOil (:usesOil)

AnnotationAssertion(rdfs:comment :usesOil "d_fuelhave3"^^xsd:string)
AnnotationAssertion(rdfs:comment :usesOil "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :usesOil "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_fuelhave3"^^xsd:anyURI)
SubObjectPropertyOf(:usesOil :hasExternalPowerSupply)
ObjectPropertyDomain(:usesOil :Household)
ObjectPropertyRange(:usesOil :Oil)

# Object Property: :usesSolidOrOtherFuel (:usesSolidOrOtherFuel)

AnnotationAssertion(rdfs:comment :usesSolidOrOtherFuel "d_fuelhave_4"^^xsd:string)
AnnotationAssertion(rdfs:comment :usesSolidOrOtherFuel "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :usesSolidOrOtherFuel "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_fuelhave4"^^xsd:anyURI)
SubObjectPropertyOf(:usesSolidOrOtherFuel :hasExternalPowerSupply)
ObjectPropertyDomain(:usesSolidOrOtherFuel :Household)
ObjectPropertyRange(:usesSolidOrOtherFuel :SolidFuelOrOther)

# Object Property: :usesTimeSpanUnitForHouseholdIncomeGrossMonthBeforeInterview (:usesTimeSpanUnitForHouseholdIncomeGrossMonthBeforeInterview)

SubObjectPropertyOf(:usesTimeSpanUnitForHouseholdIncomeGrossMonthBeforeInterview :usesTimeSpanUnitsForHouseholdIncome)
ObjectPropertyDomain(:usesTimeSpanUnitForHouseholdIncomeGrossMonthBeforeInterview :HouseholdIncomeGrossMonthBeforeInterview)
ObjectPropertyRange(:usesTimeSpanUnitForHouseholdIncomeGrossMonthBeforeInterview :UnitsOfTime)

# Object Property: :usesTimeSpanUnitForIncome (:usesTimeSpanUnitForIncome)

SubObjectPropertyOf(:usesTimeSpanUnitForIncome :usesTimeSpanUnits)
FunctionalObjectProperty(:usesTimeSpanUnitForIncome)
AsymmetricObjectProperty(:usesTimeSpanUnitForIncome)
IrreflexiveObjectProperty(:usesTimeSpanUnitForIncome)
ObjectPropertyDomain(:usesTimeSpanUnitForIncome :Income)
ObjectPropertyRange(:usesTimeSpanUnitForIncome :UnitsOfTime)

# Object Property: :usesTimeSpanUnits (:usesTimeSpanUnits)

ObjectPropertyDomain(:usesTimeSpanUnits ObjectUnionOf(:Consumption :HouseholdWaste :Income))
ObjectPropertyRange(:usesTimeSpanUnits :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForAlcoholConsumption (:usesTimeSpanUnitsForAlcoholConsumption)

SubObjectPropertyOf(:usesTimeSpanUnitsForAlcoholConsumption :usesTimeSpanUnitsForConsumptionOfFoodAndDrink)
ObjectPropertyDomain(:usesTimeSpanUnitsForAlcoholConsumption :Alcohol)
ObjectPropertyRange(:usesTimeSpanUnitsForAlcoholConsumption :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForConsumption (:usesTimeSpanUnitsForConsumption)

SubObjectPropertyOf(:usesTimeSpanUnitsForConsumption :usesTimeSpanUnits)
ObjectPropertyDomain(:usesTimeSpanUnitsForConsumption :Consumption)
ObjectPropertyRange(:usesTimeSpanUnitsForConsumption :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForConsumptionOfCombinedElectricityAndGas (:usesTimeSpanUnitsForConsumptionOfCombinedElectricityAndGas)

SubObjectPropertyOf(:usesTimeSpanUnitsForConsumptionOfCombinedElectricityAndGas :usesTimeSpanUnitsForConsumptionOfPower)
ObjectPropertyDomain(:usesTimeSpanUnitsForConsumptionOfCombinedElectricityAndGas :CombinedElectricityAndGas)
ObjectPropertyRange(:usesTimeSpanUnitsForConsumptionOfCombinedElectricityAndGas :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForConsumptionOfElectricity (:usesTimeSpanUnitsForConsumptionOfElectricity)

SubObjectPropertyOf(:usesTimeSpanUnitsForConsumptionOfElectricity :usesTimeSpanUnitsForConsumptionOfPower)
ObjectPropertyDomain(:usesTimeSpanUnitsForConsumptionOfElectricity :Electricity)
ObjectPropertyRange(:usesTimeSpanUnitsForConsumptionOfElectricity :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForConsumptionOfFoodAndDrink (:usesTimeSpanUnitsForConsumptionOfFoodAndDrink)

SubObjectPropertyOf(:usesTimeSpanUnitsForConsumptionOfFoodAndDrink :usesTimeSpanUnitsForConsumption)
ObjectPropertyDomain(:usesTimeSpanUnitsForConsumptionOfFoodAndDrink :FoodAndDrink)
ObjectPropertyRange(:usesTimeSpanUnitsForConsumptionOfFoodAndDrink :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForConsumptionOfGas (:usesTimeSpanUnitsForConsumptionOfGas)

SubObjectPropertyOf(:usesTimeSpanUnitsForConsumptionOfGas :usesTimeSpanUnitsForConsumptionOfPower)
ObjectPropertyDomain(:usesTimeSpanUnitsForConsumptionOfGas :Gas)
ObjectPropertyRange(:usesTimeSpanUnitsForConsumptionOfGas :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForConsumptionOfOil (:usesTimeSpanUnitsForConsumptionOfOil)

SubObjectPropertyOf(:usesTimeSpanUnitsForConsumptionOfOil :usesTimeSpanUnitsForConsumptionOfPower)
ObjectPropertyDomain(:usesTimeSpanUnitsForConsumptionOfOil :Oil)
ObjectPropertyRange(:usesTimeSpanUnitsForConsumptionOfOil :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForConsumptionOfPower (:usesTimeSpanUnitsForConsumptionOfPower)

SubObjectPropertyOf(:usesTimeSpanUnitsForConsumptionOfPower :usesTimeSpanUnitsForConsumption)
ObjectPropertyDomain(:usesTimeSpanUnitsForConsumptionOfPower :ExternalPowerSupply)
ObjectPropertyRange(:usesTimeSpanUnitsForConsumptionOfPower :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForConsumptionOfSolidFuelOrOther (:usesTimeSpanUnitsForConsumptionOfSolidFuelOrOther)

SubObjectPropertyOf(:usesTimeSpanUnitsForConsumptionOfSolidFuelOrOther :usesTimeSpanUnitsForConsumptionOfPower)
ObjectPropertyDomain(:usesTimeSpanUnitsForConsumptionOfSolidFuelOrOther :SolidFuelOrOther)
ObjectPropertyRange(:usesTimeSpanUnitsForConsumptionOfSolidFuelOrOther :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForFoodAndSnacksOutsideTheHome (:usesTimeSpanUnitsForFoodAndSnacksOutsideTheHome)

AnnotationAssertion(rdfs:comment :usesTimeSpanUnitsForFoodAndSnacksOutsideTheHome "d_hcstax")
SubObjectPropertyOf(:usesTimeSpanUnitsForFoodAndSnacksOutsideTheHome :usesTimeSpanUnitsForConsumptionOfFoodAndDrink)
ObjectPropertyDomain(:usesTimeSpanUnitsForFoodAndSnacksOutsideTheHome :FoodPurchasedFromSupermarket)
ObjectPropertyRange(:usesTimeSpanUnitsForFoodAndSnacksOutsideTheHome :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForHouseholdIncome (:usesTimeSpanUnitsForHouseholdIncome)

SubObjectPropertyOf(:usesTimeSpanUnitsForHouseholdIncome :usesTimeSpanUnitForIncome)
ObjectPropertyDomain(:usesTimeSpanUnitsForHouseholdIncome :HouseholdIncome)
ObjectPropertyRange(:usesTimeSpanUnitsForHouseholdIncome :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForHouseholdIncomeNetNoDeductions (:usesTimeSpanUnitsForHouseholdIncomeNetNoDeductions)

SubObjectPropertyOf(:usesTimeSpanUnitsForHouseholdIncomeNetNoDeductions :usesTimeSpanUnitsForHouseholdIncome)
ObjectPropertyDomain(:usesTimeSpanUnitsForHouseholdIncomeNetNoDeductions :HouseholdIncomeNetNoDeductions)
ObjectPropertyRange(:usesTimeSpanUnitsForHouseholdIncomeNetNoDeductions :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForPersonalIncome (:usesTimeSpanUnitsForPersonalIncome)

SubObjectPropertyOf(:usesTimeSpanUnitsForPersonalIncome :usesTimeSpanUnitForIncome)
ObjectPropertyDomain(:usesTimeSpanUnitsForPersonalIncome :PersonalIncome)
ObjectPropertyRange(:usesTimeSpanUnitsForPersonalIncome :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForPersonalIncomeNetUsualPay (:usesTimeSpanUnitsForPersonalIncomeNetUsualPay)

SubObjectPropertyOf(:usesTimeSpanUnitsForPersonalIncomeNetUsualPay :usesTimeSpanUnitsForPersonalIncome)
ObjectPropertyRange(:usesTimeSpanUnitsForPersonalIncomeNetUsualPay :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForRecycling (:usesTimeSpanUnitsForRecycling)

SubObjectPropertyOf(:usesTimeSpanUnitsForRecycling :usesTimeSpanUnits)
FunctionalObjectProperty(:usesTimeSpanUnitsForRecycling)
AsymmetricObjectProperty(:usesTimeSpanUnitsForRecycling)
IrreflexiveObjectProperty(:usesTimeSpanUnitsForRecycling)
ObjectPropertyDomain(:usesTimeSpanUnitsForRecycling :HouseholdWaste)
ObjectPropertyRange(:usesTimeSpanUnitsForRecycling :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForRecyclingGardenWaste (:usesTimeSpanUnitsForRecyclingGardenWaste)

SubObjectPropertyOf(:usesTimeSpanUnitsForRecyclingGardenWaste :usesTimeSpanUnitsForRecycling)
ObjectPropertyDomain(:usesTimeSpanUnitsForRecyclingGardenWaste :GardenWaste)
ObjectPropertyRange(:usesTimeSpanUnitsForRecyclingGardenWaste :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForRecyclingGlassBottles (:usesTimeSpanUnitsForRecyclingGlassBottles)

SubObjectPropertyOf(:usesTimeSpanUnitsForRecyclingGlassBottles :usesTimeSpanUnitsForRecycling)
ObjectPropertyDomain(:usesTimeSpanUnitsForRecyclingGlassBottles :WasteGlassBottles)
ObjectPropertyRange(:usesTimeSpanUnitsForRecyclingGlassBottles :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForRecyclingPaper (:usesTimeSpanUnitsForRecyclingPaper)

SubObjectPropertyOf(:usesTimeSpanUnitsForRecyclingPaper :usesTimeSpanUnitsForRecycling)
ObjectPropertyDomain(:usesTimeSpanUnitsForRecyclingPaper :WastePaper)
ObjectPropertyRange(:usesTimeSpanUnitsForRecyclingPaper :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForRecyclingPlasticBags (:usesTimeSpanUnitsForRecyclingPlasticBags)

SubObjectPropertyOf(:usesTimeSpanUnitsForRecyclingPlasticBags :usesTimeSpanUnitsForRecycling)
ObjectPropertyDomain(:usesTimeSpanUnitsForRecyclingPlasticBags :WastePlasticBags)
ObjectPropertyRange(:usesTimeSpanUnitsForRecyclingPlasticBags :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForSecondJobLatestGrossIncome (:usesTimeSpanUnitsForSecondJobLatestGrossIncome)

SubObjectPropertyOf(:usesTimeSpanUnitsForSecondJobLatestGrossIncome :usesTimeSpanUnitsForPersonalIncome)
ObjectPropertyDomain(:usesTimeSpanUnitsForSecondJobLatestGrossIncome :LatestSecondJobIncome)
ObjectPropertyRange(:usesTimeSpanUnitsForSecondJobLatestGrossIncome :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForSupermarketFoodBill (:usesTimeSpanUnitsForSupermarketFoodBill)

SubObjectPropertyOf(:usesTimeSpanUnitsForSupermarketFoodBill :usesTimeSpanUnitsForConsumptionOfFoodAndDrink)
ObjectPropertyDomain(:usesTimeSpanUnitsForSupermarketFoodBill :MealsAndSnacksOutsideTheHome)
ObjectPropertyRange(:usesTimeSpanUnitsForSupermarketFoodBill :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForTotalIncome (:usesTimeSpanUnitsForTotalIncome)

SubObjectPropertyOf(:usesTimeSpanUnitsForTotalIncome :usesTimeSpanUnitsForPersonalIncome)
ObjectPropertyDomain(:usesTimeSpanUnitsForTotalIncome :TotalPersonalIncome)
ObjectPropertyRange(:usesTimeSpanUnitsForTotalIncome :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForTotalNetPersonalIncome (:usesTimeSpanUnitsForTotalNetPersonalIncome)

SubObjectPropertyOf(:usesTimeSpanUnitsForTotalNetPersonalIncome :usesTimeSpanUnitsForPersonalIncome)
ObjectPropertyDomain(:usesTimeSpanUnitsForTotalNetPersonalIncome :TotalNetPersonalIncome)
ObjectPropertyRange(:usesTimeSpanUnitsForTotalNetPersonalIncome :UnitsOfTime)

# Object Property: :usesTimeSpanUnitsForUsualPayFromSecondJob (:usesTimeSpanUnitsForUsualPayFromSecondJob)

SubObjectPropertyOf(:usesTimeSpanUnitsForUsualPayFromSecondJob :usesTimeSpanUnitsForPersonalIncome)
ObjectPropertyDomain(:usesTimeSpanUnitsForUsualPayFromSecondJob :UsualPayFromSecondJob)
ObjectPropertyRange(:usesTimeSpanUnitsForUsualPayFromSecondJob :UnitsOfTime)

# Object Property: :usualGrossPayPerMonthForPrimaryJobIsMeasuredBy (:usualGrossPayPerMonthForPrimaryJobIsMeasuredBy)

SubObjectPropertyOf(:usualGrossPayPerMonthForPrimaryJobIsMeasuredBy :usualPayPerMonthForPrimaryJobIsMeasuredBy)
ObjectPropertyDomain(:usualGrossPayPerMonthForPrimaryJobIsMeasuredBy :UsualGrossPayPerMonthForPrimaryJob)
ObjectPropertyRange(:usualGrossPayPerMonthForPrimaryJobIsMeasuredBy :Currency)

# Object Property: :usualGrossPayPerMonthIfSelfEmployedIsMeasuredBy (:usualGrossPayPerMonthIfSelfEmployedIsMeasuredBy)

SubObjectPropertyOf(:usualGrossPayPerMonthIfSelfEmployedIsMeasuredBy :usualPayPerMonthIfSelfEmployedIsMeasuredBy)
ObjectPropertyDomain(:usualGrossPayPerMonthIfSelfEmployedIsMeasuredBy :UsualGrossPayPerMonthIfSelfEmployed)
ObjectPropertyRange(:usualGrossPayPerMonthIfSelfEmployedIsMeasuredBy :Currency)

# Object Property: :usualNetPayPerMonthForPrimaryJobIsMeasuredBy (:usualNetPayPerMonthForPrimaryJobIsMeasuredBy)

SubObjectPropertyOf(:usualNetPayPerMonthForPrimaryJobIsMeasuredBy :usualPayPerMonthForPrimaryJobIsMeasuredBy)
ObjectPropertyDomain(:usualNetPayPerMonthForPrimaryJobIsMeasuredBy :UsualNetPayPerMonthForPrimaryJob)
ObjectPropertyRange(:usualNetPayPerMonthForPrimaryJobIsMeasuredBy :Currency)

# Object Property: :usualNetPayPerMonthIfSelfEmployedIsMeasuredBy (:usualNetPayPerMonthIfSelfEmployedIsMeasuredBy)

SubObjectPropertyOf(:usualNetPayPerMonthIfSelfEmployedIsMeasuredBy :usualPayPerMonthIfSelfEmployedIsMeasuredBy)
ObjectPropertyDomain(:usualNetPayPerMonthIfSelfEmployedIsMeasuredBy :UsualNetPayPerMonthIfSelfEmployed)
ObjectPropertyRange(:usualNetPayPerMonthIfSelfEmployedIsMeasuredBy :Currency)

# Object Property: :usualPayInSecondJobIsMeasuredBy (:usualPayInSecondJobIsMeasuredBy)

SubObjectPropertyOf(:usualPayInSecondJobIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyDomain(:usualPayInSecondJobIsMeasuredBy :UsualPayFromSecondJob)
ObjectPropertyRange(:usualPayInSecondJobIsMeasuredBy :Currency)

# Object Property: :usualPayPerMonthForPrimaryJobIsMeasuredBy (:usualPayPerMonthForPrimaryJobIsMeasuredBy)

SubObjectPropertyOf(:usualPayPerMonthForPrimaryJobIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyDomain(:usualPayPerMonthForPrimaryJobIsMeasuredBy :UsualPayPerMonthForPrimaryJob)
ObjectPropertyRange(:usualPayPerMonthForPrimaryJobIsMeasuredBy :Currency)

# Object Property: :usualPayPerMonthIfSelfEmployedIsMeasuredBy (:usualPayPerMonthIfSelfEmployedIsMeasuredBy)

SubObjectPropertyOf(:usualPayPerMonthIfSelfEmployedIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyDomain(:usualPayPerMonthIfSelfEmployedIsMeasuredBy :UsualPayPerMonthIfSelfEmployed)
ObjectPropertyRange(:usualPayPerMonthIfSelfEmployedIsMeasuredBy :Currency)

# Object Property: :wasOrIsModernOrTradeApprentice (:wasOrIsModernOrTradeApprentice)

AnnotationAssertion(rdfs:comment :wasOrIsModernOrTradeApprentice "d_inresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :wasOrIsModernOrTradeApprentice "d_qfvoc5"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :wasOrIsModernOrTradeApprentice "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_qfvoc5"^^xsd:anyURI)
SubObjectPropertyOf(:wasOrIsModernOrTradeApprentice :hasVocationalQualification)
ObjectPropertyDomain(:wasOrIsModernOrTradeApprentice :Person)
ObjectPropertyRange(:wasOrIsModernOrTradeApprentice :ModernOrTradeApprentice)

# Object Property: :whichPoliticalPartyClosestTo (:whichPoliticalPartyClosestTo)

AnnotationAssertion(rdfs:comment :whichPoliticalPartyClosestTo "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :whichPoliticalPartyClosestTo "d_vote4"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :whichPoliticalPartyClosestTo "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_vote4"^^xsd:anyURI)
SubObjectPropertyOf(:whichPoliticalPartyClosestTo :hasPoliticalConnection)
ObjectPropertyDomain(:whichPoliticalPartyClosestTo :Person)
ObjectPropertyDomain(:whichPoliticalPartyClosestTo DataHasValue(:isCloserToOnePoliticalParty "true"^^xsd:boolean))
ObjectPropertyDomain(:whichPoliticalPartyClosestTo DataHasValue(:supportsAPoliticalParty "true"^^xsd:boolean))
ObjectPropertyRange(:whichPoliticalPartyClosestTo ObjectUnionOf(:PoliticalParty :Proxy :Refused :Unknown))

# Object Property: :wouldVoteForParty (:wouldVoteForParty)

AnnotationAssertion(rdfs:comment :wouldVoteForParty "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :wouldVoteForParty "d_vote3_all"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :wouldVoteForParty "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_vote3_all"^^xsd:anyURI)
SubObjectPropertyOf(:wouldVoteForParty :hasPoliticalConnection)
ObjectPropertyDomain(:wouldVoteForParty :Person)
ObjectPropertyRange(:wouldVoteForParty :PoliticalParty)

# Object Property: :wouldVoteForPoliticalPartyTomorrow (:wouldVoteForPoliticalPartyTomorrow)

AnnotationAssertion(rdfs:comment :wouldVoteForPoliticalPartyTomorrow "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :wouldVoteForPoliticalPartyTomorrow "d_vote3"^^xsd:string)
AnnotationAssertion(rdfs:comment :wouldVoteForPoliticalPartyTomorrow "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_vote3"^^xsd:anyURI)
SubObjectPropertyOf(:wouldVoteForPoliticalPartyTomorrow :hasPoliticalConnection)
ObjectPropertyDomain(:wouldVoteForPoliticalPartyTomorrow :Person)
ObjectPropertyDomain(:wouldVoteForPoliticalPartyTomorrow DataHasValue(:isCloserToOnePoliticalParty "false"^^xsd:boolean))
ObjectPropertyDomain(:wouldVoteForPoliticalPartyTomorrow DataHasValue(:supportsAPoliticalParty "false"^^xsd:boolean))
ObjectPropertyRange(:wouldVoteForPoliticalPartyTomorrow ObjectUnionOf(:Missing :PoliticalParty :Proxy :Refused :Unknown))

# Object Property: :yearlyIncomeFromInvestmentsAndSavingsIsMeasuredBy (:yearlyIncomeFromInvestmentsAndSavingsIsMeasuredBy)

SubObjectPropertyOf(:yearlyIncomeFromInvestmentsAndSavingsIsMeasuredBy :personalIncomeIsMeasuredBy)
ObjectPropertyDomain(:yearlyIncomeFromInvestmentsAndSavingsIsMeasuredBy :YearlyIncomeFromInvestmentsAndSavings)
ObjectPropertyRange(:yearlyIncomeFromInvestmentsAndSavingsIsMeasuredBy :Currency)


############################
#   Data Properties
############################

# Data Property: :attendanceAtReligiousService (:attendanceAtReligiousService)

AnnotationAssertion(rdfs:comment :attendanceAtReligiousService "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :attendanceAtReligiousService "d_oprlg2"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :attendanceAtReligiousService "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_oprlg2"^^xsd:anyURI)
SubDataPropertyOf(:attendanceAtReligiousService :hasReligiousAtrribute)
DataPropertyDomain(:attendanceAtReligiousService :Person)
DataPropertyRange(:attendanceAtReligiousService xsd:string)
DataPropertyRange(:attendanceAtReligiousService DataOneOf("at least once a month " "at least once a year " "never " "once a week or more " "only weddings etc "))

# Data Property: :believesChangesToHelpEnvironmentMustFitWithLifestyle (:believesChangesToHelpEnvironmentMustFitWithLifestyle)

AnnotationAssertion(rdfs:comment :believesChangesToHelpEnvironmentMustFitWithLifestyle "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesChangesToHelpEnvironmentMustFitWithLifestyle "d_scenv_cfit"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesChangesToHelpEnvironmentMustFitWithLifestyle "d_scenv_cfit is probably wrong and should d_scenv_fitl"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :believesChangesToHelpEnvironmentMustFitWithLifestyle "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scenv_fitl"^^xsd:anyURI)
SubDataPropertyOf(:believesChangesToHelpEnvironmentMustFitWithLifestyle :hasEnvironmentalBeliefs)
DataPropertyDomain(:believesChangesToHelpEnvironmentMustFitWithLifestyle :Person)
DataPropertyRange(:believesChangesToHelpEnvironmentMustFitWithLifestyle DataUnionOf(:missing :proxy :refused :unknown DataOneOf("neither agree nor disagree" "strongly agree" "strongly disagree" "tend to agree" "tend to disagree")))

# Data Property: :believesHasEnvironmentallyImpactedLifestyle (:believesHasEnvironmentallyImpactedLifestyle)

AnnotationAssertion(rdfs:comment :believesHasEnvironmentallyImpactedLifestyle "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesHasEnvironmentallyImpactedLifestyle "d_scenv_crlf"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :believesHasEnvironmentallyImpactedLifestyle "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scenv_crlf"^^xsd:anyURI)
SubDataPropertyOf(:believesHasEnvironmentallyImpactedLifestyle :hasEnvironmentalBeliefs)
DataPropertyDomain(:believesHasEnvironmentallyImpactedLifestyle :Person)
DataPropertyRange(:believesHasEnvironmentallyImpactedLifestyle DataUnionOf(:missing :proxy :refused :unknown DataOneOf("1/2 things env friendly" "do nothing env friendly" "everything env friendly" "few things env friendly" "mostly environ friendly")))

# Data Property: :believesInPayingMoreForEnvironmnetallyFriendlyProducts (:believesInPayingMoreForEnvironmnetallyFriendlyProducts)

AnnotationAssertion(rdfs:comment :believesInPayingMoreForEnvironmnetallyFriendlyProducts "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesInPayingMoreForEnvironmnetallyFriendlyProducts "d_scenv_pmre"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesInPayingMoreForEnvironmnetallyFriendlyProducts "d_scenv_pmre is probably wrong and should d_scenv_pmep"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :believesInPayingMoreForEnvironmnetallyFriendlyProducts "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scenv_pmep"^^xsd:anyURI)
SubDataPropertyOf(:believesInPayingMoreForEnvironmnetallyFriendlyProducts :hasEnvironmentalBeliefs)
DataPropertyDomain(:believesInPayingMoreForEnvironmnetallyFriendlyProducts :Person)
DataPropertyRange(:believesInPayingMoreForEnvironmnetallyFriendlyProducts DataUnionOf(:missing :proxy :refused :unknown DataOneOf("neither agree nor disagree" "strongly agree" "strongly disagree" "tend to agree" "tend to disagree")))

# Data Property: :believesNotWorthMakingChangesUnlessOthersDoNot (:believesNotWorthMakingChangesUnlessOthersDoNot)

AnnotationAssertion(rdfs:comment :believesNotWorthMakingChangesUnlessOthersDoNot "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesNotWorthMakingChangesUnlessOthersDoNot "d_scenv_chwo"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesNotWorthMakingChangesUnlessOthersDoNot "d_scenv_chwo is probably wrong and should d_scenv_noot"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :believesNotWorthMakingChangesUnlessOthersDoNot "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scenv_noot"^^xsd:anyURI)
SubDataPropertyOf(:believesNotWorthMakingChangesUnlessOthersDoNot :hasEnvironmentalBeliefs)
DataPropertyDomain(:believesNotWorthMakingChangesUnlessOthersDoNot :Person)
DataPropertyRange(:believesNotWorthMakingChangesUnlessOthersDoNot DataUnionOf(:missing :proxy :refused :unknown DataOneOf("neither agree nor disagree" "strongly agree" "strongly disagree" "tend to agree" "tend to disagree")))

# Data Property: :believesNotWorthUKMakingChanges (:believesNotWorthUKMakingChanges)

AnnotationAssertion(rdfs:comment :believesNotWorthUKMakingChanges "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesNotWorthUKMakingChanges "d_scenv_brit"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesNotWorthUKMakingChanges "d_scenv_brit is probably wrong and should d_scenv_canc"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :believesNotWorthUKMakingChanges "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scenv_canc"^^xsd:anyURI)
SubDataPropertyOf(:believesNotWorthUKMakingChanges :hasEnvironmentalBeliefs)
DataPropertyDomain(:believesNotWorthUKMakingChanges :Person)
DataPropertyRange(:believesNotWorthUKMakingChanges DataUnionOf(:missing :proxy :refused :unknown DataOneOf("neither agree nor disagree" "strongly agree" "strongly disagree" "tend to agree" "tend to disagree")))

# Data Property: :believesThatBeingGreenIsAnAlternativeLifestyle (:believesThatBeingGreenIsAnAlternativeLifestyle)

AnnotationAssertion(rdfs:comment :believesThatBeingGreenIsAnAlternativeLifestyle "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesThatBeingGreenIsAnAlternativeLifestyle "d_scenv_grn"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :believesThatBeingGreenIsAnAlternativeLifestyle "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scenv_grn"^^xsd:anyURI)
SubDataPropertyOf(:believesThatBeingGreenIsAnAlternativeLifestyle :hasEnvironmentalBeliefs)
DataPropertyDomain(:believesThatBeingGreenIsAnAlternativeLifestyle :Person)
DataPropertyRange(:believesThatBeingGreenIsAnAlternativeLifestyle DataUnionOf(:missing :proxy :refused :unknown DataOneOf("neither agree nor disagree" "strongly agree" "strongly disagree" "tend to agree" "tend to disagree")))

# Data Property: :believesThatClimateChangeIsBeyondControl (:believesThatClimateChangeIsBeyondControl)

AnnotationAssertion(rdfs:comment :believesThatClimateChangeIsBeyondControl "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesThatClimateChangeIsBeyondControl "d_scenv_bcon"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesThatClimateChangeIsBeyondControl "d_scenv_bcon is probably wrong and should d_scenv_tlat"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :believesThatClimateChangeIsBeyondControl "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scenv_tlat"^^xsd:anyURI)
SubDataPropertyOf(:believesThatClimateChangeIsBeyondControl :hasEnvironmentalBeliefs)
DataPropertyDomain(:believesThatClimateChangeIsBeyondControl :Person)
DataPropertyRange(:believesThatClimateChangeIsBeyondControl DataUnionOf(:missing :proxy :refused :unknown DataOneOf("neither agree nor disagree" "strongly agree" "strongly disagree" "tend to agree" "tend to disagree")))

# Data Property: :believesThatClimateChangeToFarInFutureToWorryAbout (:believesThatClimateChangeToFarInFutureToWorryAbout)

AnnotationAssertion(rdfs:comment :believesThatClimateChangeToFarInFutureToWorryAbout "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesThatClimateChangeToFarInFutureToWorryAbout "d_scenv_futr"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesThatClimateChangeToFarInFutureToWorryAbout "d_scenv_futr is probably wrong and should d_scenv_nowo"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :believesThatClimateChangeToFarInFutureToWorryAbout "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scenv_nowo"^^xsd:anyURI)
SubDataPropertyOf(:believesThatClimateChangeToFarInFutureToWorryAbout :hasEnvironmentalBeliefs)
DataPropertyDomain(:believesThatClimateChangeToFarInFutureToWorryAbout :Person)
DataPropertyRange(:believesThatClimateChangeToFarInFutureToWorryAbout DataUnionOf(:missing :proxy :refused :unknown DataOneOf("neither agree nor disagree" "strongly agree" "strongly disagree" "tend to agree" "tend to disagree")))

# Data Property: :believesThatEnvironmentalCrisisHasBeenExaggerated (:believesThatEnvironmentalCrisisHasBeenExaggerated)

AnnotationAssertion(rdfs:comment :believesThatEnvironmentalCrisisHasBeenExaggerated "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesThatEnvironmentalCrisisHasBeenExaggerated "d_scenv_exag"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesThatEnvironmentalCrisisHasBeenExaggerated "d_scenv_exag is probably wrong and should d_scenv_crex"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :believesThatEnvironmentalCrisisHasBeenExaggerated "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scenv_crex"^^xsd:anyURI)
SubDataPropertyOf(:believesThatEnvironmentalCrisisHasBeenExaggerated :hasEnvironmentalBeliefs)
DataPropertyDomain(:believesThatEnvironmentalCrisisHasBeenExaggerated :Person)
DataPropertyRange(:believesThatEnvironmentalCrisisHasBeenExaggerated DataUnionOf(:missing :proxy :refused :unknown DataOneOf("neither agree nor disagree" "strongly agree" "strongly disagree" "tend to agree" "tend to disagree")))

# Data Property: :believesThatHumanBehaviourContributesToClimateChange (:believesThatHumanBehaviourContributesToClimateChange)

AnnotationAssertion(rdfs:comment :believesThatHumanBehaviourContributesToClimateChange "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesThatHumanBehaviourContributesToClimateChange "d_scenv_ccls"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesThatHumanBehaviourContributesToClimateChange "d_scenv_ccls is probably wrong and should d_scenv_bccc"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :believesThatHumanBehaviourContributesToClimateChange "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scenv_bccc"^^xsd:anyURI)
SubDataPropertyOf(:believesThatHumanBehaviourContributesToClimateChange :hasEnvironmentalBeliefs)
DataPropertyDomain(:believesThatHumanBehaviourContributesToClimateChange :Person)
DataPropertyRange(:believesThatHumanBehaviourContributesToClimateChange DataUnionOf(:missing :proxy :refused :unknown DataOneOf("neither agree nor disagree" "strongly agree" "strongly disagree" "tend to agree" "tend to disagree")))

# Data Property: :believesThatWillSoonBeAMajorEnvironmentalDisaster (:believesThatWillSoonBeAMajorEnvironmentalDisaster)

AnnotationAssertion(rdfs:comment :believesThatWillSoonBeAMajorEnvironmentalDisaster "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :believesThatWillSoonBeAMajorEnvironmentalDisaster "d_scenv_dstr"^^xsd:string)
SubDataPropertyOf(:believesThatWillSoonBeAMajorEnvironmentalDisaster :hasEnvironmentalBeliefs)
DataPropertyDomain(:believesThatWillSoonBeAMajorEnvironmentalDisaster :Person)
DataPropertyRange(:believesThatWillSoonBeAMajorEnvironmentalDisaster DataUnionOf(:missing :proxy :refused :unknown DataOneOf("neither agree nor disagree" "strongly agree" "strongly disagree" "tend to agree" "tend to disagree")))

# Data Property: :buysRecycledPaperProducts (:buysRecycledPaperProducts)

AnnotationAssertion(rdfs:comment :buysRecycledPaperProducts "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :buysRecycledPaperProducts "e_envhabit6"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :buysRecycledPaperProducts "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_envhabit6"^^xsd:anyURI)
SubDataPropertyOf(:buysRecycledPaperProducts :hasEnvironmentalHabit)
DataPropertyDomain(:buysRecycledPaperProducts :Person)
DataPropertyRange(:buysRecycledPaperProducts DataUnionOf(:missing :proxy :refused :unknown DataOneOf("always" "n/a, can't do this" "never" "not very often" "quite often" "very often")))

# Data Property: :declinesToBuyIfTooMuchPackaging (:declinesToBuyIfTooMuchPackaging)

AnnotationAssertion(rdfs:comment :declinesToBuyIfTooMuchPackaging "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :declinesToBuyIfTooMuchPackaging "e_envhabit5"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :declinesToBuyIfTooMuchPackaging "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_envhabit5"^^xsd:anyURI)
SubDataPropertyOf(:declinesToBuyIfTooMuchPackaging :hasEnvironmentalHabit)
DataPropertyDomain(:declinesToBuyIfTooMuchPackaging :Person)
DataPropertyRange(:declinesToBuyIfTooMuchPackaging DataUnionOf(:missing :proxy :refused :unknown DataOneOf("always" "n/a, can't do this" "never" "not very often" "quite often" "very often")))

# Data Property: :doesHoursOfHouseWorkPerWeek (:doesHoursOfHouseWorkPerWeek)

AnnotationAssertion(rdfs:comment :doesHoursOfHouseWorkPerWeek "d_howlng"^^xsd:string)
AnnotationAssertion(rdfs:comment :doesHoursOfHouseWorkPerWeek "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :doesHoursOfHouseWorkPerWeek "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_howlng"^^xsd:anyURI)
SubDataPropertyOf(:doesHoursOfHouseWorkPerWeek :hasPersonAttribute)
DataPropertyDomain(:doesHoursOfHouseWorkPerWeek :Person)
DataPropertyRange(:doesHoursOfHouseWorkPerWeek DataUnionOf(:missing :proxy :refused :unknown DatatypeRestriction(xsd:decimal xsd:minExclusive "0"^^xsd:decimal)))

# Data Property: :feltAbleToMakeUpMindForLastTwoWeeks (:feltAbleToMakeUpMindForLastTwoWeeks)

AnnotationAssertion(rdfs:comment :feltAbleToMakeUpMindForLastTwoWeeks "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :feltAbleToMakeUpMindForLastTwoWeeks "d_scwemwbg"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :feltAbleToMakeUpMindForLastTwoWeeks "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scwemwbg"^^xsd:anyURI)
SubDataPropertyOf(:feltAbleToMakeUpMindForLastTwoWeeks :feltPersonalFeelingsForLastTwoWeeks)
DataPropertyDomain(:feltAbleToMakeUpMindForLastTwoWeeks :Person)
DataPropertyRange(:feltAbleToMakeUpMindForLastTwoWeeks DataUnionOf(:missing :proxy :refused :unknown DataOneOf("all of the time" "none of the time" "often" "rarely" "some of the time")))

# Data Property: :feltCloseToOthersForLastTwoWeeks (:feltCloseToOthersForLastTwoWeeks)

AnnotationAssertion(rdfs:comment :feltCloseToOthersForLastTwoWeeks "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :feltCloseToOthersForLastTwoWeeks "d_scwemwbf"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :feltCloseToOthersForLastTwoWeeks "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scwemwbf"^^xsd:anyURI)
SubDataPropertyOf(:feltCloseToOthersForLastTwoWeeks :feltPersonalFeelingsForLastTwoWeeks)
DataPropertyDomain(:feltCloseToOthersForLastTwoWeeks :Person)
DataPropertyRange(:feltCloseToOthersForLastTwoWeeks DataUnionOf(:missing :proxy :refused :unknown DataOneOf("all of the time" "none of the time" "often" "rarely" "some of the time")))

# Data Property: :feltDealtWithProblemsWellForLastTwoWeeks (:feltDealtWithProblemsWellForLastTwoWeeks)

AnnotationAssertion(rdfs:comment :feltDealtWithProblemsWellForLastTwoWeeks "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :feltDealtWithProblemsWellForLastTwoWeeks "d_scwemwbd"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :feltDealtWithProblemsWellForLastTwoWeeks "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scwemwbd"^^xsd:anyURI)
SubDataPropertyOf(:feltDealtWithProblemsWellForLastTwoWeeks :feltPersonalFeelingsForLastTwoWeeks)
DataPropertyDomain(:feltDealtWithProblemsWellForLastTwoWeeks :Person)
DataPropertyRange(:feltDealtWithProblemsWellForLastTwoWeeks DataUnionOf(:missing :proxy :refused :unknown DataOneOf("all of the time" "none of the time" "often" "rarely" "some of the time")))

# Data Property: :feltOptimisticAboutTheFutureForLastTwoWeeks (:feltOptimisticAboutTheFutureForLastTwoWeeks)

AnnotationAssertion(rdfs:comment :feltOptimisticAboutTheFutureForLastTwoWeeks "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :feltOptimisticAboutTheFutureForLastTwoWeeks "d_scwemwba"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :feltOptimisticAboutTheFutureForLastTwoWeeks "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scwemwba"^^xsd:anyURI)
SubDataPropertyOf(:feltOptimisticAboutTheFutureForLastTwoWeeks :feltPersonalFeelingsForLastTwoWeeks)
DataPropertyDomain(:feltOptimisticAboutTheFutureForLastTwoWeeks :Person)
DataPropertyRange(:feltOptimisticAboutTheFutureForLastTwoWeeks DataUnionOf(:missing :proxy :refused :unknown DataOneOf("all of the time" "none of the time" "often" "rarely" "some of the time")))

# Data Property: :feltPersonalFeelingsForLastTwoWeeks (:feltPersonalFeelingsForLastTwoWeeks)

SubDataPropertyOf(:feltPersonalFeelingsForLastTwoWeeks :hasPersonAttribute)
DataPropertyDomain(:feltPersonalFeelingsForLastTwoWeeks :Person)
DataPropertyRange(:feltPersonalFeelingsForLastTwoWeeks DataUnionOf(:missing :proxy :refused :unknown xsd:string))

# Data Property: :feltRelaxedForLastTwoWeeks (:feltRelaxedForLastTwoWeeks)

AnnotationAssertion(rdfs:comment :feltRelaxedForLastTwoWeeks "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :feltRelaxedForLastTwoWeeks "d_scwemwbc"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :feltRelaxedForLastTwoWeeks "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scwemwbc"^^xsd:anyURI)
SubDataPropertyOf(:feltRelaxedForLastTwoWeeks :feltPersonalFeelingsForLastTwoWeeks)
DataPropertyDomain(:feltRelaxedForLastTwoWeeks :Person)
DataPropertyRange(:feltRelaxedForLastTwoWeeks DataUnionOf(:missing :proxy :refused :unknown DataOneOf("all of the time" "none of the time" "often" "rarely" "some of the time")))

# Data Property: :feltThatIsThinkingClearlyForLastTwoWeeks (:feltThatIsThinkingClearlyForLastTwoWeeks)

AnnotationAssertion(rdfs:comment :feltThatIsThinkingClearlyForLastTwoWeeks "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :feltThatIsThinkingClearlyForLastTwoWeeks "d_scwemwbe"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :feltThatIsThinkingClearlyForLastTwoWeeks "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scwemwbe"^^xsd:anyURI)
SubDataPropertyOf(:feltThatIsThinkingClearlyForLastTwoWeeks :feltPersonalFeelingsForLastTwoWeeks)
DataPropertyDomain(:feltThatIsThinkingClearlyForLastTwoWeeks :Person)
DataPropertyRange(:feltThatIsThinkingClearlyForLastTwoWeeks DataUnionOf(:missing :proxy :refused :unknown DataOneOf("all of the time" "none of the time" "often" "rarely" "some of the time")))

# Data Property: :feltUsefulForLastTwoWeeks (:feltUsefulForLastTwoWeeks)

AnnotationAssertion(rdfs:comment :feltUsefulForLastTwoWeeks "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :feltUsefulForLastTwoWeeks "d_scwemwbb"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :feltUsefulForLastTwoWeeks "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scwemwbb"^^xsd:anyURI)
SubDataPropertyOf(:feltUsefulForLastTwoWeeks :feltPersonalFeelingsForLastTwoWeeks)
DataPropertyDomain(:feltUsefulForLastTwoWeeks :Person)
DataPropertyRange(:feltUsefulForLastTwoWeeks DataUnionOf(:missing :proxy :refused :unknown DataOneOf("all of the time" "none of the time" "often" "rarely" "some of the time")))

# Data Property: :flagForNegativeSelfEmploymentIncome (:flagForNegativeSelfEmploymentIncome)

AnnotationAssertion(rdfs:comment :flagForNegativeSelfEmploymentIncome "d_fihhnegsei_if"^^xsd:string)
AnnotationAssertion(rdfs:comment :flagForNegativeSelfEmploymentIncome "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :flagForNegativeSelfEmploymentIncome "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :flagForNegativeSelfEmploymentIncome "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_fihhnegsei_if"^^xsd:anyURI)
SubDataPropertyOf(:flagForNegativeSelfEmploymentIncome :hasHouseholdAttribute)
DataPropertyDomain(:flagForNegativeSelfEmploymentIncome :Household)
DataPropertyRange(:flagForNegativeSelfEmploymentIncome xsd:boolean)

# Data Property: :fliesLessFrequently (:fliesLessFrequently)

AnnotationAssertion(rdfs:comment :fliesLessFrequently "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :fliesLessFrequently "e_envhabit11"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :fliesLessFrequently "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_envhabit11"^^xsd:anyURI)
SubDataPropertyOf(:fliesLessFrequently :hasEnvironmentalHabit)
DataPropertyDomain(:fliesLessFrequently :Person)
DataPropertyRange(:fliesLessFrequently DataUnionOf(:missing :proxy :refused :unknown DataOneOf("always" "n/a, can't do this" "never" "not very often" "quite often" "very often")))

# Data Property: :haTimeSpanValueForRecyclingOfGlassBottles (:haTimeSpanValueForRecyclingOfGlassBottles)

SubDataPropertyOf(:haTimeSpanValueForRecyclingOfGlassBottles :hasTimeSpanValueForRecyling)
DataPropertyDomain(:haTimeSpanValueForRecyclingOfGlassBottles :WasteGlassBottles)
DataPropertyRange(:haTimeSpanValueForRecyclingOfGlassBottles xsd:nonNegativeInteger)

# Data Property: :hadFeelingOfWorthlessnesRecently (:hadFeelingOfWorthlessnesRecently)

AnnotationAssertion(rdfs:comment :hadFeelingOfWorthlessnesRecently "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hadFeelingOfWorthlessnesRecently "d_scghqk"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hadFeelingOfWorthlessnesRecently "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scghqk"^^xsd:anyURI)
SubDataPropertyOf(:hadFeelingOfWorthlessnesRecently :hasRecentSelfAssessedAttitutudeOf)
DataPropertyDomain(:hadFeelingOfWorthlessnesRecently :Person)
DataPropertyRange(:hadFeelingOfWorthlessnesRecently DataUnionOf(:missing :proxy :refused :unknown DataOneOf("about the same as usual" "better than usual" "less so than usual" "more so than usual" "much less than usual" "not at all" "rather more than usual" "same as usual")))

# Data Property: :hadLossOfSleepOverWorryRecently (:hadLossOfSleepOverWorryRecently)

AnnotationAssertion(rdfs:comment :hadLossOfSleepOverWorryRecently "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hadLossOfSleepOverWorryRecently "d_scghqb"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hadLossOfSleepOverWorryRecently "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scghqb"^^xsd:anyURI)
SubDataPropertyOf(:hadLossOfSleepOverWorryRecently :hasRecentSelfAssessedAttitutudeOf)
DataPropertyDomain(:hadLossOfSleepOverWorryRecently :Person)
DataPropertyRange(:hadLossOfSleepOverWorryRecently DataUnionOf(:missing :proxy :refused :unknown DataOneOf("about the same as usual" "better than usual" "less so than usual" "more so than usual" "much less than usual" "not at all" "rather more than usual" "same as usual")))

# Data Property: :has2ndJob (:has2ndJob)

AnnotationAssertion(rdfs:comment :has2ndJob "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :has2ndJob "d_j2has"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :has2ndJob "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_j2has"^^xsd:anyURI)
SubDataPropertyOf(:has2ndJob :hasJobAttribute)
DataPropertyDomain(:has2ndJob :Person)
DataPropertyRange(:has2ndJob DataUnionOf(:missing :proxy :refused :unknown xsd:boolean))

# Data Property: :hasAdequateHeating (:hasAdequateHeating)

AnnotationAssertion(rdfs:comment :hasAdequateHeating "d_hheat"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAdequateHeating "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAdequateHeating "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_hheat"^^xsd:string)
SubDataPropertyOf(:hasAdequateHeating :hasHouseholdAttribute)
DataPropertyDomain(:hasAdequateHeating :Household)
DataPropertyRange(:hasAdequateHeating xsd:boolean)

# Data Property: :hasAgeValueInYears (:hasAgeValueInYears)

AnnotationAssertion(rdfs:comment :hasAgeValueInYears "d_age_cr"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAgeValueInYears "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasAgeValueInYears "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indall/variable/d_age_cr"^^xsd:anyURI)
SubDataPropertyOf(:hasAgeValueInYears :hasPersonAttribute)
FunctionalDataProperty(:hasAgeValueInYears)
DataPropertyDomain(:hasAgeValueInYears :Person)
DataPropertyRange(:hasAgeValueInYears xsd:nonNegativeInteger)

# Data Property: :hasAlwaysLivedAtSameAddress (:hasAlwaysLivedAtSameAddress)

AnnotationAssertion(rdfs:comment :hasAlwaysLivedAtSameAddress "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAlwaysLivedAtSameAddress "d_mvever"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasAlwaysLivedAtSameAddress "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_mvever"^^xsd:anyURI)
SubDataPropertyOf(:hasAlwaysLivedAtSameAddress :hasPersonAttribute)
FunctionalDataProperty(:hasAlwaysLivedAtSameAddress)
DataPropertyDomain(:hasAlwaysLivedAtSameAddress :Person)
DataPropertyRange(:hasAlwaysLivedAtSameAddress xsd:boolean)

# Data Property: :hasBeenAbleToConcentrateRecently (:hasBeenAbleToConcentrateRecently)

AnnotationAssertion(rdfs:comment :hasBeenAbleToConcentrateRecently "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasBeenAbleToConcentrateRecently "d_scghqa"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasBeenAbleToConcentrateRecently "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scghqa"^^xsd:anyURI)
SubDataPropertyOf(:hasBeenAbleToConcentrateRecently :hasRecentSelfAssessedAttitutudeOf)
DataPropertyDomain(:hasBeenAbleToConcentrateRecently :Person)
DataPropertyRange(:hasBeenAbleToConcentrateRecently DataUnionOf(:missing :proxy :refused :unknown DataOneOf("about the same as usual" "better than usual" "less so than usual" "more so than usual" "much less than usual" "not at all" "rather more than usual" "same as usual")))

# Data Property: :hasBeenCapableOfMakingDecisionsRecently (:hasBeenCapableOfMakingDecisionsRecently)

AnnotationAssertion(rdfs:comment :hasBeenCapableOfMakingDecisionsRecently "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasBeenCapableOfMakingDecisionsRecently "d_scghqd"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasBeenCapableOfMakingDecisionsRecently "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scghqd"^^xsd:anyURI)
SubDataPropertyOf(:hasBeenCapableOfMakingDecisionsRecently :hasRecentSelfAssessedAttitutudeOf)
DataPropertyDomain(:hasBeenCapableOfMakingDecisionsRecently :Person)
DataPropertyRange(:hasBeenCapableOfMakingDecisionsRecently DataUnionOf(:missing :proxy :refused :unknown DataOneOf("about the same as usual" "better than usual" "less so than usual" "more so than usual" "much less than usual" "not at all" "rather more than usual" "same as usual")))

# Data Property: :hasBeenConstantlyUnderStrainRecenly (:hasBeenConstantlyUnderStrainRecenly)

AnnotationAssertion(rdfs:comment :hasBeenConstantlyUnderStrainRecenly "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasBeenConstantlyUnderStrainRecenly "d_scghqe"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasBeenConstantlyUnderStrainRecenly "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scghqe"^^xsd:anyURI)
SubDataPropertyOf(:hasBeenConstantlyUnderStrainRecenly :hasRecentSelfAssessedAttitutudeOf)
DataPropertyDomain(:hasBeenConstantlyUnderStrainRecenly :Person)
DataPropertyRange(:hasBeenConstantlyUnderStrainRecenly DataUnionOf(:missing :proxy :refused :unknown DataOneOf("about the same as usual" "better than usual" "less so than usual" "more so than usual" "much less than usual" "not at all" "rather more than usual" "same as usual")))

# Data Property: :hasBeenFeelinglHappyRecentlyAllThingsConsidered (:hasBeenFeelinglHappyRecentlyAllThingsConsidered)

AnnotationAssertion(rdfs:comment :hasBeenFeelinglHappyRecentlyAllThingsConsidered "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasBeenFeelinglHappyRecentlyAllThingsConsidered "d_scghql"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasBeenFeelinglHappyRecentlyAllThingsConsidered "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scghql"^^xsd:anyURI)
SubDataPropertyOf(:hasBeenFeelinglHappyRecentlyAllThingsConsidered :hasRecentSelfAssessedAttitutudeOf)
DataPropertyDomain(:hasBeenFeelinglHappyRecentlyAllThingsConsidered :Person)
DataPropertyRange(:hasBeenFeelinglHappyRecentlyAllThingsConsidered DataUnionOf(:missing :proxy :refused :unknown DataOneOf("about the same as usual" "better than usual" "less so than usual" "more so than usual" "much less than usual" "not at all" "rather more than usual" "same as usual")))

# Data Property: :hasBeenLosingConfidenceRecently (:hasBeenLosingConfidenceRecently)

AnnotationAssertion(rdfs:comment :hasBeenLosingConfidenceRecently "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasBeenLosingConfidenceRecently "d_scghqj"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasBeenLosingConfidenceRecently "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scghqj"^^xsd:anyURI)
SubDataPropertyOf(:hasBeenLosingConfidenceRecently :hasRecentSelfAssessedAttitutudeOf)
DataPropertyDomain(:hasBeenLosingConfidenceRecently :Person)
DataPropertyRange(:hasBeenLosingConfidenceRecently DataUnionOf(:missing :proxy :refused :unknown DataOneOf("about the same as usual" "better than usual" "less so than usual" "more so than usual" "much less than usual" "not at all" "rather more than usual" "same as usual")))

# Data Property: :hasBeenUnhappyOrDepressedRecently (:hasBeenUnhappyOrDepressedRecently)

AnnotationAssertion(rdfs:comment :hasBeenUnhappyOrDepressedRecently "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasBeenUnhappyOrDepressedRecently "d_scghqi"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasBeenUnhappyOrDepressedRecently "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scghqi"^^xsd:anyURI)
SubDataPropertyOf(:hasBeenUnhappyOrDepressedRecently :hasRecentSelfAssessedAttitutudeOf)
DataPropertyDomain(:hasBeenUnhappyOrDepressedRecently :Person)
DataPropertyRange(:hasBeenUnhappyOrDepressedRecently DataUnionOf(:missing :proxy :refused :unknown DataOneOf("about the same as usual" "better than usual" "less so than usual" "more so than usual" "much less than usual" "not at all" "rather more than usual" "same as usual")))

# Data Property: :hasBeliefThatWillBeAffectedByClimateChangeInNext200Years (:hasBeliefThatWillBeAffectedByClimateChangeInNext200Years)

AnnotationAssertion(rdfs:comment :hasBeliefThatWillBeAffectedByClimateChangeInNext200Years "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasBeliefThatWillBeAffectedByClimateChangeInNext200Years "d_scopecl200"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasBeliefThatWillBeAffectedByClimateChangeInNext200Years "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scopecl200"^^xsd:anyURI)
SubDataPropertyOf(:hasBeliefThatWillBeAffectedByClimateChangeInNext200Years :hasClimateChangeBeliefs)
DataPropertyDomain(:hasBeliefThatWillBeAffectedByClimateChangeInNext200Years :Person)
DataPropertyRange(:hasBeliefThatWillBeAffectedByClimateChangeInNext200Years DataUnionOf(:missing :proxy :refused :unknown DataOneOf("no, don't believe this" "yes, believe this")))

# Data Property: :hasBeliefThatWillBeAffectedbyClimateChangeInNext30Years (:hasBeliefThatWillBeAffectedbyClimateChangeInNext30Years)

AnnotationAssertion(rdfs:comment :hasBeliefThatWillBeAffectedbyClimateChangeInNext30Years "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasBeliefThatWillBeAffectedbyClimateChangeInNext30Years "d_scopecl30"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasBeliefThatWillBeAffectedbyClimateChangeInNext30Years "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scopecl30"^^xsd:anyURI)
SubDataPropertyOf(:hasBeliefThatWillBeAffectedbyClimateChangeInNext30Years :hasClimateChangeBeliefs)
DataPropertyDomain(:hasBeliefThatWillBeAffectedbyClimateChangeInNext30Years :Person)
DataPropertyRange(:hasBeliefThatWillBeAffectedbyClimateChangeInNext30Years DataUnionOf(:missing :proxy :refused :unknown DataOneOf("no, don't believe this" "yes, believe this")))

# Data Property: :hasCentralHeating (:hasCentralHeating)

AnnotationAssertion(rdfs:comment :hasCentralHeating "d_heatch"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCentralHeating "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCentralHeating "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_heatch"^^xsd:anyURI)
SubDataPropertyOf(:hasCentralHeating :hasHouseholdAttribute)
FunctionalDataProperty(:hasCentralHeating)
DataPropertyDomain(:hasCentralHeating :Household)
DataPropertyRange(:hasCentralHeating xsd:boolean)

# Data Property: :hasCivilPartnerOrSpouseWithPersonNumberInHouseholdGrid (:hasCivilPartnerOrSpouseWithPersonNumberInHouseholdGrid)

AnnotationAssertion(rdfs:comment :hasCivilPartnerOrSpouseWithPersonNumberInHouseholdGrid "d_hgpart"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCivilPartnerOrSpouseWithPersonNumberInHouseholdGrid "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCivilPartnerOrSpouseWithPersonNumberInHouseholdGrid "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_hgpart"^^xsd:anyURI)
SubDataPropertyOf(:hasCivilPartnerOrSpouseWithPersonNumberInHouseholdGrid :hasPartnerWithPersonNumberInHouseholdGrid)
DataPropertyDomain(:hasCivilPartnerOrSpouseWithPersonNumberInHouseholdGrid :Person)
DataPropertyDomain(:hasCivilPartnerOrSpouseWithPersonNumberInHouseholdGrid ObjectSomeValuesFrom(:hasHusbandWifeOrCivilPartner DataSomeValuesFrom(:hasPersonNumberInHouseholdGrid xsd:nonNegativeInteger)))
DataPropertyRange(:hasCivilPartnerOrSpouseWithPersonNumberInHouseholdGrid xsd:nonNegativeInteger)

# Data Property: :hasClimateChangeBeliefs (:hasClimateChangeBeliefs)

SubDataPropertyOf(:hasClimateChangeBeliefs :hasPersonAttribute)
DataPropertyDomain(:hasClimateChangeBeliefs :Person)
DataPropertyRange(:hasClimateChangeBeliefs DataUnionOf(:missing :proxy :refused :unknown xsd:string))

# Data Property: :hasCombinedElectricityAndGasBill (:hasCombinedElectricityAndGasBill)

AnnotationAssertion(rdfs:comment :hasCombinedElectricityAndGasBill "d_fuelduel"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCombinedElectricityAndGasBill "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCombinedElectricityAndGasBill "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_fuelduel"^^xsd:anyURI)
SubDataPropertyOf(:hasCombinedElectricityAndGasBill :hasHouseholdAttribute)
DataPropertyDomain(:hasCombinedElectricityAndGasBill :Household)
DataPropertyRange(:hasCombinedElectricityAndGasBill xsd:boolean)

# Data Property: :hasConsideredGreenTariff (:hasConsideredGreenTariff)

AnnotationAssertion(rdfs:comment :hasConsideredGreenTariff "d_etariff"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasConsideredGreenTariff "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasConsideredGreenTariff "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_etariff"^^xsd:anyURI)
SubDataPropertyOf(:hasConsideredGreenTariff :hasHouseholdAttribute)
FunctionalDataProperty(:hasConsideredGreenTariff)
DataPropertyDomain(:hasConsideredGreenTariff :Household)
DataPropertyDomain(:hasConsideredGreenTariff ObjectSomeValuesFrom(:hasElectricitySupply :Electricity))
DataPropertyRange(:hasConsideredGreenTariff DataOneOf("considered in the past and rejected" "no" "yes - already buy" "yes - seriously considering"))

# Data Property: :hasConsideredRenewableEnergy (:hasConsideredRenewableEnergy)

SubDataPropertyOf(:hasConsideredRenewableEnergy :hasHouseholdAttribute)
DataPropertyDomain(:hasConsideredRenewableEnergy :Household)
DataPropertyRange(:hasConsideredRenewableEnergy xsd:string)

# Data Property: :hasConsideredSolarPanels (:hasConsideredSolarPanels)

AnnotationAssertion(rdfs:comment :hasConsideredSolarPanels "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasConsideredSolarPanels "d_solar1"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasConsideredSolarPanels "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_solar1"^^xsd:anyURI)
SubDataPropertyOf(:hasConsideredSolarPanels :hasConsideredRenewableEnergy)
DataPropertyDomain(:hasConsideredSolarPanels :Household)
DataPropertyDomain(:hasConsideredSolarPanels DataHasValue(:hasConsideredSolarPanels "yes - fitted"))
DataPropertyRange(:hasConsideredSolarPanels DataUnionOf(:missing :refused :unknown DataOneOf("considered in the past and rejected" "no 4 considered in the past and rejected" "yes - fitted" "yes - seriously considering")))

# Data Property: :hasConsideredSolarWaterHeating (:hasConsideredSolarWaterHeating)

AnnotationAssertion(rdfs:isDefinedBy :hasConsideredSolarWaterHeating "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasConsideredSolarWaterHeating "d_solar2"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasConsideredSolarWaterHeating "https://www.understandingsociety.ac.uk/documentation/innovation-panel/dataset-documentation/wave/4/datafile/d_hhresp_ip/variable/d_solar2"^^xsd:anyURI)
SubDataPropertyOf(:hasConsideredSolarWaterHeating :hasConsideredRenewableEnergy)
DataPropertyDomain(:hasConsideredSolarWaterHeating :Household)
DataPropertyRange(:hasConsideredSolarWaterHeating DataUnionOf(:missing :refused :unknown DataOneOf("considered in the past and rejected" "no 4 considered in the past and rejected" "yes - fitted" "yes - seriously considering")))

# Data Property: :hasConsideredWindTurbine (:hasConsideredWindTurbine)

AnnotationAssertion(rdfs:comment :hasConsideredWindTurbine "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasConsideredWindTurbine "d_solar3"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasConsideredWindTurbine "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_solar3"^^xsd:anyURI)
SubDataPropertyOf(:hasConsideredWindTurbine :hasConsideredRenewableEnergy)
DataPropertyDomain(:hasConsideredWindTurbine :Household)
DataPropertyDomain(:hasConsideredWindTurbine DataHasValue(:hasConsideredWindTurbine "yes - fitted"))
DataPropertyRange(:hasConsideredWindTurbine DataUnionOf(:missing :refused :unknown DataOneOf("considered in the past and rejected" "no 4 considered in the past and rejected" "yes - fitted" "yes - seriously considering")))

# Data Property: :hasCostForAlcoholValue (:hasCostForAlcoholValue)

AnnotationAssertion(rdfs:comment :hasCostForAlcoholValue "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCostForAlcoholValue "d_xpaltob_g3"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCostForAlcoholValue "Value for the last 4 weeks"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCostForAlcoholValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_xpaltob_g3"^^xsd:anyURI)
SubDataPropertyOf(:hasCostForAlcoholValue :hasCostForFoodAndDrinkValue)
DataPropertyDomain(:hasCostForAlcoholValue :Alcohol)
DataPropertyRange(:hasCostForAlcoholValue DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal))

# Data Property: :hasCostForFoodAndDrinkValue (:hasCostForFoodAndDrinkValue)

SubDataPropertyOf(:hasCostForFoodAndDrinkValue :hasValueForConsumption)
DataPropertyDomain(:hasCostForFoodAndDrinkValue :FoodAndDrink)
DataPropertyRange(:hasCostForFoodAndDrinkValue DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal))

# Data Property: :hasCostForFoodFromSupermarketValue (:hasCostForFoodFromSupermarketValue)

AnnotationAssertion(rdfs:comment :hasCostForFoodFromSupermarketValue "Value for the last 4 weeks"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCostForFoodFromSupermarketValue "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCostForFoodFromSupermarketValue "d_xpfood1_g3"^^xsd:string)
SubDataPropertyOf(:hasCostForFoodFromSupermarketValue :hasCostForFoodAndDrinkValue)
DataPropertyDomain(:hasCostForFoodFromSupermarketValue :FoodPurchasedFromSupermarket)
DataPropertyRange(:hasCostForFoodFromSupermarketValue DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal))

# Data Property: :hasCostOfMealsAndSnacksOutsideTheHomeValue (:hasCostOfMealsAndSnacksOutsideTheHomeValue)

AnnotationAssertion(rdfs:comment :hasCostOfMealsAndSnacksOutsideTheHomeValue "Value for the last 4 weeks"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCostOfMealsAndSnacksOutsideTheHomeValue "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCostOfMealsAndSnacksOutsideTheHomeValue "d_xpfdout_g3"^^xsd:string)
SubDataPropertyOf(:hasCostOfMealsAndSnacksOutsideTheHomeValue :hasCostForFoodAndDrinkValue)
DataPropertyDomain(:hasCostOfMealsAndSnacksOutsideTheHomeValue :MealsAndSnacksOutsideTheHome)
DataPropertyRange(:hasCostOfMealsAndSnacksOutsideTheHomeValue DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal))

# Data Property: :hasCouncilTaxBand (:hasCouncilTaxBand)

AnnotationAssertion(rdfs:comment :hasCouncilTaxBand "d_hcstax"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCouncilTaxBand "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCouncilTaxBand "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_hsctax"^^xsd:anyURI)
SubDataPropertyOf(:hasCouncilTaxBand :hasHouseholdAttribute)
DataPropertyDomain(:hasCouncilTaxBand :Household)
DataPropertyRange(:hasCouncilTaxBand DataOneOf("A" "B" "C" "D" "E" "F" "G" "H"))

# Data Property: :hasCrossSectionalAdultInterviewWeightValue (:hasCrossSectionalAdultInterviewWeightValue)

SubDataPropertyOf(:hasCrossSectionalAdultInterviewWeightValue :hasPersonAttribute)
DataPropertyDomain(:hasCrossSectionalAdultInterviewWeightValue :Person)
DataPropertyRange(:hasCrossSectionalAdultInterviewWeightValue DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal))

# Data Property: :hasCrossSectionalAdultMainInterviewWeightValue (:hasCrossSectionalAdultMainInterviewWeightValue)

AnnotationAssertion(rdfs:comment :hasCrossSectionalAdultMainInterviewWeightValue "d_indinus_xw"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCrossSectionalAdultMainInterviewWeightValue "d_indresp"^^xsd:string)
SubDataPropertyOf(:hasCrossSectionalAdultMainInterviewWeightValue :hasCrossSectionalAdultInterviewWeightValue)
DataPropertyDomain(:hasCrossSectionalAdultMainInterviewWeightValue :Person)
DataPropertyRange(:hasCrossSectionalAdultMainInterviewWeightValue DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal))

# Data Property: :hasCrossSectionalAdultMainOrProxyInterviewWeightValue (:hasCrossSectionalAdultMainOrProxyInterviewWeightValue)

AnnotationAssertion(rdfs:comment :hasCrossSectionalAdultMainOrProxyInterviewWeightValue "d_indpxus_xw"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCrossSectionalAdultMainOrProxyInterviewWeightValue "d_indresp"^^xsd:string)
SubDataPropertyOf(:hasCrossSectionalAdultMainOrProxyInterviewWeightValue :hasCrossSectionalAdultInterviewWeightValue)
DataPropertyDomain(:hasCrossSectionalAdultMainOrProxyInterviewWeightValue :Person)
DataPropertyRange(:hasCrossSectionalAdultMainOrProxyInterviewWeightValue DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal))

# Data Property: :hasCrossSectionalAdultSelfCompletionInterviewWeightValue (:hasCrossSectionalAdultSelfCompletionInterviewWeightValue)

AnnotationAssertion(rdfs:comment :hasCrossSectionalAdultSelfCompletionInterviewWeightValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCrossSectionalAdultSelfCompletionInterviewWeightValue "d_indscus_xw"^^xsd:string)
SubDataPropertyOf(:hasCrossSectionalAdultSelfCompletionInterviewWeightValue :hasCrossSectionalAdultInterviewWeightValue)
DataPropertyDomain(:hasCrossSectionalAdultSelfCompletionInterviewWeightValue :Person)
DataPropertyRange(:hasCrossSectionalAdultSelfCompletionInterviewWeightValue DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal))

# Data Property: :hasCrossSectionalHouseholdWeight (:hasCrossSectionalHouseholdWeight)

AnnotationAssertion(rdfs:comment :hasCrossSectionalHouseholdWeight "d_hhdenus_xw"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCrossSectionalHouseholdWeight "d_hhresp"^^xsd:string)
SubDataPropertyOf(:hasCrossSectionalHouseholdWeight :hasHouseholdAttribute)
DataPropertyDomain(:hasCrossSectionalHouseholdWeight :Household)
DataPropertyRange(:hasCrossSectionalHouseholdWeight DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal))

# Data Property: :hasCrossWavePersonIdentifier (:hasCrossWavePersonIdentifier)

AnnotationAssertion(rdfs:comment :hasCrossWavePersonIdentifier "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCrossWavePersonIdentifier "pidp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCrossWavePersonIdentifier "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/1/datafile/a_indall/variable/pidp"^^xsd:anyURI)
SubDataPropertyOf(:hasCrossWavePersonIdentifier :hasPersonAttribute)
FunctionalDataProperty(:hasCrossWavePersonIdentifier)
DataPropertyDomain(:hasCrossWavePersonIdentifier :Person)
DataPropertyRange(:hasCrossWavePersonIdentifier xsd:nonPositiveInteger)

# Data Property: :hasCurrentJob3ClassNSSECValue (:hasCurrentJob3ClassNSSECValue)

AnnotationAssertion(rdfs:comment :hasCurrentJob3ClassNSSECValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJob3ClassNSSECValue "d_jbnssec3_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJob3ClassNSSECValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCurrentJob3ClassNSSECValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbnssec3_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasCurrentJob3ClassNSSECValue :hasCurrentJobAttribute)
SubDataPropertyOf(:hasCurrentJob3ClassNSSECValue :hasDerivedPersonAttribute)
DataPropertyDomain(:hasCurrentJob3ClassNSSECValue :Person)
DataPropertyRange(:hasCurrentJob3ClassNSSECValue DataUnionOf(:missing DataOneOf("Intermediate " "Management & professional " "Routine & never worked/LT unemployed ")))

# Data Property: :hasCurrentJob5ClassNSSECValue (:hasCurrentJob5ClassNSSECValue)

AnnotationAssertion(rdfs:comment :hasCurrentJob5ClassNSSECValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJob5ClassNSSECValue "d_jbnssec5_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJob5ClassNSSECValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCurrentJob5ClassNSSECValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbnssec5_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasCurrentJob5ClassNSSECValue :hasCurrentJobAttribute)
SubDataPropertyOf(:hasCurrentJob5ClassNSSECValue :hasDerivedPersonAttribute)
DataPropertyDomain(:hasCurrentJob5ClassNSSECValue :Person)
DataPropertyRange(:hasCurrentJob5ClassNSSECValue DataUnionOf(:missing DataOneOf("Intermediate" "Lower supervisory & technical" "Management & professional" "Semi-routine, routine & never worked/LT unemployed" "Small employers & own account")))

# Data Property: :hasCurrentJob8ClassNSSECValue (:hasCurrentJob8ClassNSSECValue)

AnnotationAssertion(rdfs:comment :hasCurrentJob8ClassNSSECValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJob8ClassNSSECValue "d_jbnssec8_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJob8ClassNSSECValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCurrentJob8ClassNSSECValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbnssec8_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasCurrentJob8ClassNSSECValue :hasCurrentJobAttribute)
SubDataPropertyOf(:hasCurrentJob8ClassNSSECValue :hasDerivedPersonAttribute)
DataPropertyDomain(:hasCurrentJob8ClassNSSECValue :Person)
DataPropertyRange(:hasCurrentJob8ClassNSSECValue DataUnionOf(:missing DataOneOf("Higher professional " "Intermediate " "Large employers & higher management " "Lower management & professional " "Lower supervisory & technical " "Routine " "Semi-routine " "Small employers & own account ")))

# Data Property: :hasCurrentJobAttribute (:hasCurrentJobAttribute)

SubDataPropertyOf(:hasCurrentJobAttribute :hasJobAttribute)
DataPropertyDomain(:hasCurrentJobAttribute :Person)
DataPropertyRange(:hasCurrentJobAttribute xsd:string)

# Data Property: :hasCurrentJobEmploymentStatus2000Value (:hasCurrentJobEmploymentStatus2000Value)

AnnotationAssertion(rdfs:comment :hasCurrentJobEmploymentStatus2000Value "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJobEmploymentStatus2000Value "d_jbes2000"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCurrentJobEmploymentStatus2000Value "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbes2000"^^xsd:anyURI)
SubDataPropertyOf(:hasCurrentJobEmploymentStatus2000Value :hasCurrentJobAttribute)
DataPropertyDomain(:hasCurrentJobEmploymentStatus2000Value :Person)
DataPropertyRange(:hasCurrentJobEmploymentStatus2000Value DataUnionOf(:missing DataOneOf("Employee (not elsewhere classified)" "Foreman or supervisor" "Manager: large establishment (25+ employees)" "Manager: small establishment (1-24 employees)" "Self-employed: large establishment (25+ employees)" "Self-employed: no employees" "Self-employed: small establishment (1-24 employees)")))

# Data Property: :hasCurrentJobNSSECValue (:hasCurrentJobNSSECValue)

AnnotationAssertion(rdfs:comment :hasCurrentJobNSSECValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJobNSSECValue "d_jbnssec_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJobNSSECValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCurrentJobNSSECValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbnssec_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasCurrentJobNSSECValue :hasCurrentJobAttribute)
SubDataPropertyOf(:hasCurrentJobNSSECValue :hasDerivedPersonAttribute)
DataPropertyDomain(:hasCurrentJobNSSECValue :Person)
DataPropertyRange(:hasCurrentJobNSSECValue DataUnionOf(:missing DataOneOf("1 Employers in large establishments " "10 Lower supervisory occupations " "11.1 Lower technical craft occupations " "11.2 Lower techn. process operative occupations " "12.1 Semi-routine sales operations " "12.2 Semi-routine service operations " "12.3 Semi-routine technical operations " "12.4 Semi-routine operative operations " "12.5 Semi-routine agricultural operations " "12.6 Semi-routine clerical operations " "12.7 Semi-routine childcare operations " "13.1 Routine sales and service operations " "13.2 Routine production operations " "13.3 Routine technical operations " "13.4 Routine operative operations " "13.5 Routine agricultural operations " "2 Higher managerial and admin. Occupations " "3.1 Higher professional: 'traditional' employees " "3.2 Higher professional: 'new' employees " "3.3 Higher professional: 'traditional' self-employed " "3.4 Higher professional: 'new' self-employed " "4.1 Lower prof./higher techn.: 'traditional' employees " "4.2 Lower prof./higher techn.: 'new' employees " "4.3 Lower prof./higher techn.: 'traditional' self-employed " "4.4 Lower prof./higher techn.: 'new' self-employed " "5 Lower managerial and admin. occupations " "6 Higher supervisory occupations " "7.1 Intermediate clerical and admin. occupations " "7.2 Intermmediate sales and service occupations " "7.3 Intermediate techn. & auxiliary occupations " "7.4 Intermediate engineering occupations " "8.1 Employers, small establ. (excl. agriculture) " "8.2 Employers, small establ. in agriculture " "9.1 Own account workers (non-professional) " "9.2 Own account workers (agriculture) ")))

# Data Property: :hasCurrentJobRegistrarGeneralsSocialClassValue (:hasCurrentJobRegistrarGeneralsSocialClassValue)

AnnotationAssertion(rdfs:comment :hasCurrentJobRegistrarGeneralsSocialClassValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJobRegistrarGeneralsSocialClassValue "d_jbrgsc_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJobRegistrarGeneralsSocialClassValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCurrentJobRegistrarGeneralsSocialClassValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbrgsc_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasCurrentJobRegistrarGeneralsSocialClassValue :hasCurrentJobAttribute)
SubDataPropertyOf(:hasCurrentJobRegistrarGeneralsSocialClassValue :hasDerivedPersonAttribute)
DataPropertyDomain(:hasCurrentJobRegistrarGeneralsSocialClassValue :Person)
DataPropertyRange(:hasCurrentJobRegistrarGeneralsSocialClassValue DataUnionOf(:missing DataOneOf("managerial & technical occupation" "partly skilled occupation" "professional occupation" "skilled manual" "skilled non-manual" "unskilled occupation")))

# Data Property: :hasCurrentJobSIC2007CondensedValue (:hasCurrentJobSIC2007CondensedValue)

AnnotationAssertion(rdfs:comment :hasCurrentJobSIC2007CondensedValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJobSIC2007CondensedValue "d_jbsic07_cc"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCurrentJobSIC2007CondensedValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbsic07_cc"^^xsd:anyURI)
SubDataPropertyOf(:hasCurrentJobSIC2007CondensedValue :hasCurrentJobAttribute)
DataPropertyDomain(:hasCurrentJobSIC2007CondensedValue :Person)
DataPropertyRange(:hasCurrentJobSIC2007CondensedValue DataUnionOf(:missing :unknown DataOneOf("Accommodation" "Activities auxiliary to financial services and insurance activities" "Activities of extraterritorial organisations and bodies" "Activities of head offices; management consultancy activities" "Activities of households as employers of domestic personnel" "Activities of membership organisations" "Advertising and market research" "Air transport" "Architectural and engineering activities; technical testing and analysis" "Civil engineering" "Computer programming, consultancy and related activities" "Construction of buildings" "Creative, arts and entertainment activities" "Crop and animal production, hunting and related service activities" "Education" "Electricity, gas, steam and air conditioning supply" "Employment activities" "Extraction of crude petroleum and natural gas" "Financial service activities, except insurance and pension funding" "Fishing and aquaculture" "Food and beverage service activities" "Forestry and logging" "Gambling and betting activities" "Human health activities" "Information service activities" "Insurance, reinsurance and pension funding, except compulsory social security" "Land transport and transport via pipelines" "Legal and accounting activities" "Libraries, archives, museums and other cultural activities" "Manufacture of basic metals" "Manufacture of basic pharmaceutical products and pharmaceutical preparations" "Manufacture of beverages" "Manufacture of chemicals and chemical products" "Manufacture of coke and refined petroleum products" "Manufacture of computer, electronic and optical products" "Manufacture of electrical equipment" "Manufacture of fabricated metal products, except machinery and equipment" "Manufacture of food products" "Manufacture of furniture" "Manufacture of leather and related products" "Manufacture of machinery and equipment n.e.c." "Manufacture of motor vehicles, trailers and semi-trailers" "Manufacture of other non-metallic mineral products" "Manufacture of other transport equipment" "Manufacture of paper and paper products" "Manufacture of rubber and pLastic products" "Manufacture of textiles" "Manufacture of tobacco products" "Manufacture of wearing apparel" "Manufacture of wood and of products of wood and cork, except furniture; manufacture of articles of straw and plaiting ma" "Mining of coal and lignite" "Mining support service activities" "Motion picture, video and television programme production, sound recording and music publishing activities" "Office administrative, office support and other business support activities" "Other manufacturing" "Other mining and quarrying" "Other personal service activities" "Other professional, scientific and technical activities" "Postal and courier activities" "Printing and reproduction of recorded media" "Programming and broadcasting activities" "Public administration and defence; compulsory social security" "Publishing activities" "Real estate activities" "Remediation activities and other waste management services." "Rental and leasing activities" "Repair and installation of machinery and equipment" "Repair of computers and personal and household goods" "Residential care activities" "Retail trade, except of motor vehicles and motorcycles" "Scientific research and development" "Security and investigation activities" "Services to buildings and landscape activities" "Sewerage" "Social work activities without accommodation" "Specialised construction activities" "Sports activities and amusement and recreation activities" "Telecommunications" "Travel agency, tour operator and other reservation service and related activities" "Undifferentiated goods- and services-producing activities of private households for own use" "Veterinary activities" "Warehousing and support activities for transportation" "Waste collection, treatment and disposal activities; materials recovery" "Water collection, treatment and supply" "Water transport" "Wholesale and retail trade and repair of motor vehicles and motorcycles" "Wholesale trade, except of motor vehicles and motorcycles")))

# Data Property: :hasCurrentJobSIC2007Value (:hasCurrentJobSIC2007Value)

AnnotationAssertion(rdfs:comment :hasCurrentJobSIC2007Value "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJobSIC2007Value "d_jbsic07"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCurrentJobSIC2007Value "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbsic07"^^xsd:anyURI)
SubDataPropertyOf(:hasCurrentJobSIC2007Value :hasCurrentJobAttribute)
DataPropertyDomain(:hasCurrentJobSIC2007Value :Person)
DataPropertyRange(:hasCurrentJobSIC2007Value DataUnionOf(:missing :unknown DataOneOf("Accounting and auditing activities" "Activities auxiliary to financial intermediation n.e.c." "Activities of amusement parks and theme parks" "Activities of business and employers membership organizations" "Activities of call centres" "Activities of collection agencies" "Activities of conference organisers" "Activities of credit bureaus" "Activities of distribution holding companies" "Activities of exhibition and fair organisers" "Activities of extraterritorial organizations and bodies" "Activities of financial services holding companies" "Activities of head offices" "Activities of households as employers of domestic personnel" "Activities of insurance agents and brokers" "Activities of investment trusts" "Activities of mortgage finance companies" "Activities of other holding companies n.e.c." "Activities of other membership organizations n.e.c." "Activities of patent and copyright agents; other legal activities n.e.c." "Activities of political organizations" "Activities of professional membership organizations" "Activities of religious organizations" "Activities of sport clubs" "Activities of tourist guides" "Activities of trade unions" "Activities of venture and development capital companies" "Administration of financial markets" "Advertising agencies" "Agents involved in the sale of a variety of goods" "Agents involved in the sale of fuels, ores, metals and industrial chemicals" "Agents involved in the sale of furniture, household goods, hardware and ironmongery" "Agents involved in the sale of machinery, industrial equipment, ships and aircraft" "Agents involved in the sale of timber and building materials" "Agents selling agricultural raw materials, livestock, textile raw materials and semi-finished goods" "Agents specialized in the sale of other particular products" "Aluminium production" "Architectural activities" "Archives activities" "Artistic creation" "Banks" "Barristers at law" "Binding and related services" "Book publishing" "Bookkeeping activities" "Botanical and zoological gardens and nature reserves activities" "Building of pleasure and sporting boats" "Building of ships and floating structures" "Building societies" "Business and domestic software development" "Butter and cheese production" "Buying and selling of own real estate" "Cargo handling for air transport activities" "Cargo handling for water transport activities" "Casting of iron" "Casting of light metals" "Casting of other non-ferrous metals" "Casting of steel" "Central banking" "Child day-care activities" "Collection of non-hazardous waste" "Combined facilities support activities" "Combined office administrative service activities" "Compulsory social security activities" "Construction of bridges and tunnels" "Construction of commercial buildings" "Construction of domestic buildings" "Construction of other civil engineering projects n.e.c." "Construction of railways and underground railways" "Construction of roads and motorways" "Construction of utility projects for electricity and telecommunications" "Construction of utility projects for fluids" "Construction of water projects" "Copper production" "Credit granting by non-deposit taking finance houses and other specialist consumer credit grantors" "Cultural education" "Cutting, shaping and finishing of stone" "Data processing, hosting and related activities" "Deep coal mines" "Defence activities" "Demolition" "Dental practice activities" "Development of building projects" "Disinfecting and exterminating services" "Dispensing chemist in specialised stores" "Distilling, rectifying and blending of spirits" "Distribution of electricity" "Distribution of gaseous fuels through mains" "Driving school activities" "Educational support services" "Electrical installation" "Engineering design activities for industrial process and production" "Engineering related scientific and technical consulting activities" "Environmental consulting activities" "Event catering activities" "Extraction of crude petroleum" "Extraction of natural gas" "Extraction of salt" "Farm animal boarding and care" "Film processing" "Financial intermediation not elsewhere classified" "Financial leasing" "Financial management" "Finishing of textiles" "Fire service activities" "First-degree level higher education" "Fitness facilities" "Floor and wall covering" "Forging, pressing, stamping and roll-forming of metal; powder metallurgy" "Freight air transport" "Freight rail transport" "Freight transport by road" "Freshwater fishing" "Fund management activities" "Funeral and related activities" "Furnace and chimney cleaning services" "Gambling and betting activities" "General cleaning of buildings" "General medical practice activities" "General public administration activities" "General secondary education" "Glazing" "Grain milling" "Growing of cereals (except rice), leguminous crops and oil seeds" "Growing of fibre crops" "Growing of grapes" "Growing of other tree and bush fruits and nuts" "Growing of pome fruits and stone fruits" "Growing of vegetables and melons, roots and tubers" "Hairdressing and other beauty treatment" "Holiday centres and villages" "Hospital activities" "Hotels and similar accommodation" "Human resources provision and management of human resources functions" "Information technology consultancy activities" "Inland freight water transport" "Inland passenger water transport" "Installation of industrial machinery and equipment" "Investigation activities" "Joinery installation" "Justice and judicial activities" "Landscape service activities" "Lead, zinc and tin production" "Leasing of intellectual property and similar products, except copyright works" "Library activities" "Licenced clubs" "Licenced restaurants" "Life insurance" "Life reinsurance" "Liquid milk and cream production" "Logging" "Machining" "Maintenance and repair of motor vehicles" "Management consultancy activities other than financial management" "Management of real estate on a fee or contract basis" "Manufacture and processing of other glass, including technical glassware" "Manufacture of agricultural and forestry machinery other than tractors" "Manufacture of agricultural tractors" "Manufacture of air and spacecraft and related machinery" "Manufacture of assembled parquet floors" "Manufacture of basic iron and steel and of ferro-alloys" "Manufacture of basic pharmaceutical products" "Manufacture of batteries and accumulators" "Manufacture of bearings, gears, gearing and driving elements" "Manufacture of beer" "Manufacture of bicycles and invalid carriages" "Manufacture of bodies (coachwork) for motor vehicles (except caravans)" "Manufacture of bread; manufacture of fresh pastry goods and cakes" "Manufacture of breakfast cereals and cereals-based food" "Manufacture of bricks, tiles and construction products, in baked clay" "Manufacture of builders ware of pLastic" "Manufacture of caravans" "Manufacture of cement" "Manufacture of central heating radiators and boilers" "Manufacture of ceramic household and ornamental articles" "Manufacture of ceramic insulators and insulating fittings" "Manufacture of ceramic sanitary fixtures" "Manufacture of ceramic tiles and flags" "Manufacture of cider and other fruit wines" "Manufacture of cleaning and polishing preparations" "Manufacture of cocoa and chocolate confectionery" "Manufacture of communication equipment other than telegraph, and telephone apparatus and equipment" "Manufacture of compressors" "Manufacture of computers and peripheral equipment" "Manufacture of concrete products for construction purposes" "Manufacture of condiments and seasonings" "Manufacture of consumer electronics" "Manufacture of corrugated paper and paperboard, sacks and bags" "Manufacture of cutlery" "Manufacture of doors and windows of metal" "Manufacture of dyes and pigments" "Manufacture of earthmoving equipment" "Manufacture of electric domestic appliances" "Manufacture of electric lighting equipment" "Manufacture of electric motors, generators and transformers" "Manufacture of electricity distribution and control apparatus" "Manufacture of electronic components" "Manufacture of electronic industrial process control equipment" "Manufacture of electronic measuring, testing etc. equipment, not for industrial process control" "Manufacture of engines and turbines, except aircraft, vehicle and cycle engines" "Manufacture of equipment for concrete crushing and screening and roadworks" "Manufacture of essential oils" "Manufacture of explosives" "Manufacture of fasteners and screw machine products" "Manufacture of fertilizers and nitrogen compounds" "Manufacture of flat glass" "Manufacture of fluid power equipment" "Manufacture of footwear" "Manufacture of fruit and vegetable juice" "Manufacture of gas" "Manufacture of glass fibres" "Manufacture of glues" "Manufacture of hollow glass" "Manufacture of homogenized food preparations and dietetic food" "Manufacture of household and sanitary goods and of toilet requisites" "Manufacture of ice cream" "Manufacture of imitation jewellery and related articles" "Manufacture of industrial gases" "Manufacture of irradiation, electromedical and electrotherapeutic equipment" "Manufacture of jewellery and related articles" "Manufacture of kitchen furniture" "Manufacture of knitted and crocheted hosiery" "Manufacture of leather clothes" "Manufacture of lifting and handling equipment" "Manufacture of light metal packaging" "Manufacture of loaded electronic boards" "Manufacture of locks and hinges" "Manufacture of luggage, handbags and the like, saddlery and harness" "Manufacture of macaroni, noodles, couscous and similar farinaceous products" "Manufacture of machinery for food, beverage and tobacco processing" "Manufacture of machinery for metallurgy" "Manufacture of machinery for mining" "Manufacture of machinery for paper and paperboard production" "Manufacture of machinery for textile, apparel and leather production" "Manufacture of magnetic and optical media" "Manufacture of malt" "Manufacture of mattresses" "Manufacture of medical and dental instruments and supplies" "Manufacture of men's underwear" "Manufacture of metal forming machinery" "Manufacture of metal structures and parts of structures" "Manufacture of military fighting vehicles" "Manufacture of mortars" "Manufacture of motor vehicles" "Manufacture of motorcycles" "Manufacture of musical instruments" "Manufacture of non-domestic cooling and ventilation equipment" "Manufacture of non-electric domestic appliances" "Manufacture of non-electronic industrial process control equipment" "Manufacture of non-electronic measuring, testing etc. equipment, not for industrial process control" "Manufacture of non-wovens and articles made from non-wovens, except apparel" "Manufacture of office and shop furniture" "Manufacture of office machinery and equipment (except computers and peripheral equipment)" "Manufacture of oils and fats" "Manufacture of optical precision instruments" "Manufacture of other articles of concrete, pLaster and cement" "Manufacture of other articles of paper and paperboard n.e.c." "Manufacture of other builders' carpentry and joinery" "Manufacture of other ceramic products n.e.c." "Manufacture of other chemical products n.e.c." "Manufacture of other electrical equipment" "Manufacture of other electronic and electric wires and cables" "Manufacture of other fabricated metal products n.e.c." "Manufacture of other food products n.e.c." "Manufacture of other furniture" "Manufacture of other games and toys, n.e.c." "Manufacture of other general-purpose machinery n.e.c." "Manufacture of other inorganic basic chemicals" "Manufacture of other knitted and crocheted apparel" "Manufacture of other machine tools" "Manufacture of other men's outerwear" "Manufacture of other milk products" "Manufacture of other non-metallic mineral products n.e.c." "Manufacture of other organic basic chemicals" "Manufacture of other pLastic products" "Manufacture of other paper and paperboard containers" "Manufacture of other parts and accessories for motor vehicles" "Manufacture of other products of wood; manufacture of articles of cork, straw and plaiting materials" "Manufacture of other rubber products" "Manufacture of other special-purpose machinery n.e.c." "Manufacture of other tanks, reservoirs and containers of metal" "Manufacture of other technical and industrial textiles" "Manufacture of other technical ceramic products" "Manufacture of other textiles n.e.c." "Manufacture of other wearing apparel and accessories n.e.c." "Manufacture of other women's outerwear" "Manufacture of ovens, furnaces and furnace burners" "Manufacture of pLaster products for construction purposes" "Manufacture of pLastic packing goods" "Manufacture of pLastic plates, sheets, tubes and profiles" "Manufacture of pLastics and rubber machinery" "Manufacture of pLastics in primary forms" "Manufacture of paints, varnishes and similar coatings, mastics and sealants" "Manufacture of paper and paperboard" "Manufacture of paper stationery" "Manufacture of perfumes and toilet preparations" "Manufacture of pesticides and other agrochemical products" "Manufacture of pharmaceutical preparations" "Manufacture of photographic and cinematographic equipment" "Manufacture of power-driven hand tools" "Manufacture of prepared feeds for farm animals" "Manufacture of prepared meals and dishes" "Manufacture of prepared pet foods" "Manufacture of printed labels" "Manufacture of pulp" "Manufacture of pumps" "Manufacture of railway locomotives and rolling stock" "Manufacture of ready-mixed concrete" "Manufacture of refractory products" "Manufacture of rubber tyres and tubes; retreading and rebuilding of rubber tyres" "Manufacture of rusks and biscuits; manufacture of preserved pastry goods and cakes" "Manufacture of soap and detergents" "Manufacture of soft drinks; production of mineral waters and other bottled waters" "Manufacture of soft furnishings" "Manufacture of sports goods" "Manufacture of steam generators, except central heating hot water boilers" "Manufacture of steel drums and similar containers" "Manufacture of sugar" "Manufacture of sugar confectionery" "Manufacture of taps and valves" "Manufacture of telegraph and telephone apparatus and equipment" "Manufacture of tobacco products" "Manufacture of tools" "Manufacture of trailers and semi-trailers" "Manufacture of tubes, pipes, hollow profiles and related fittings, of steel" "Manufacture of veneer sheets and wood-based panels" "Manufacture of watches and clocks" "Manufacture of weapons and ammunition" "Manufacture of wine from grape" "Manufacture of wire products, chain and springs" "Manufacture of women's underwear" "Manufacture of wooden containers" "Manufacture of workwear" "Manufacture of woven or tufted carpets and rugs" "Marine fishing" "Market research and public opinion polling" "Media representation services" "Mineral oil refining" "Mining of chemical and fertilizer minerals" "Mixed farming" "Motion picture distribution activities" "Motion picture production activities" "Motion picture projection activities" "Motion picture, television and other theatrical casting activities" "Motion picture, video and television programme post-production activities" "Museums activities" "News agency activities" "Non-life insurance" "Non-life reinsurance" "Non-scheduled passenger air transport" "Non-specialised wholesale of food, beverages and tobacco" "Non-specialised wholesale trade" "Operation of arts facilities" "Operation of gravel and sand pits; mining of clays and kaolin" "Operation of historical sites and buildings and similar visitor attractions" "Operation of rail freight terminals" "Operation of rail passenger facilities at railway stations" "Operation of sports facilities" "Operation of warehousing and storage facilities for air transport activities" "Operation of warehousing and storage facilities for land transport activities" "Operation of warehousing and storage facilities for water transport activities" "Other accommodation" "Other activities auxiliary to insurance and pension funding" "Other activities of employment placement agencies" "Other amusement and recreation activities n.e.c." "Other building and industrial cleaning activities" "Other building completion and finishing" "Other business support service activities n.e.c." "Other cleaning services" "Other construction installation" "Other credit granting n.e.c." "Other education n.e.c." "Other engineering activities" "Other food services" "Other holiday and other collective accommodation" "Other human health activities" "Other information service activities n.e.c." "Other information technology service activities" "Other letting and operating of own or leased real estate" "Other manufacturing n.e.c." "Other non-ferrous metal production" "Other passenger land transport" "Other postal and courier activities" "Other processing and preserving of fruit and vegetables" "Other professional, scientific and technical activities n.e.c." "Other publishing activities" "Other research and experimental development on natural sciences and engineering" "Other reservation service activities n.e.c." "Other residential care activities n.e.c." "Other retail sale in non-specialised stores" "Other retail sale not in stores, stalls or markets" "Other retail sale of food in specialised stores" "Other retail sale of new goods in specialised stores (not commercial art galleries and opticians)" "Other service activities incidental to land transportation, n.e.c." "Other service activities n.e.c." "Other social work activities without accommodation n.e.c." "Other software publishing" "Other specialised construction activities n.e.c." "Other specialist photography" "Other sports activities" "Other telecommunications activities" "Other transportation support activities" "Other urban, suburban or metropolitan passenger land transport (not underground, metro or similar)" "PLastering" "Packaging activities" "Painting" "Passenger rail transport, interurban" "Pension funding" "Performing arts" "Photocopying, document preparation and other specialised office support activities" "Photographic activities not elsewhere classified" "Physical well-being activities" "Plant propagation" "Plumbing, heat and air-conditioning installation" "Portrait photographic activities" "Post-graduate level higher education" "Post-harvest crop activities" "Post-secondary non-tertiary education" "Postal activities under universal service obligation" "Pre-press and pre-media services" "Pre-primary education" "Precious metals production" "Preparation and spinning of textile fibres" "Primary education" "Printing n.e.c." "Printing of newspapers" "Private security activities" "Processing and preserving of fish, crustaceans and molluscs" "Processing and preserving of meat" "Processing and preserving of potatoes" "Processing and preserving of poultry meat" "Processing of nuclear fuel" "Production of electricity" "Production of meat and poultry meat products" "Public houses and bars" "Public order and safety activities" "Public relations and communications activities" "Publishing of computer games" "Publishing of consumer and business journals and periodicals" "Publishing of directories and mailing lists" "Publishing of learned journals" "Publishing of newspapers" "Quantity surveying activities" "Quarrying of ornamental and building stone, limestone, gypsum, chalk and slate" "Radio broadcasting" "Raising of dairy cattle" "Raising of horses and other equines" "Raising of other animals" "Raising of other cattle and buffaloes" "Raising of poultry" "Raising of sheep and goats" "Raising of swine/pigs" "Ready-made interactive leisure and entertainment software development" "Real estate agencies" "Recovery of sorted materials" "Recreational vehicle parks, trailer parks and camping grounds" "Regulation of and contribution to more efficient operation of businesses" "Regulation of health care, education, cultural and other social services, not incl. social security" "Remediation activities and other waste management services" "Removal services" "Renting and leasing of cars and light motor vehicles" "Renting and leasing of construction and civil engineering machinery and equipment" "Renting and leasing of media entertainment equipment" "Renting and leasing of office machinery and equipment (including computers)" "Renting and leasing of other machinery, equipment and tangible goods n.e.c." "Renting and leasing of other personal and household goods" "Renting and leasing of passenger water transport equipment" "Renting and leasing of recreational and sports goods" "Renting and leasing of trucks and other heavy vehicles" "Renting and operating of Housing Association real estate" "Renting of video tapes and disks" "Repair and maintenance of aircraft and spacecraft" "Repair and maintenance of other transport equipment n.e.c." "Repair and maintenance of ships and boats" "Repair of computers and peripheral equipment" "Repair of consumer electronics" "Repair of electrical equipment" "Repair of electronic and optical equipment" "Repair of fabricated metal products" "Repair of footwear and leather goods" "Repair of furniture and home furnishings" "Repair of household appliances and home and garden equipment" "Repair of machinery" "Repair of other equipment" "Repair of personal and household goods n.e.c." "Repair of watches, clocks and jewellery" "Reproduction of computer media" "Research and experimental development on biotechnology" "Research and experimental development on social sciences and humanities" "Residential care activities for mental retardation, mental health and substance abuse" "Residential care activities for the elderly and disabled" "Residential nursing care facilities" "Retail of furniture, lighting, and similar (not musical instruments or scores) in specialised store" "Retail sale by opticians" "Retail sale in commercial art galleries" "Retail sale in non-specialised stores with food, beverages or tobacco predominating" "Retail sale of antiques including antique books in stores" "Retail sale of audio and video equipment in specialised stores" "Retail sale of automotive fuel in specialised stores" "Retail sale of beverages in specialised stores" "Retail sale of books in specialised stores" "Retail sale of bread, cakes, flour confectionery and sugar confectionery in specialised stores" "Retail sale of carpets, rugs, wall and floor coverings in specialised stores" "Retail sale of clothing in specialised stores" "Retail sale of computers, peripheral units and software in specialised stores" "Retail sale of cosmetic and toilet articles in specialised stores" "Retail sale of electrical household appliances in specialised stores" "Retail sale of fish, crustaceans and molluscs in specialised stores" "Retail sale of flowers, plants, seeds, fertilizers, pet animals and pet food in specialised stores" "Retail sale of footwear in specialised stores" "Retail sale of fruit and vegetables in specialised stores" "Retail sale of games and toys in specialised stores" "Retail sale of hardware, paints and glass in specialised stores" "Retail sale of hearing aids" "Retail sale of leather goods in specialised stores" "Retail sale of meat and meat products in specialised stores" "Retail sale of medical and orthopaedic goods in specialised stores (not incl. hearing aids) n.e.c." "Retail sale of mobile telephones" "Retail sale of music and video recordings in specialised stores" "Retail sale of musical instruments and scores" "Retail sale of newspapers and stationery in specialised stores" "Retail sale of other second-hand goods in stores (not incl. antiques)" "Retail sale of sports goods, fishing gear, camping goods, boats and bicycles" "Retail sale of textiles in specialised stores" "Retail sale of watches and jewellery in specialised stores" "Retail sale via mail order houses or via Internet" "Retail sale via stalls and markets of food, beverages and tobacco products" "Retail sale via stalls and markets of other goods" "Retail sale via stalls and markets of textiles, clothing and footwear" "Retail trade of motor vehicle parts and accessories" "Risk and damage evaluation" "Roofing activities" "Sale of new cars and light motor vehicles" "Sale of other motor vehicles" "Sale of used cars and light motor vehicles" "Sale, maintenance and repair of motorcycles and related parts and accessories" "Satellite telecommunications activities" "Sawmilling and planing of wood" "Scaffold erection" "Scheduled passenger air transport" "Sea and coastal freight water transport" "Sea and coastal passenger water transport" "Security and commodity contracts dealing activities" "Security dealing on own account" "Security systems service activities" "Seed processing for propagation" "Service activities incidental to air transportation" "Service activities incidental to water transportation" "Sewerage" "Shaping and processing of flat glass" "Silviculture and other forestry activities" "Site preparation" "Social work activities without accommodation for the elderly and disabled" "Solicitors" "Sound recording and music publishing activities" "Space transport" "Specialised cleaning services" "Specialists medical practice activities" "Sports and recreation education" "Striking of coins" "Support activities for animal production (other than farm animal boarding and care) n.e.c." "Support activities for crop production" "Support activities for petroleum and natural gas mining" "Support activities to performing arts" "Support services to forestry" "Take-away food shops and mobile food stands" "Tax consultancy" "Taxi operation" "Tea processing" "Technical and vocational secondary education" "Technical testing and analysis" "Television programme production activities" "Television programming and broadcasting activities" "Temporary employment agency activities" "Tour operator activities" "Trade of electricity" "Trade of gas through mains" "Translation and interpretation activities" "Transmission of electricity" "Transport via pipeline" "Travel agency activities" "Treatment and coating of metals" "Treatment and disposal of non-hazardous waste" "Undifferentiated service-producing activities of private households for own use" "Unlicenced restaurants and cafes" "Urban and suburban passenger railway transportation by underground, metro and similar systems" "Urban planning and landscape architectural activities" "Veterinary activities" "Video distribution activities" "Video production activities" "Washing and (dry-)cleaning of textile and fur products" "Water collection, treatment and supply" "Weaving of textiles" "Wholesale of agricultural machinery, equipment and supplies" "Wholesale of audio tapes, records, CDs and video tapes and the equipment on which these are played" "Wholesale of chemical products" "Wholesale of china and glassware and cleaning materials" "Wholesale of clothing and footwear" "Wholesale of coffee, tea, cocoa and spices" "Wholesale of computers, computer peripheral equipment and software" "Wholesale of dairy products, eggs and edible oils and fats" "Wholesale of electronic and telecommunications equipment and parts" "Wholesale of flowers and plants" "Wholesale of fruit and vegetable juices, mineral water and soft drinks" "Wholesale of fruit and vegetables" "Wholesale of furniture, carpets and lighting equipment" "Wholesale of grain, unmanufactured tobacco, seeds and animal feeds" "Wholesale of hardware, plumbing and heating equipment and supplies" "Wholesale of household goods (other than musical instruments) n.e.c." "Wholesale of machine tools" "Wholesale of meat and meat products" "Wholesale of metals and metal ores" "Wholesale of mining, construction and civil engineering machinery" "Wholesale of musical instruments" "Wholesale of office furniture" "Wholesale of other food, including fish, crustaceans and molluscs" "Wholesale of other fuels and related products" "Wholesale of other intermediate products" "Wholesale of other machinery and equipment" "Wholesale of other office machinery and equipment" "Wholesale of perfume and cosmetics" "Wholesale of petroleum and petroleum products" "Wholesale of pharmaceutical goods" "Wholesale of sugar and chocolate and sugar confectionery" "Wholesale of textiles" "Wholesale of tobacco products" "Wholesale of waste and scrap" "Wholesale of watches and jewellery" "Wholesale of wine, beer, spirits and other alcoholic beverages" "Wholesale of wood, construction materials and sanitary equipment" "Wholesale trade of motor vehicle parts and accessories" "Window cleaning services" "Wired telecommunications activities" "Wireless telecommunications activities" "don't know" "manufacture of canvas goods, sacks, etc." "manufacture of household textiles" "specialised design activities")))

# Data Property: :hasCurrentJobSOC2000CondensedValue (:hasCurrentJobSOC2000CondensedValue)

AnnotationAssertion(rdfs:comment :hasCurrentJobSOC2000CondensedValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJobSOC2000CondensedValue "d_jbsoc00_cc"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCurrentJobSOC2000CondensedValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbsoc00_cc"^^xsd:anyURI)
SubDataPropertyOf(:hasCurrentJobSOC2000CondensedValue :hasCurrentJobAttribute)
DataPropertyDomain(:hasCurrentJobSOC2000CondensedValue :Person)
DataPropertyRange(:hasCurrentJobSOC2000CondensedValue DataUnionOf(:jobSoc00Condensed :missing :unknown))

# Data Property: :hasCurrentJobSocioEconomicGroupValue (:hasCurrentJobSocioEconomicGroupValue)

AnnotationAssertion(rdfs:comment :hasCurrentJobSocioEconomicGroupValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJobSocioEconomicGroupValue "d_jbseg_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCurrentJobSocioEconomicGroupValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasCurrentJobSocioEconomicGroupValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbseg_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasCurrentJobSocioEconomicGroupValue :hasCurrentJobAttribute)
DataPropertyDomain(:hasCurrentJobSocioEconomicGroupValue :Person)
DataPropertyRange(:hasCurrentJobSocioEconomicGroupValue DataUnionOf(:missing DataOneOf("agricultural workers" "employers,large" "employers,small" "farmers - employers,managers" "farmers - own account" "foreman manual" "int. non-man,foreman" "int. non-manual,workers" "junior non-manual" "managers,large" "managers,small" "own account wkrs" "personal service wrkrs" "professional employees" "professional self-employed" "semi-skilled manual wkrs" "skilled manual wkrs" "unskilled manual wkrs")))

# Data Property: :hasDVB-CAccess (:hasDVB-CAccess)

AnnotationAssertion(rdfs:comment :hasDVB-CAccess "Access to cable TV"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasDVB-CAccess "d_cduse4"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasDVB-CAccess "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasDVB-CAccess "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_cduse4"^^xsd:anyURI)
SubDataPropertyOf(:hasDVB-CAccess :hasMediaAccess)
DataPropertyDomain(:hasDVB-CAccess :Household)
DataPropertyRange(:hasDVB-CAccess xsd:boolean)

# Data Property: :hasDVB-SAccess (:hasDVB-SAccess)

AnnotationAssertion(rdfs:comment :hasDVB-SAccess "Access to satellite TV"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasDVB-SAccess "d_cduse3"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasDVB-SAccess "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasDVB-SAccess "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_cduse3"^^xsd:anyURI)
SubDataPropertyOf(:hasDVB-SAccess :hasMediaAccess)
DataPropertyDomain(:hasDVB-SAccess :Household)
DataPropertyRange(:hasDVB-SAccess xsd:boolean)

# Data Property: :hasDeFactoMaritalStatus (:hasDeFactoMaritalStatus)

AnnotationAssertion(rdfs:comment :hasDeFactoMaritalStatus "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasDeFactoMaritalStatus "d_mastat_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasDeFactoMaritalStatus "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasDeFactoMaritalStatus "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_mastat_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasDeFactoMaritalStatus :hasPersonAttribute)
DataPropertyDomain(:hasDeFactoMaritalStatus :Adult)
DataPropertyRange(:hasDeFactoMaritalStatus DataUnionOf(:missing :unknown DataOneOf("A former civil partner" "A surviving civil partner" "Divorced" "In a registered same-sex civil partnership" "Living as couple" "Married" "Separated but legally married" "Separated from civil partner" "Single and never married/in civil partnership" "Widowed")))

# Data Property: :hasDerivedPersonAttribute (:hasDerivedPersonAttribute)

SubDataPropertyOf(:hasDerivedPersonAttribute :hasPersonAttribute)
DataPropertyDomain(:hasDerivedPersonAttribute :Person)
DataPropertyRange(:hasDerivedPersonAttribute DataUnionOf(:missing :proxy xsd:nonNegativeInteger xsd:string))

# Data Property: :hasDerivedPersonalIncomeProperty (:hasDerivedPersonalIncomeProperty)

SubDataPropertyOf(:hasDerivedPersonalIncomeProperty :hasPersonalIncomeAttribute)
DataPropertyDomain(:hasDerivedPersonalIncomeProperty ObjectUnionOf(:MonthlyPersonalIncome :ShareOfIncomeFromBenefitsAndIncomeNEC :YearlyIncomeFromInvestmentsAndSavings))
DataPropertyRange(:hasDerivedPersonalIncomeProperty xsd:decimal)

# Data Property: :hasDrivenNumberOfMilesInLastYear (:hasDrivenNumberOfMilesInLastYear)

AnnotationAssertion(rdfs:comment :hasDrivenNumberOfMilesInLastYear "d_carmiles"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasDrivenNumberOfMilesInLastYear "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasDrivenNumberOfMilesInLastYear "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_carmiles"^^xsd:anyURI)
SubDataPropertyOf(:hasDrivenNumberOfMilesInLastYear :hasPersonAttribute)
DataPropertyDomain(:hasDrivenNumberOfMilesInLastYear :Person)
DataPropertyDomain(:hasDrivenNumberOfMilesInLastYear DataHasValue(:hasDrivingLicence "true"^^xsd:boolean))
DataPropertyRange(:hasDrivenNumberOfMilesInLastYear DataUnionOf(:proxy :refused :unknown xsd:nonNegativeInteger))

# Data Property: :hasDrivingLicence (:hasDrivingLicence)

AnnotationAssertion(rdfs:comment :hasDrivingLicence "d_drive"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasDrivingLicence "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasDrivingLicence "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_drive"^^xsd:anyURI)
SubDataPropertyOf(:hasDrivingLicence :hasPersonAttribute)
FunctionalDataProperty(:hasDrivingLicence)
DataPropertyDomain(:hasDrivingLicence :Person)
DataPropertyRange(:hasDrivingLicence xsd:boolean)

# Data Property: :hasEnjoyedDayToDayActivitiesRecently (:hasEnjoyedDayToDayActivitiesRecently)

AnnotationAssertion(rdfs:comment :hasEnjoyedDayToDayActivitiesRecently "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasEnjoyedDayToDayActivitiesRecently "d_scghqg"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasEnjoyedDayToDayActivitiesRecently "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scghqg"^^xsd:anyURI)
SubDataPropertyOf(:hasEnjoyedDayToDayActivitiesRecently :hasRecentSelfAssessedAttitutudeOf)
DataPropertyDomain(:hasEnjoyedDayToDayActivitiesRecently :Person)
DataPropertyRange(:hasEnjoyedDayToDayActivitiesRecently DataUnionOf(:missing :proxy :refused :unknown DataOneOf("about the same as usual" "better than usual" "less so than usual" "more so than usual" "much less than usual" "not at all" "rather more than usual" "same as usual")))

# Data Property: :hasEnvironmentalBeliefs (:hasEnvironmentalBeliefs)

SubDataPropertyOf(:hasEnvironmentalBeliefs :hasPersonAttribute)
DataPropertyDomain(:hasEnvironmentalBeliefs :Person)
DataPropertyRange(:hasEnvironmentalBeliefs DataUnionOf(:missing :proxy :refused :unknown xsd:string))

# Data Property: :hasEnvironmentalHabit (:hasEnvironmentalHabit)

SubDataPropertyOf(:hasEnvironmentalHabit :hasPersonAttribute)
DataPropertyDomain(:hasEnvironmentalHabit :Person)

# Data Property: :hasEstimatedAdditionalPayForExtraHoursValue (:hasEstimatedAdditionalPayForExtraHoursValue)

AnnotationAssertion(rdfs:comment :hasEstimatedAdditionalPayForExtraHoursValue "d_extrest"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasEstimatedAdditionalPayForExtraHoursValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasEstimatedAdditionalPayForExtraHoursValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_extrest"^^xsd:anyURI)
SubDataPropertyOf(:hasEstimatedAdditionalPayForExtraHoursValue :hasPersonalIncomeAttribute)
DataPropertyDomain(:hasEstimatedAdditionalPayForExtraHoursValue :PersonalIncome)
DataPropertyRange(:hasEstimatedAdditionalPayForExtraHoursValue DataUnionOf(:proxy DataOneOf("estimated amount" "exact amount")))

# Data Property: :hasEthnicity (:hasEthnicity)

AnnotationAssertion(rdfs:comment :hasEthnicity "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasEthnicity "d_racelo_code"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasEthnicity "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_racelo_code"^^xsd:anyURI)
SubDataPropertyOf(:hasEthnicity :hasPersonAttribute)
DataPropertyDomain(:hasEthnicity :Person)
DataPropertyRange(:hasEthnicity DataUnionOf(:proxy :refused DataOneOf("african" "any other asian background" "any other black background" "any other mixed background" "any other white background" "arab" "british/english/scottish/welsh/northern irish" "caribbean" "not elsewhere codable" "pakistani" "white and asian")))

# Data Property: :hasFeltHasBeenOfUseRecently (:hasFeltHasBeenOfUseRecently)

AnnotationAssertion(rdfs:comment :hasFeltHasBeenOfUseRecently "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFeltHasBeenOfUseRecently "d_scghqc"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasFeltHasBeenOfUseRecently "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scghqc"^^xsd:anyURI)
SubDataPropertyOf(:hasFeltHasBeenOfUseRecently :hasRecentSelfAssessedAttitutudeOf)
DataPropertyDomain(:hasFeltHasBeenOfUseRecently :Person)
DataPropertyRange(:hasFeltHasBeenOfUseRecently DataUnionOf(:missing :proxy :refused :unknown DataOneOf("about the same as usual" "better than usual" "less so than usual" "more so than usual" "much less than usual" "not at all" "rather more than usual" "same as usual")))

# Data Property: :hasFeltUnableToOvercomeProblemsRecently (:hasFeltUnableToOvercomeProblemsRecently)

AnnotationAssertion(rdfs:comment :hasFeltUnableToOvercomeProblemsRecently "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFeltUnableToOvercomeProblemsRecently "d_scghqf"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasFeltUnableToOvercomeProblemsRecently "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scghqf"^^xsd:anyURI)
SubDataPropertyOf(:hasFeltUnableToOvercomeProblemsRecently :hasRecentSelfAssessedAttitutudeOf)
DataPropertyDomain(:hasFeltUnableToOvercomeProblemsRecently :Person)
DataPropertyRange(:hasFeltUnableToOvercomeProblemsRecently DataUnionOf(:missing :proxy :refused :unknown DataOneOf("about the same as usual" "better than usual" "less so than usual" "more so than usual" "much less than usual" "not at all" "rather more than usual" "same as usual")))

# Data Property: :hasFuelCost (:hasFuelCost)

SubDataPropertyOf(:hasFuelCost :hasValueForConsumption)
DataPropertyDomain(:hasFuelCost :ExternalPowerSupply)
DataPropertyRange(:hasFuelCost DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal))

# Data Property: :hasFuelCostForCombinedElectrictyAndGas (:hasFuelCostForCombinedElectrictyAndGas)

AnnotationAssertion(rdfs:comment :hasFuelCostForCombinedElectrictyAndGas "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFuelCostForCombinedElectrictyAndGas "d_xpduely"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasFuelCostForCombinedElectrictyAndGas "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_xpduely"^^xsd:anyURI)
SubDataPropertyOf(:hasFuelCostForCombinedElectrictyAndGas :hasFuelCost)
DataPropertyDomain(:hasFuelCostForCombinedElectrictyAndGas :CombinedElectricityAndGas)
DataPropertyRange(:hasFuelCostForCombinedElectrictyAndGas DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal))

# Data Property: :hasFuelCostForElectricity (:hasFuelCostForElectricity)

AnnotationAssertion(rdfs:comment :hasFuelCostForElectricity "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFuelCostForElectricity "d_xpelecy"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasFuelCostForElectricity "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_xpelecy"^^xsd:anyURI)
SubDataPropertyOf(:hasFuelCostForElectricity :hasFuelCost)
DataPropertyDomain(:hasFuelCostForElectricity :Electricity)
DataPropertyRange(:hasFuelCostForElectricity DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal))

# Data Property: :hasFuelCostForGas (:hasFuelCostForGas)

AnnotationAssertion(rdfs:comment :hasFuelCostForGas "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFuelCostForGas "d_xpgasy")
AnnotationAssertion(rdfs:isDefinedBy :hasFuelCostForGas "https://www.understandingsociety.ac.uk/documentation/innovation-panel/dataset-documentation/wave/4/datafile/d_hhresp_ip/variable/d_xpgasy"^^xsd:anyURI)
SubDataPropertyOf(:hasFuelCostForGas :hasFuelCost)
DataPropertyDomain(:hasFuelCostForGas :Gas)
DataPropertyRange(:hasFuelCostForGas DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal))

# Data Property: :hasFuelCostForOil (:hasFuelCostForOil)

AnnotationAssertion(rdfs:comment :hasFuelCostForOil "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFuelCostForOil "d_xpoily"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasFuelCostForOil "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_xpoily"^^xsd:anyURI)
SubDataPropertyOf(:hasFuelCostForOil :hasFuelCost)
DataPropertyDomain(:hasFuelCostForOil :Oil)
DataPropertyRange(:hasFuelCostForOil DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal))

# Data Property: :hasFuelCostForSolidFuelOrOther (:hasFuelCostForSolidFuelOrOther)

AnnotationAssertion(rdfs:comment :hasFuelCostForSolidFuelOrOther "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFuelCostForSolidFuelOrOther "d_xpsfly"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasFuelCostForSolidFuelOrOther "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_xpsfly"^^xsd:anyURI)
SubDataPropertyOf(:hasFuelCostForSolidFuelOrOther :hasFuelCost)
DataPropertyDomain(:hasFuelCostForSolidFuelOrOther :SolidFuelOrOther)
DataPropertyRange(:hasFuelCostForSolidFuelOrOther DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal))

# Data Property: :hasFullOrPartTimeWork (:hasFullOrPartTimeWork)

AnnotationAssertion(rdfs:comment :hasFullOrPartTimeWork "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFullOrPartTimeWork "d_jbft_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFullOrPartTimeWork "derived"^^xsd:string)
SubDataPropertyOf(:hasFullOrPartTimeWork :hasJobAttribute)
FunctionalDataProperty(:hasFullOrPartTimeWork)
DataPropertyDomain(:hasFullOrPartTimeWork ObjectSomeValuesFrom(:hasFullOrPartTimePrimaryJob :FormOfEmployment))
DataPropertyRange(:hasFullOrPartTimeWork DataUnionOf(:missing :proxy DataOneOf("FT employee" "PT employee")))

# Data Property: :hasGHQCaseness (:hasGHQCaseness)

AnnotationAssertion(rdfs:comment :hasGHQCaseness "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasGHQCaseness "d_scghq2_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasGHQCaseness "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasGHQCaseness "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scghq2_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasGHQCaseness :hasDerivedPersonAttribute)
FunctionalDataProperty(:hasGHQCaseness)
DataPropertyDomain(:hasGHQCaseness :Person)
DataPropertyRange(:hasGHQCaseness DataUnionOf(:missing :proxy DatatypeRestriction(xsd:nonNegativeInteger xsd:maxInclusive "12"^^xsd:nonNegativeInteger)))

# Data Property: :hasGHQLikertScale (:hasGHQLikertScale)

AnnotationAssertion(rdfs:comment :hasGHQLikertScale "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasGHQLikertScale "d_scghq1_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasGHQLikertScale "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasGHQLikertScale "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/2/datafile/b_indresp/variable/b_scghq1_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasGHQLikertScale :hasDerivedPersonAttribute)
DataPropertyDomain(:hasGHQLikertScale :Person)
DataPropertyRange(:hasGHQLikertScale DataUnionOf(:missing :proxy DatatypeRestriction(xsd:nonNegativeInteger xsd:maxInclusive "36"^^xsd:nonNegativeInteger)))

# Data Property: :hasGrossEarningsForLastMonthFromSecondJob (:hasGrossEarningsForLastMonthFromSecondJob)

AnnotationAssertion(rdfs:comment :hasGrossEarningsForLastMonthFromSecondJob "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasGrossEarningsForLastMonthFromSecondJob "d_j2pay"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasGrossEarningsForLastMonthFromSecondJob "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_j2pay"^^xsd:anyURI)
AnnotationAssertion(rdfs:seeAlso :hasGrossEarningsForLastMonthFromSecondJob :isMostRecentSecondJobPay)
SubDataPropertyOf(:hasGrossEarningsForLastMonthFromSecondJob :hasPersonalIncomeAttribute)
DataPropertyDomain(:hasGrossEarningsForLastMonthFromSecondJob :LatestSecondJobIncome)
DataPropertyRange(:hasGrossEarningsForLastMonthFromSecondJob DataUnionOf(:proxy :refused :unknown DatatypeRestriction(xsd:decimal xsd:minExclusive "0"^^xsd:decimal)))

# Data Property: :hasHourlyRateforBasicHoursOfWork (:hasHourlyRateforBasicHoursOfWork)

AnnotationAssertion(rdfs:comment :hasHourlyRateforBasicHoursOfWork "d_basnsa"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHourlyRateforBasicHoursOfWork "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasHourlyRateforBasicHoursOfWork "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_basnsa"^^xsd:anyURI)
SubDataPropertyOf(:hasHourlyRateforBasicHoursOfWork :hasJobAttribute)
DataPropertyDomain(:hasHourlyRateforBasicHoursOfWork ObjectSomeValuesFrom(:hasTakeHomePay ObjectSomeValuesFrom(:hasPaymentPeriod :PaymentPeriodOfAnHour)))
DataPropertyDomain(:hasHourlyRateforBasicHoursOfWork ObjectSomeValuesFrom(:isEmployedOrSelfEmployedForPrimaryJob :NotSelfEmployed))
DataPropertyRange(:hasHourlyRateforBasicHoursOfWork DataUnionOf(DataUnionOf(DataOneOf("no set amount per hour/varies") DatatypeRestriction(xsd:decimal xsd:minExclusive "0"^^xsd:decimal)) :proxy :refused :unknown))

# Data Property: :hasHoursOfSleep (:hasHoursOfSleep)

AnnotationAssertion(rdfs:comment :hasHoursOfSleep "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHoursOfSleep "d_schrs_slph"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasHoursOfSleep "https://www.understandingsociety.ac.uk/documentation/innovation-panel/dataset-documentation/wave/4/datafile/d_indresp_ip/variable/d_schrs_slph"^^xsd:anyURI)
SubDataPropertyOf(:hasHoursOfSleep :hasSleepAttribute)
DataPropertyDomain(:hasHoursOfSleep :Person)
DataPropertyRange(:hasHoursOfSleep DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal xsd:maxInclusive "24"^^xsd:decimal))

# Data Property: :hasHouseholdAttribute (:hasHouseholdAttribute)

DataPropertyDomain(:hasHouseholdAttribute :Household)
DataPropertyRange(:hasHouseholdAttribute DataUnionOf(xsd:boolean xsd:decimal xsd:string))

# Data Property: :hasHouseholdCompositionLFSVersion (:hasHouseholdCompositionLFSVersion)

AnnotationAssertion(rdfs:comment :hasHouseholdCompositionLFSVersion "d_hhtype_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHouseholdCompositionLFSVersion "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHouseholdCompositionLFSVersion "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasHouseholdCompositionLFSVersion "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_hhtype_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasHouseholdCompositionLFSVersion :hasDerivedPersonAttribute)
DataPropertyDomain(:hasHouseholdCompositionLFSVersion :Person)
DataPropertyRange(:hasHouseholdCompositionLFSVersion DataOneOf("1 adult under pensionable age, no children " "1 adult, 1 child " "1 adult, 2 or more children " "1 female, age 60+, no children " "1 male, aged 65+, no children " "2 adults, not a couple, 1 or more children " "2 adults, not a couple, both under pensionable age, no children " "2 adults, not a couple, one or more over pensionable age, no children " "3 or more adults, 1 or more children, excl. any couples" "3 or more adults, 1-2 children, incl. at least one couple " "3 or more adults, >2 children, incl. at least one couple " "3 or more adults, no children, excl. any couples " "3 or more adults, no children, incl. at least one couple " "Couple 1 or more over pensionable age,no children " "Couple both under pensionable age, no children " "Couple with 1 child " "Couple with 2 children " "Couple with 3 or more children "))

# Data Property: :hasHouseholdIdentifier (:hasHouseholdIdentifier)

AnnotationAssertion(rdfs:comment :hasHouseholdIdentifier "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHouseholdIdentifier "d_hidp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHouseholdIdentifier "d_indresp")
AnnotationAssertion(rdfs:comment :hasHouseholdIdentifier "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasHouseholdIdentifier "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_hidp"^^xsd:anyURI)
SubDataPropertyOf(:hasHouseholdIdentifier :hasHouseholdAttribute)
FunctionalDataProperty(:hasHouseholdIdentifier)
DataPropertyDomain(:hasHouseholdIdentifier :Household)
DataPropertyRange(:hasHouseholdIdentifier xsd:positiveInteger)

# Data Property: :hasHouseholdIncomeGrossMonthBeforeInterviewValue (:hasHouseholdIncomeGrossMonthBeforeInterviewValue)

AnnotationAssertion(rdfs:comment :hasHouseholdIncomeGrossMonthBeforeInterviewValue "d_fihhmngrs_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHouseholdIncomeGrossMonthBeforeInterviewValue "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHouseholdIncomeGrossMonthBeforeInterviewValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasHouseholdIncomeGrossMonthBeforeInterviewValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_fihhmngrs_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasHouseholdIncomeGrossMonthBeforeInterviewValue :hasHouseholdIncomeValue)
DataPropertyDomain(:hasHouseholdIncomeGrossMonthBeforeInterviewValue :HouseholdIncomeGrossMonthBeforeInterview)
DataPropertyRange(:hasHouseholdIncomeGrossMonthBeforeInterviewValue xsd:decimal)

# Data Property: :hasHouseholdIncomeNetNoDeductionsValue (:hasHouseholdIncomeNetNoDeductionsValue)

AnnotationAssertion(rdfs:comment :hasHouseholdIncomeNetNoDeductionsValue "d_hhnetinc1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHouseholdIncomeNetNoDeductionsValue "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasHouseholdIncomeNetNoDeductionsValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_hhnetinc1"^^xsd:anyURI)
SubDataPropertyOf(:hasHouseholdIncomeNetNoDeductionsValue :hasHouseholdIncomeValue)
DataPropertyRange(:hasHouseholdIncomeNetNoDeductionsValue xsd:decimal)

# Data Property: :hasHouseholdIncomeValue (:hasHouseholdIncomeValue)

SubDataPropertyOf(:hasHouseholdIncomeValue :hasIncomeValue)
DataPropertyDomain(:hasHouseholdIncomeValue :HouseholdIncome)
DataPropertyRange(:hasHouseholdIncomeValue xsd:decimal)

# Data Property: :hasIncomeValue (:hasIncomeValue)

DataPropertyDomain(:hasIncomeValue :Income)

# Data Property: :hasIncomeValueAndIsSelfEmployed (:hasIncomeValueAndIsSelfEmployed)

AnnotationAssertion(rdfs:comment :hasIncomeValueAndIsSelfEmployed "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasIncomeValueAndIsSelfEmployed "d_jspayu"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasIncomeValueAndIsSelfEmployed "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jspayu"^^xsd:anyURI)
SubDataPropertyOf(:hasIncomeValueAndIsSelfEmployed :hasPersonalIncomeAttribute)
DataPropertyDomain(:hasIncomeValueAndIsSelfEmployed :SelfEmployedIncome)
DataPropertyRange(:hasIncomeValueAndIsSelfEmployed DataUnionOf(:proxy :refused :unknown DatatypeRestriction(xsd:decimal xsd:minExclusive "0"^^xsd:decimal)))

# Data Property: :hasInternetAccess (:hasInternetAccess)

AnnotationAssertion(rdfs:comment :hasInternetAccess "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasInternetAccess "d_pcnet"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasInternetAccess "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_pcnet"^^xsd:anyURI)
SubDataPropertyOf(:hasInternetAccess :hasMediaAccess)
DataPropertyDomain(:hasInternetAccess :Household)
DataPropertyRange(:hasInternetAccess xsd:boolean)

# Data Property: :hasInvestmentIncomeValue (:hasInvestmentIncomeValue)

AnnotationAssertion(rdfs:comment :hasInvestmentIncomeValue "d_inc5inv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasInvestmentIncomeValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasInvestmentIncomeValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasInvestmentIncomeValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_inc5inv"^^xsd:anyURI)
SubDataPropertyOf(:hasInvestmentIncomeValue :hasMonthlyIncomeComponentValue)
DataPropertyDomain(:hasInvestmentIncomeValue :InvestmentIncome)
DataPropertyRange(:hasInvestmentIncomeValue xsd:decimal)

# Data Property: :hasJobAttribute (:hasJobAttribute)

SubDataPropertyOf(:hasJobAttribute :hasPersonAttribute)
DataPropertyDomain(:hasJobAttribute :Person)

# Data Property: :hasJobSatisfaction (:hasJobSatisfaction)

AnnotationAssertion(rdfs:comment :hasJobSatisfaction "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasJobSatisfaction "d_jbsat"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasJobSatisfaction "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbsat"^^xsd:anyURI)
SubDataPropertyOf(:hasJobSatisfaction :hasJobAttribute)
DataPropertyDomain(:hasJobSatisfaction :Person)
DataPropertyRange(:hasJobSatisfaction DataUnionOf(:missing :proxy :refused :unknown DataOneOf("completedly satisfied" "completely dissatisfied " "mostly dissatisfied " "mostly satisfied " "neither satisfied or dissatisfied " "somewhat dissatisfied " "somewhat satisfied ")))

# Data Property: :hasLFSVersionHouseholdComposition (:hasLFSVersionHouseholdComposition)

SubDataPropertyOf(:hasLFSVersionHouseholdComposition :hasHouseholdAttribute)
DataPropertyDomain(:hasLFSVersionHouseholdComposition :Household)
DataPropertyRange(:hasLFSVersionHouseholdComposition DataOneOf("1 adult under pensionable age, no children" "1 adult, 1 child" "1 adult, 2 or more children" "1 female, age 60+, no children" "1 male, aged 65+, no children" "2 adults, not a couple, 1 or more children" "2 adults, not a couple, both under pensionable age, no children" "2 adults, not a couple, one or more over pensionable age, no children" "3 or more adults, 1 or more children, excl. any couples" "3 or more adults, 1-2 children, incl. at least one couple" "3 or more adults, >2 children, incl. at least one couple" "3 or more adults, no children, excl. any couples" "3 or more adults, no children, incl. at least one couple" "Couple 1 or more over pensionable age,no children" "Couple both under pensionable age, no children" "Couple with 1 child" "Couple with 2 children" "Couple with 3 or more children"))

# Data Property: :hasLastJobSOC2000CondensedValue (:hasLastJobSOC2000CondensedValue)

SubDataPropertyOf(:hasLastJobSOC2000CondensedValue :hasJobAttribute)
DataPropertyDomain(:hasLastJobSOC2000CondensedValue :Person)
DataPropertyRange(:hasLastJobSOC2000CondensedValue DataUnionOf(:jobSoc00Condensed :missing :proxy))

# Data Property: :hasLatestTakeHomePayGrossValue (:hasLatestTakeHomePayGrossValue)

AnnotationAssertion(rdfs:comment :hasLatestTakeHomePayGrossValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasLatestTakeHomePayGrossValue "d_paygl"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasLatestTakeHomePayGrossValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_paygl"^^xsd:anyURI)
SubDataPropertyOf(:hasLatestTakeHomePayGrossValue :hasTakeHomePayAttribute)
DataPropertyDomain(:hasLatestTakeHomePayGrossValue :TakeHomePay)
DataPropertyRange(:hasLatestTakeHomePayGrossValue DataUnionOf(:proxy :refused :unknown DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal)))

# Data Property: :hasLatestTakeHomePayNetValue (:hasLatestTakeHomePayNetValue)

AnnotationAssertion(rdfs:comment :hasLatestTakeHomePayNetValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasLatestTakeHomePayNetValue "d_paynl"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasLatestTakeHomePayNetValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_paynl"^^xsd:anyURI)
SubDataPropertyOf(:hasLatestTakeHomePayNetValue :hasTakeHomePayAttribute)
DataPropertyDomain(:hasLatestTakeHomePayNetValue :TakeHomePay)
DataPropertyRange(:hasLatestTakeHomePayNetValue DataUnionOf(:proxy :refused :unknown DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal)))

# Data Property: :hasLegalMarriageStatus (:hasLegalMarriageStatus)

AnnotationAssertion(rdfs:comment :hasLegalMarriageStatus "d_inresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasLegalMarriageStatus "d_mlstat"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasLegalMarriageStatus "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_mlstat"^^xsd:anyURI)
SubDataPropertyOf(:hasLegalMarriageStatus :hasPersonAttribute)
FunctionalDataProperty(:hasLegalMarriageStatus)
DataPropertyDomain(:hasLegalMarriageStatus :Person)
DataPropertyRange(:hasLegalMarriageStatus DataOneOf("civil partner (legal)" "divorced " "married" "separated legally married" "single, nvr marr/civ p" "widowed"))

# Data Property: :hasLevelOfInterestInPolitics (:hasLevelOfInterestInPolitics)

AnnotationAssertion(rdfs:comment :hasLevelOfInterestInPolitics "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasLevelOfInterestInPolitics "d_vote6"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasLevelOfInterestInPolitics "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_vote6"^^xsd:anyURI)
SubDataPropertyOf(:hasLevelOfInterestInPolitics :hasPoliticalAttribute)
DataPropertyDomain(:hasLevelOfInterestInPolitics :Person)
DataPropertyRange(:hasLevelOfInterestInPolitics DataUnionOf(:missing :proxy :refused :unknown DataOneOf("fairly" "not very" "or not at all interested?" "very")))

# Data Property: :hasMediaAccess (:hasMediaAccess)

SubDataPropertyOf(:hasMediaAccess :hasHouseholdAttribute)
FunctionalDataProperty(:hasMediaAccess)
DataPropertyDomain(:hasMediaAccess :Household)
DataPropertyRange(:hasMediaAccess xsd:boolean)

# Data Property: :hasMiscellaneousIncomeValue (:hasMiscellaneousIncomeValue)

AnnotationAssertion(rdfs:comment :hasMiscellaneousIncomeValue "d_inc2misc"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasMiscellaneousIncomeValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasMiscellaneousIncomeValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasMiscellaneousIncomeValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_inc2misc"^^xsd:anyURI)
SubDataPropertyOf(:hasMiscellaneousIncomeValue :hasMonthlyIncomeComponentValue)
DataPropertyDomain(:hasMiscellaneousIncomeValue :MiscellaneousIncome)
DataPropertyRange(:hasMiscellaneousIncomeValue xsd:decimal)

# Data Property: :hasModifiedOECDEquivalenceScaleValue (:hasModifiedOECDEquivalenceScaleValue)

AnnotationAssertion(rdfs:comment :hasModifiedOECDEquivalenceScaleValue "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasModifiedOECDEquivalenceScaleValue "d_ieqmoecd_dv"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasModifiedOECDEquivalenceScaleValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_ieqmoecd_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasModifiedOECDEquivalenceScaleValue :hasHouseholdAttribute)
FunctionalDataProperty(:hasModifiedOECDEquivalenceScaleValue)
DataPropertyDomain(:hasModifiedOECDEquivalenceScaleValue :Household)
DataPropertyRange(:hasModifiedOECDEquivalenceScaleValue DatatypeRestriction(xsd:decimal xsd:minExclusive "0"^^xsd:decimal))

# Data Property: :hasMonthlyIncomeComponentValue (:hasMonthlyIncomeComponentValue)

SubDataPropertyOf(:hasMonthlyIncomeComponentValue :hasPersonalIncomeAttribute)
DataPropertyDomain(:hasMonthlyIncomeComponentValue :MonthlyIncomeComponentAmount)
DataPropertyRange(:hasMonthlyIncomeComponentValue xsd:decimal)

# Data Property: :hasNetEarningsPrimaryJobValue (:hasNetEarningsPrimaryJobValue)

AnnotationAssertion(rdfs:comment :hasNetEarningsPrimaryJobValue "d_inc1alabem"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasNetEarningsPrimaryJobValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasNetEarningsPrimaryJobValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasNetEarningsPrimaryJobValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_inc1alabem"^^xsd:anyURI)
SubDataPropertyOf(:hasNetEarningsPrimaryJobValue :hasMonthlyIncomeComponentValue)
DataPropertyDomain(:hasNetEarningsPrimaryJobValue :NetEarningsPrimaryJob)
DataPropertyRange(:hasNetEarningsPrimaryJobValue xsd:decimal)

# Data Property: :hasNetEarningsSecondJobValue (:hasNetEarningsSecondJobValue)

AnnotationAssertion(rdfs:comment :hasNetEarningsSecondJobValue "d_inc1clabj2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasNetEarningsSecondJobValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasNetEarningsSecondJobValue "d_indresp"^^xsd:anyURI)
AnnotationAssertion(rdfs:isDefinedBy :hasNetEarningsSecondJobValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_inc1clabj2"^^xsd:anyURI)
SubDataPropertyOf(:hasNetEarningsSecondJobValue :hasMonthlyIncomeComponentValue)
DataPropertyDomain(:hasNetEarningsSecondJobValue :NetEarningsSecondJob)
DataPropertyRange(:hasNetEarningsSecondJobValue xsd:decimal)

# Data Property: :hasNetLabourIncomeValue (:hasNetLabourIncomeValue)

AnnotationAssertion(rdfs:comment :hasNetLabourIncomeValue "d_inc1lab"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasNetLabourIncomeValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasNetLabourIncomeValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasNetLabourIncomeValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_inc1lab"^^xsd:anyURI)
SubDataPropertyOf(:hasNetLabourIncomeValue :hasMonthlyIncomeComponentValue)
DataPropertyDomain(:hasNetLabourIncomeValue :NetLabourIncome)
DataPropertyRange(:hasNetLabourIncomeValue xsd:decimal)

# Data Property: :hasPaidEmployment (:hasPaidEmployment)

AnnotationAssertion(rdfs:comment :hasPaidEmployment "d_employ"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPaidEmployment "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasPaidEmployment "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_employ"^^xsd:anyURI)
SubDataPropertyOf(:hasPaidEmployment :hasJobAttribute)
DataPropertyDomain(:hasPaidEmployment DataSomeValuesFrom(:hasAgeValueInYears DatatypeRestriction(xsd:nonNegativeInteger xsd:minInclusive "16"^^xsd:nonNegativeInteger)))
DataPropertyRange(:hasPaidEmployment DataUnionOf(:missing :proxy :refused :unknown xsd:boolean))

# Data Property: :hasPartnerWithCrossWavePersonIdentifier (:hasPartnerWithCrossWavePersonIdentifier)

AnnotationAssertion(rdfs:comment :hasPartnerWithCrossWavePersonIdentifier "Missing:

d_apno
d_egoalt"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPartnerWithCrossWavePersonIdentifier "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPartnerWithCrossWavePersonIdentifier "d_ppid"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasPartnerWithCrossWavePersonIdentifier "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indall/variable/d_ppid"^^xsd:anyURI)
SubDataPropertyOf(:hasPartnerWithCrossWavePersonIdentifier :hasPersonAttribute)
DataPropertyDomain(:hasPartnerWithCrossWavePersonIdentifier :Person)
DataPropertyDomain(:hasPartnerWithCrossWavePersonIdentifier ObjectSomeValuesFrom(:hasPartner DataSomeValuesFrom(:hasCrossWavePersonIdentifier xsd:nonNegativeInteger)))
DataPropertyRange(:hasPartnerWithCrossWavePersonIdentifier xsd:nonNegativeInteger)

# Data Property: :hasPartnerWithPersonNumberInHouseholdGrid (:hasPartnerWithPersonNumberInHouseholdGrid)

AnnotationAssertion(rdfs:comment :hasPartnerWithPersonNumberInHouseholdGrid "Missing:

d_apno
d_egoalt"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPartnerWithPersonNumberInHouseholdGrid "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPartnerWithPersonNumberInHouseholdGrid "d_ppno"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasPartnerWithPersonNumberInHouseholdGrid "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indall/variable/d_ppno"^^xsd:anyURI)
SubDataPropertyOf(:hasPartnerWithPersonNumberInHouseholdGrid :hasPersonAttribute)
DataPropertyDomain(:hasPartnerWithPersonNumberInHouseholdGrid :Person)
DataPropertyDomain(:hasPartnerWithPersonNumberInHouseholdGrid ObjectSomeValuesFrom(:hasPartner DataSomeValuesFrom(:hasPersonNumberInHouseholdGrid xsd:nonNegativeInteger)))
DataPropertyRange(:hasPartnerWithPersonNumberInHouseholdGrid xsd:nonNegativeInteger)

# Data Property: :hasPensionIncomeValue (:hasPensionIncomeValue)

AnnotationAssertion(rdfs:comment :hasPensionIncomeValue "d_inc6pen"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPensionIncomeValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPensionIncomeValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasPensionIncomeValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_inc6pen"^^xsd:anyURI)
SubDataPropertyOf(:hasPensionIncomeValue :hasMonthlyIncomeComponentValue)
DataPropertyDomain(:hasPensionIncomeValue :PensionIncome)
DataPropertyRange(:hasPensionIncomeValue xsd:decimal)

# Data Property: :hasPersonAttribute (:hasPersonAttribute)

DataPropertyDomain(:hasPersonAttribute :Person)
DataPropertyRange(:hasPersonAttribute DataUnionOf(:missing :proxy :refused :unknown xsd:boolean xsd:decimal xsd:nonNegativeInteger xsd:string))

# Data Property: :hasPersonNumberInHouseholdGrid (:hasPersonNumberInHouseholdGrid)

AnnotationAssertion(rdfs:comment :hasPersonNumberInHouseholdGrid "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPersonNumberInHouseholdGrid "d_pno"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPersonNumberInHouseholdGrid "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_income/variable/d_pno"^^xsd:anyURI)
SubDataPropertyOf(:hasPersonNumberInHouseholdGrid :hasPersonAttribute)
FunctionalDataProperty(:hasPersonNumberInHouseholdGrid)
DataPropertyDomain(:hasPersonNumberInHouseholdGrid :Person)
DataPropertyRange(:hasPersonNumberInHouseholdGrid xsd:nonPositiveInteger)

# Data Property: :hasPersonalIncomeAttribute (:hasPersonalIncomeAttribute)

SubDataPropertyOf(:hasPersonalIncomeAttribute :hasIncomeValue)
DataPropertyDomain(:hasPersonalIncomeAttribute :PersonalIncome)
DataPropertyRange(:hasPersonalIncomeAttribute DataUnionOf(:proxy :refused :unknown xsd:boolean xsd:decimal xsd:string))

# Data Property: :hasPoliticalAttribute (:hasPoliticalAttribute)

SubDataPropertyOf(:hasPoliticalAttribute :hasPersonAttribute)
DataPropertyDomain(:hasPoliticalAttribute :Person)
DataPropertyRange(:hasPoliticalAttribute DataUnionOf(xsd:boolean xsd:string))

# Data Property: :hasPrivateBenefitIncomeValue (:hasPrivateBenefitIncomeValue)

AnnotationAssertion(rdfs:comment :hasPrivateBenefitIncomeValue "d_inc3prben"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPrivateBenefitIncomeValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPrivateBenefitIncomeValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasPrivateBenefitIncomeValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_inc3prben"^^xsd:anyURI)
SubDataPropertyOf(:hasPrivateBenefitIncomeValue :hasMonthlyIncomeComponentValue)
DataPropertyDomain(:hasPrivateBenefitIncomeValue :PrivateBenefitIncome)
DataPropertyRange(:hasPrivateBenefitIncomeValue xsd:decimal)

# Data Property: :hasProblemsOvercomingDifficultiesRecently (:hasProblemsOvercomingDifficultiesRecently)

AnnotationAssertion(rdfs:comment :hasProblemsOvercomingDifficultiesRecently "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasProblemsOvercomingDifficultiesRecently "d_scghqf"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasProblemsOvercomingDifficultiesRecently "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scghqf"^^xsd:anyURI)
SubDataPropertyOf(:hasProblemsOvercomingDifficultiesRecently :hasRecentSelfAssessedAttitutudeOf)
DataPropertyDomain(:hasProblemsOvercomingDifficultiesRecently :Person)
DataPropertyRange(:hasProblemsOvercomingDifficultiesRecently DataUnionOf(:missing :proxy :refused :unknown DataOneOf("about the same as usual" "better than usual" "less so than usual" "more so than usual" "much less than usual" "not at all" "rather more than usual" "same as usual")))

# Data Property: :hasQualityOfSleep (:hasQualityOfSleep)

AnnotationAssertion(rdfs:comment :hasQualityOfSleep "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasQualityOfSleep "s_scslp_qual"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasQualityOfSleep "https://www.understandingsociety.ac.uk/documentation/innovation-panel/dataset-documentation/wave/4/datafile/d_indresp_ip/variable/d_scslp_qual"^^xsd:anyURI)
SubDataPropertyOf(:hasQualityOfSleep :hasSleepAttribute)
DataPropertyDomain(:hasQualityOfSleep :Person)
DataPropertyRange(:hasQualityOfSleep xsd:string)
DataPropertyRange(:hasQualityOfSleep DataOneOf("fairly bad " "fairly good " "very bad" "very good "))

# Data Property: :hasRecentSelfAssessedAttitutudeOf (:hasRecentSelfAssessedAttitutudeOf)

SubDataPropertyOf(:hasRecentSelfAssessedAttitutudeOf :hasPersonAttribute)
DataPropertyDomain(:hasRecentSelfAssessedAttitutudeOf :Person)
DataPropertyRange(:hasRecentSelfAssessedAttitutudeOf DataUnionOf(:missing :proxy :refused :unknown xsd:string))

# Data Property: :hasReligiousAtrribute (:hasReligiousAtrribute)

SubDataPropertyOf(:hasReligiousAtrribute :hasPersonAttribute)
DataPropertyDomain(:hasReligiousAtrribute :Person)
DataPropertyRange(:hasReligiousAtrribute xsd:boolean)

# Data Property: :hasSF12MentalComponentSummary (:hasSF12MentalComponentSummary)

AnnotationAssertion(rdfs:comment :hasSF12MentalComponentSummary "Missing: 

d_scsf1
d_scsf2a
d_scsf2b
d_scsf3a
d_scsf3b
d_scsf4a
d_scsf4b
d_scsf5
d_scsf6a
d_scsf6b
d_scsf6c
d_scsf7"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSF12MentalComponentSummary "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSF12MentalComponentSummary "d_sf12mcs_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSF12MentalComponentSummary "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasSF12MentalComponentSummary "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_sf12mcs_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasSF12MentalComponentSummary :hasDerivedPersonAttribute)
DataPropertyDomain(:hasSF12MentalComponentSummary :Person)
DataPropertyRange(:hasSF12MentalComponentSummary DataUnionOf(:missing :proxy DatatypeRestriction(xsd:nonNegativeInteger xsd:maxInclusive "100"^^xsd:nonNegativeInteger)))

# Data Property: :hasSF12PhysicalComponentSummary (:hasSF12PhysicalComponentSummary)

AnnotationAssertion(rdfs:comment :hasSF12PhysicalComponentSummary "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSF12PhysicalComponentSummary "d_sf12pcs_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSF12PhysicalComponentSummary "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasSF12PhysicalComponentSummary "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_sf12pcs_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasSF12PhysicalComponentSummary :hasDerivedPersonAttribute)
DataPropertyDomain(:hasSF12PhysicalComponentSummary :Person)
DataPropertyRange(:hasSF12PhysicalComponentSummary DataUnionOf(:missing :proxy DatatypeRestriction(xsd:nonNegativeInteger xsd:maxInclusive "100"^^xsd:nonNegativeInteger)))

# Data Property: :hasSatisfaction (:hasSatisfaction)

SubDataPropertyOf(:hasSatisfaction :hasPersonAttribute)
DataPropertyDomain(:hasSatisfaction :Person)
DataPropertyRange(:hasSatisfaction DataUnionOf(:missing :proxy :refused :unknown xsd:string))

# Data Property: :hasSatisfactionWithAmountOfLeisureTime (:hasSatisfactionWithAmountOfLeisureTime)

AnnotationAssertion(rdfs:comment :hasSatisfactionWithAmountOfLeisureTime "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSatisfactionWithAmountOfLeisureTime "d_sclfsat7"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasSatisfactionWithAmountOfLeisureTime "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_sclfsat7"^^xsd:anyURI)
SubDataPropertyOf(:hasSatisfactionWithAmountOfLeisureTime :hasSatisfaction)
DataPropertyDomain(:hasSatisfactionWithAmountOfLeisureTime :Person)
DataPropertyRange(:hasSatisfactionWithAmountOfLeisureTime DataUnionOf(:missing :proxy :refused :unknown DataOneOf("completely dissatisfied" "completely satisfied" "mostly dissatisfied	" "mostly satisfied" "neither sat nor dissat" "somewhat dissatisfied" "somewhat satisfied")))

# Data Property: :hasSatisfactionWithHealth (:hasSatisfactionWithHealth)

AnnotationAssertion(rdfs:comment :hasSatisfactionWithHealth "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSatisfactionWithHealth "d_sclfsat1"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasSatisfactionWithHealth "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_sclfsat1"^^xsd:anyURI)
SubDataPropertyOf(:hasSatisfactionWithHealth :hasSatisfaction)
DataPropertyDomain(:hasSatisfactionWithHealth :Person)
DataPropertyRange(:hasSatisfactionWithHealth DataUnionOf(:missing :proxy :refused :unknown DataOneOf("completely dissatisfied" "completely satisfied" "mostly dissatisfied	" "mostly satisfied" "neither sat nor dissat" "somewhat dissatisfied" "somewhat satisfied")))

# Data Property: :hasSatisfactionWithIncome (:hasSatisfactionWithIncome)

AnnotationAssertion(rdfs:comment :hasSatisfactionWithIncome "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSatisfactionWithIncome "d_sclfsat2"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasSatisfactionWithIncome "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_sclfsat2"^^xsd:anyURI)
SubDataPropertyOf(:hasSatisfactionWithIncome :hasSatisfaction)
DataPropertyDomain(:hasSatisfactionWithIncome :Person)
DataPropertyRange(:hasSatisfactionWithIncome DataUnionOf(:missing :proxy :refused :unknown DataOneOf("completely dissatisfied" "completely satisfied" "mostly dissatisfied	" "mostly satisfied" "neither sat nor dissat" "somewhat dissatisfied" "somewhat satisfied")))

# Data Property: :hasSatisfactionWithLifeOverall (:hasSatisfactionWithLifeOverall)

AnnotationAssertion(rdfs:comment :hasSatisfactionWithLifeOverall "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSatisfactionWithLifeOverall "d_sclfsato"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasSatisfactionWithLifeOverall "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_sclfsato"^^xsd:anyURI)
SubDataPropertyOf(:hasSatisfactionWithLifeOverall :hasSatisfaction)
DataPropertyDomain(:hasSatisfactionWithLifeOverall :Person)
DataPropertyRange(:hasSatisfactionWithLifeOverall DataUnionOf(:missing :proxy :refused :unknown DataOneOf("completely dissatisfied" "completely satisfied" "mostly dissatisfied	" "mostly satisfied" "neither sat nor dissat" "somewhat dissatisfied" "somewhat satisfied")))

# Data Property: :hasShareOfIncomeFromBenefitsAndIncomeNECValue (:hasShareOfIncomeFromBenefitsAndIncomeNECValue)

AnnotationAssertion(rdfs:comment :hasShareOfIncomeFromBenefitsAndIncomeNECValue "d_fibenothr_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasShareOfIncomeFromBenefitsAndIncomeNECValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasShareOfIncomeFromBenefitsAndIncomeNECValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasShareOfIncomeFromBenefitsAndIncomeNECValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_fibenothr_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasShareOfIncomeFromBenefitsAndIncomeNECValue :hasDerivedPersonalIncomeProperty)
SubDataPropertyOf(:hasShareOfIncomeFromBenefitsAndIncomeNECValue :hasPersonalIncomeAttribute)
DataPropertyDomain(:hasShareOfIncomeFromBenefitsAndIncomeNECValue :ShareOfIncomeFromBenefitsAndIncomeNEC)
DataPropertyRange(:hasShareOfIncomeFromBenefitsAndIncomeNECValue xsd:decimal)

# Data Property: :hasShortWarwickEdinburghMentalWellBeingScale (:hasShortWarwickEdinburghMentalWellBeingScale)

AnnotationAssertion(rdfs:comment :hasShortWarwickEdinburghMentalWellBeingScale "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasShortWarwickEdinburghMentalWellBeingScale "d_swemwbs_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasShortWarwickEdinburghMentalWellBeingScale "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasShortWarwickEdinburghMentalWellBeingScale "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_swemwbs_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasShortWarwickEdinburghMentalWellBeingScale :hasDerivedPersonAttribute)
DataPropertyDomain(:hasShortWarwickEdinburghMentalWellBeingScale :Person)
DataPropertyRange(:hasShortWarwickEdinburghMentalWellBeingScale DataUnionOf(:missing :proxy DatatypeRestriction(xsd:nonNegativeInteger xsd:minInclusive "7"^^xsd:nonNegativeInteger xsd:maxInclusive "35"^^xsd:nonNegativeInteger)))

# Data Property: :hasSleepAttribute (:hasSleepAttribute)

SubDataPropertyOf(:hasSleepAttribute :hasPersonAttribute)
DataPropertyDomain(:hasSleepAttribute :Person)
DataPropertyRange(:hasSleepAttribute DataUnionOf(xsd:boolean xsd:decimal xsd:string))

# Data Property: :hasSocialBenefitIncomeValue (:hasSocialBenefitIncomeValue)

AnnotationAssertion(rdfs:comment :hasSocialBenefitIncomeValue "d_inc7sben"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSocialBenefitIncomeValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSocialBenefitIncomeValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasSocialBenefitIncomeValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_inc7sben"^^xsd:anyURI)
SubDataPropertyOf(:hasSocialBenefitIncomeValue :hasMonthlyIncomeComponentValue)
DataPropertyDomain(:hasSocialBenefitIncomeValue :SocialBenefitIncome)
DataPropertyRange(:hasSocialBenefitIncomeValue xsd:decimal)

# Data Property: :hasSpouseWithCrossWavePersonIdentifier (:hasSpouseWithCrossWavePersonIdentifier)

AnnotationAssertion(rdfs:comment :hasSpouseWithCrossWavePersonIdentifier "Missing:

d_apno
d_egoalt"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSpouseWithCrossWavePersonIdentifier "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSpouseWithCrossWavePersonIdentifier "d_sppid"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasSpouseWithCrossWavePersonIdentifier "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indall/variable/d_sppid"^^xsd:anyURI)
SubDataPropertyOf(:hasSpouseWithCrossWavePersonIdentifier :hasPartnerWithCrossWavePersonIdentifier)
DataPropertyDomain(:hasSpouseWithCrossWavePersonIdentifier :Person)
DataPropertyDomain(:hasSpouseWithCrossWavePersonIdentifier ObjectSomeValuesFrom(:hasHusbandWifeOrCivilPartner DataSomeValuesFrom(:hasCrossWavePersonIdentifier xsd:nonNegativeInteger)))
DataPropertyRange(:hasSpouseWithCrossWavePersonIdentifier xsd:nonNegativeInteger)

# Data Property: :hasSpouseWithPersonNumberInHouseholdGrid (:hasSpouseWithPersonNumberInHouseholdGrid)

AnnotationAssertion(rdfs:comment :hasSpouseWithPersonNumberInHouseholdGrid "Interesting this is no defined for the mainstage survey, but just for the innovation panel. This mean I recognise none of the domain restricting variables in the definition - they do not appear to be d_indresp."^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSpouseWithPersonNumberInHouseholdGrid "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSpouseWithPersonNumberInHouseholdGrid "d_mpno"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasSpouseWithPersonNumberInHouseholdGrid "https://www.understandingsociety.ac.uk/documentation/innovation-panel/dataset-documentation/wave/4/datafile/d_indresp_ip/variable/d_mpno"^^xsd:anyURI)
SubDataPropertyOf(:hasSpouseWithPersonNumberInHouseholdGrid :hasPartnerWithPersonNumberInHouseholdGrid)
DataPropertyDomain(:hasSpouseWithPersonNumberInHouseholdGrid :Person)
DataPropertyDomain(:hasSpouseWithPersonNumberInHouseholdGrid ObjectSomeValuesFrom(:hasSpouse DataSomeValuesFrom(:hasPersonNumberInHouseholdGrid xsd:nonNegativeInteger)))
DataPropertyRange(:hasSpouseWithPersonNumberInHouseholdGrid DataUnionOf(:proxy xsd:nonNegativeInteger))

# Data Property: :hasTakeHomePayAttribute (:hasTakeHomePayAttribute)

SubDataPropertyOf(:hasTakeHomePayAttribute :hasPersonalIncomeAttribute)

# Data Property: :hasTimeSpanForConsumption (:hasTimeSpanForConsumption)

SubDataPropertyOf(:hasTimeSpanForConsumption :hasTimeSpanValue)
DataPropertyDomain(:hasTimeSpanForConsumption :Consumption)
DataPropertyRange(:hasTimeSpanForConsumption xsd:nonNegativeInteger)

# Data Property: :hasTimeSpanForHouseholdIncome (:hasTimeSpanForHouseholdIncome)

SubDataPropertyOf(:hasTimeSpanForHouseholdIncome :hasTimeSpanForIncome)
DataPropertyDomain(:hasTimeSpanForHouseholdIncome :HouseholdIncome)
DataPropertyRange(:hasTimeSpanForHouseholdIncome xsd:negativeInteger)

# Data Property: :hasTimeSpanForHouseholdIncomeGrossMonthBeforeInterview (:hasTimeSpanForHouseholdIncomeGrossMonthBeforeInterview)

SubDataPropertyOf(:hasTimeSpanForHouseholdIncomeGrossMonthBeforeInterview :hasTimeSpanForHouseholdIncome)
DataPropertyDomain(:hasTimeSpanForHouseholdIncomeGrossMonthBeforeInterview :HouseholdIncomeGrossMonthBeforeInterview)
DataPropertyRange(:hasTimeSpanForHouseholdIncomeGrossMonthBeforeInterview xsd:negativeInteger)

# Data Property: :hasTimeSpanForHouseholdIncomeNetNoDeductions (:hasTimeSpanForHouseholdIncomeNetNoDeductions)

AnnotationAssertion(rdfs:comment :hasTimeSpanForHouseholdIncomeNetNoDeductions "d_indresp"^^xsd:string)
SubDataPropertyOf(:hasTimeSpanForHouseholdIncomeNetNoDeductions :hasTimeSpanForHouseholdIncome)
DataPropertyDomain(:hasTimeSpanForHouseholdIncomeNetNoDeductions :HouseholdIncomeNetNoDeductions)
DataPropertyRange(:hasTimeSpanForHouseholdIncomeNetNoDeductions xsd:negativeInteger)

# Data Property: :hasTimeSpanForIncome (:hasTimeSpanForIncome)

SubDataPropertyOf(:hasTimeSpanForIncome :hasTimeSpanValue)
DataPropertyDomain(:hasTimeSpanForIncome :Income)
DataPropertyRange(:hasTimeSpanForIncome xsd:nonNegativeInteger)

# Data Property: :hasTimeSpanForPersonalIncome (:hasTimeSpanForPersonalIncome)

SubDataPropertyOf(:hasTimeSpanForPersonalIncome :hasTimeSpanForIncome)
DataPropertyDomain(:hasTimeSpanForPersonalIncome :PersonalIncome)

# Data Property: :hasTimeSpanForSecondJobLatestGrossIncome (:hasTimeSpanForSecondJobLatestGrossIncome)

SubDataPropertyOf(:hasTimeSpanForSecondJobLatestGrossIncome :hasTimeSpanForPersonalIncome)
DataPropertyDomain(:hasTimeSpanForSecondJobLatestGrossIncome :LatestSecondJobIncome)
DataPropertyRange(:hasTimeSpanForSecondJobLatestGrossIncome xsd:nonNegativeInteger)

# Data Property: :hasTimeSpanForSelfEmployedIncome (:hasTimeSpanForSelfEmployedIncome)

SubDataPropertyOf(:hasTimeSpanForSelfEmployedIncome :hasTimeSpanForPersonalIncome)
DataPropertyDomain(:hasTimeSpanForSelfEmployedIncome :SelfEmployedIncome)
DataPropertyRange(:hasTimeSpanForSelfEmployedIncome xsd:nonNegativeInteger)

# Data Property: :hasTimeSpanForShareOfIncomeFromBenefitsAndIncomeNEC (:hasTimeSpanForShareOfIncomeFromBenefitsAndIncomeNEC)

SubDataPropertyOf(:hasTimeSpanForShareOfIncomeFromBenefitsAndIncomeNEC :hasTimeSpanForPersonalIncome)
DataPropertyDomain(:hasTimeSpanForShareOfIncomeFromBenefitsAndIncomeNEC :ShareOfIncomeFromBenefitsAndIncomeNEC)
DataPropertyRange(:hasTimeSpanForShareOfIncomeFromBenefitsAndIncomeNEC xsd:nonNegativeInteger)

# Data Property: :hasTimeSpanForTotalNetPersonalIncome (:hasTimeSpanForTotalNetPersonalIncome)

SubDataPropertyOf(:hasTimeSpanForTotalNetPersonalIncome :hasTimeSpanForPersonalIncome)
DataPropertyDomain(:hasTimeSpanForTotalNetPersonalIncome :TotalNetPersonalIncome)
DataPropertyRange(:hasTimeSpanForTotalNetPersonalIncome xsd:nonNegativeInteger)

# Data Property: :hasTimeSpanForTotalPersonalIncome (:hasTimeSpanForTotalPersonalIncome)

SubDataPropertyOf(:hasTimeSpanForTotalPersonalIncome :hasTimeSpanForIncome)
DataPropertyDomain(:hasTimeSpanForTotalPersonalIncome :TotalPersonalIncome)
DataPropertyRange(:hasTimeSpanForTotalPersonalIncome xsd:nonNegativeInteger)

# Data Property: :hasTimeSpanForUsualPayForSecondJob (:hasTimeSpanForUsualPayForSecondJob)

SubDataPropertyOf(:hasTimeSpanForUsualPayForSecondJob :hasTimeSpanForPersonalIncome)
DataPropertyDomain(:hasTimeSpanForUsualPayForSecondJob :UsualPayFromSecondJob)
DataPropertyRange(:hasTimeSpanForUsualPayForSecondJob xsd:nonNegativeInteger)

# Data Property: :hasTimeSpanValue (:hasTimeSpanValue)

DataPropertyDomain(:hasTimeSpanValue ObjectUnionOf(:Consumption :HouseholdWaste :Income :TravelTimeToWorkAndNotSelfEmployed))
DataPropertyRange(:hasTimeSpanValue xsd:nonNegativeInteger)

# Data Property: :hasTimeSpanValueForFoodAndDrinkConsumption (:hasTimeSpanValueForFoodAndDrinkConsumption)

SubDataPropertyOf(:hasTimeSpanValueForFoodAndDrinkConsumption :hasTimeSpanForConsumption)
DataPropertyDomain(:hasTimeSpanValueForFoodAndDrinkConsumption :FoodAndDrink)
DataPropertyRange(:hasTimeSpanValueForFoodAndDrinkConsumption xsd:nonNegativeInteger)

# Data Property: :hasTimeSpanValueForFuelCost (:hasTimeSpanValueForFuelCost)

SubDataPropertyOf(:hasTimeSpanValueForFuelCost :hasTimeSpanForConsumption)
DataPropertyDomain(:hasTimeSpanValueForFuelCost :ExternalPowerSupply)
DataPropertyRange(:hasTimeSpanValueForFuelCost xsd:nonNegativeInteger)

# Data Property: :hasTimeSpanValueForRecyclingOfGardenWaste (:hasTimeSpanValueForRecyclingOfGardenWaste)

SubDataPropertyOf(:hasTimeSpanValueForRecyclingOfGardenWaste :hasTimeSpanValueForRecyling)
DataPropertyDomain(:hasTimeSpanValueForRecyclingOfGardenWaste :GardenWaste)
DataPropertyRange(:hasTimeSpanValueForRecyclingOfGardenWaste xsd:nonNegativeInteger)

# Data Property: :hasTimeSpanValueForRecyclingOfPaper (:hasTimeSpanValueForRecyclingOfPaper)

SubDataPropertyOf(:hasTimeSpanValueForRecyclingOfPaper :hasTimeSpanValueForRecyling)
DataPropertyDomain(:hasTimeSpanValueForRecyclingOfPaper :WastePaper)
DataPropertyRange(:hasTimeSpanValueForRecyclingOfPaper xsd:nonNegativeInteger)

# Data Property: :hasTimeSpanValueForRecyclingOfPlasticBags (:hasTimeSpanValueForRecyclingOfPlasticBags)

SubDataPropertyOf(:hasTimeSpanValueForRecyclingOfPlasticBags :hasTimeSpanValueForRecyling)
DataPropertyDomain(:hasTimeSpanValueForRecyclingOfPlasticBags :WastePlasticBags)
DataPropertyRange(:hasTimeSpanValueForRecyclingOfPlasticBags xsd:nonNegativeInteger)

# Data Property: :hasTimeSpanValueForRecyling (:hasTimeSpanValueForRecyling)

SubDataPropertyOf(:hasTimeSpanValueForRecyling :hasTimeSpanValue)
DataPropertyDomain(:hasTimeSpanValueForRecyling :HouseholdWaste)
DataPropertyRange(:hasTimeSpanValueForRecyling xsd:nonNegativeInteger)

# Data Property: :hasTotalEarningsType (:hasTotalEarningsType)

AnnotationAssertion(rdfs:comment :hasTotalEarningsType "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTotalEarningsType "d_prearn"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasTotalEarningsType "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_prearn"^^:unknown)
SubDataPropertyOf(:hasTotalEarningsType :hasJobAttribute)
DataPropertyDomain(:hasTotalEarningsType :Person)
DataPropertyRange(:hasTotalEarningsType DataUnionOf(:missing :refused :unknown DataOneOf("answer in annual amount" "answer in weekly amount")))

# Data Property: :hasTotalMonthlyLabourIncomeValue (:hasTotalMonthlyLabourIncomeValue)

AnnotationAssertion(rdfs:comment :hasTotalMonthlyLabourIncomeValue "d_fimnlabgrs_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTotalMonthlyLabourIncomeValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTotalMonthlyLabourIncomeValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasTotalMonthlyLabourIncomeValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_fimnlabgrs_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasTotalMonthlyLabourIncomeValue :hasDerivedPersonalIncomeProperty)
SubDataPropertyOf(:hasTotalMonthlyLabourIncomeValue :hasPersonalIncomeAttribute)
DataPropertyDomain(:hasTotalMonthlyLabourIncomeValue :TotalMonthlyLabourIncome)
DataPropertyRange(:hasTotalMonthlyLabourIncomeValue xsd:decimal)

# Data Property: :hasTotalMonthlyPersonalIncomeValue (:hasTotalMonthlyPersonalIncomeValue)

AnnotationAssertion(rdfs:comment :hasTotalMonthlyPersonalIncomeValue "d_fimngrs_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTotalMonthlyPersonalIncomeValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTotalMonthlyPersonalIncomeValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasTotalMonthlyPersonalIncomeValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_fimngrs_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasTotalMonthlyPersonalIncomeValue :hasDerivedPersonalIncomeProperty)
SubDataPropertyOf(:hasTotalMonthlyPersonalIncomeValue :hasPersonalIncomeAttribute)
DataPropertyDomain(:hasTotalMonthlyPersonalIncomeValue :TotalMonthlyPersonalIncome)
DataPropertyRange(:hasTotalMonthlyPersonalIncomeValue xsd:decimal)

# Data Property: :hasTotalNetPersonalIncomeValue (:hasTotalNetPersonalIncomeValue)

AnnotationAssertion(rdfs:comment :hasTotalNetPersonalIncomeValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTotalNetPersonalIncomeValue "d_netinc1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTotalNetPersonalIncomeValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasTotalNetPersonalIncomeValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_netinc1"^^xsd:anyURI)
SubDataPropertyOf(:hasTotalNetPersonalIncomeValue :hasPersonalIncomeAttribute)
DataPropertyDomain(:hasTotalNetPersonalIncomeValue :TotalNetPersonalIncome)
DataPropertyRange(:hasTotalNetPersonalIncomeValue xsd:decimal)

# Data Property: :hasTotalPersonalIncomeValueType (:hasTotalPersonalIncomeValueType)

AnnotationAssertion(rdfs:comment :hasTotalPersonalIncomeValueType "d_prfitb"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasTotalPersonalIncomeValueType "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasTotalPersonalIncomeValueType "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_prfitb"^^xsd:anyURI)
SubDataPropertyOf(:hasTotalPersonalIncomeValueType :hasPersonAttribute)
DataPropertyDomain(:hasTotalPersonalIncomeValueType :Person)
DataPropertyRange(:hasTotalPersonalIncomeValueType DataUnionOf(:missing :refused :unknown DataOneOf("answer in annual amount" "answer in weekly amount")))

# Data Property: :hasUsualGrossPayPerMonthForPrimaryJobValue (:hasUsualGrossPayPerMonthForPrimaryJobValue)

AnnotationAssertion(rdfs:comment :hasUsualGrossPayPerMonthForPrimaryJobValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUsualGrossPayPerMonthForPrimaryJobValue "d_paygu_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUsualGrossPayPerMonthForPrimaryJobValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUsualGrossPayPerMonthForPrimaryJobValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_paygu_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasUsualGrossPayPerMonthForPrimaryJobValue :hasDerivedPersonalIncomeProperty)
SubDataPropertyOf(:hasUsualGrossPayPerMonthForPrimaryJobValue :hasUsualPayPerMonthForPrimaryJobValue)
DataPropertyDomain(:hasUsualGrossPayPerMonthForPrimaryJobValue :UsualGrossPayPerMonthForPrimaryJob)
DataPropertyRange(:hasUsualGrossPayPerMonthForPrimaryJobValue xsd:decimal)

# Data Property: :hasUsualGrossPayPerMonthIfSelfEmployedValue (:hasUsualGrossPayPerMonthIfSelfEmployedValue)

AnnotationAssertion(rdfs:comment :hasUsualGrossPayPerMonthIfSelfEmployedValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUsualGrossPayPerMonthIfSelfEmployedValue "d_searngrs_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUsualGrossPayPerMonthIfSelfEmployedValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUsualGrossPayPerMonthIfSelfEmployedValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_seearngrs_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasUsualGrossPayPerMonthIfSelfEmployedValue :hasDerivedPersonalIncomeProperty)
SubDataPropertyOf(:hasUsualGrossPayPerMonthIfSelfEmployedValue :hasUsualPayPerMonthIfSelfEmployedValue)
DataPropertyDomain(:hasUsualGrossPayPerMonthIfSelfEmployedValue :UsualGrossPayPerMonthForPrimaryJob)
DataPropertyRange(:hasUsualGrossPayPerMonthIfSelfEmployedValue xsd:decimal)

# Data Property: :hasUsualNetPayPerMonthForPrimaryJobValue (:hasUsualNetPayPerMonthForPrimaryJobValue)

AnnotationAssertion(rdfs:comment :hasUsualNetPayPerMonthForPrimaryJobValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUsualNetPayPerMonthForPrimaryJobValue "d_paynu_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUsualNetPayPerMonthForPrimaryJobValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUsualNetPayPerMonthForPrimaryJobValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_paynu_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasUsualNetPayPerMonthForPrimaryJobValue :hasDerivedPersonalIncomeProperty)
SubDataPropertyOf(:hasUsualNetPayPerMonthForPrimaryJobValue :hasUsualPayPerMonthForPrimaryJobValue)
DataPropertyDomain(:hasUsualNetPayPerMonthForPrimaryJobValue :UsualNetPayPerMonthForPrimaryJob)
DataPropertyRange(:hasUsualNetPayPerMonthForPrimaryJobValue xsd:decimal)

# Data Property: :hasUsualNetPayPerMonthIfSelfEmployedValue (:hasUsualNetPayPerMonthIfSelfEmployedValue)

AnnotationAssertion(rdfs:comment :hasUsualNetPayPerMonthIfSelfEmployedValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUsualNetPayPerMonthIfSelfEmployedValue "d_searnnet_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUsualNetPayPerMonthIfSelfEmployedValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUsualNetPayPerMonthIfSelfEmployedValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_seearnnet_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasUsualNetPayPerMonthIfSelfEmployedValue :hasDerivedPersonalIncomeProperty)
SubDataPropertyOf(:hasUsualNetPayPerMonthIfSelfEmployedValue :hasUsualPayPerMonthIfSelfEmployedValue)
DataPropertyDomain(:hasUsualNetPayPerMonthIfSelfEmployedValue :UsualNetPayPerMonthForPrimaryJob)
DataPropertyRange(:hasUsualNetPayPerMonthIfSelfEmployedValue xsd:decimal)

# Data Property: :hasUsualPayForSecondJobValue (:hasUsualPayForSecondJobValue)

AnnotationAssertion(rdfs:comment :hasUsualPayForSecondJobValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUsualPayForSecondJobValue "d_jb2pay_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUsualPayForSecondJobValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUsualPayForSecondJobValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jb2pay_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasUsualPayForSecondJobValue :hasDerivedPersonalIncomeProperty)
SubDataPropertyOf(:hasUsualPayForSecondJobValue :hasPersonalIncomeAttribute)
DataPropertyDomain(:hasUsualPayForSecondJobValue :UsualPayFromSecondJob)
DataPropertyRange(:hasUsualPayForSecondJobValue xsd:decimal)

# Data Property: :hasUsualPayPerMonthForPrimaryJobValue (:hasUsualPayPerMonthForPrimaryJobValue)

SubDataPropertyOf(:hasUsualPayPerMonthForPrimaryJobValue :hasPersonalIncomeAttribute)
DataPropertyDomain(:hasUsualPayPerMonthForPrimaryJobValue :UsualPayPerMonthForPrimaryJob)
DataPropertyRange(:hasUsualPayPerMonthForPrimaryJobValue xsd:decimal)

# Data Property: :hasUsualPayPerMonthIfSelfEmployedValue (:hasUsualPayPerMonthIfSelfEmployedValue)

SubDataPropertyOf(:hasUsualPayPerMonthIfSelfEmployedValue :hasPersonalIncomeAttribute)
DataPropertyDomain(:hasUsualPayPerMonthIfSelfEmployedValue :UsualPayPerMonthIfSelfEmployed)
DataPropertyRange(:hasUsualPayPerMonthIfSelfEmployedValue xsd:decimal)

# Data Property: :hasUsualTakeHomePayDeductionStatus (:hasUsualTakeHomePayDeductionStatus)

AnnotationAssertion(rdfs:comment :hasUsualTakeHomePayDeductionStatus "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUsualTakeHomePayDeductionStatus "d_payug"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUsualTakeHomePayDeductionStatus "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_payug"^^xsd:anyURI)
AnnotationAssertion(rdfs:seeAlso :hasUsualTakeHomePayDeductionStatus :isLatestTakeHomePayUsualAmount)
SubDataPropertyOf(:hasUsualTakeHomePayDeductionStatus :hasTakeHomePayAttribute)
DataPropertyDomain(:hasUsualTakeHomePayDeductionStatus DataHasValue(:isLatestTakeHomePayUsualAmount "true"^^xsd:boolean))
DataPropertyRange(:hasUsualTakeHomePayDeductionStatus DataUnionOf(:proxy :unknown DataOneOf("after deductions " "before deductions " "no deductions")))

# Data Property: :hasUsualTakeHomePayValue (:hasUsualTakeHomePayValue)

AnnotationAssertion(rdfs:comment :hasUsualTakeHomePayValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasUsualTakeHomePayValue "d_payu"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasUsualTakeHomePayValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_payu"^^xsd:anyURI)
AnnotationAssertion(rdfs:seeAlso :hasUsualTakeHomePayValue :isLatestTakeHomePayUsualAmount)
SubDataPropertyOf(:hasUsualTakeHomePayValue :hasTakeHomePayAttribute)
DataPropertyDomain(:hasUsualTakeHomePayValue :TakeHomePay)
DataPropertyRange(:hasUsualTakeHomePayValue DataUnionOf(:proxy :refused :unknown DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal)))

# Data Property: :hasValueForConsumption (:hasValueForConsumption)

DataPropertyDomain(:hasValueForConsumption :Consumption)
DataPropertyRange(:hasValueForConsumption xsd:decimal)

# Data Property: :hasWorkLocation (:hasWorkLocation)

SubDataPropertyOf(:hasWorkLocation :hasJobAttribute)
DataPropertyDomain(:hasWorkLocation :PersonInEmployment)
DataPropertyDomain(:hasWorkLocation ObjectSomeValuesFrom(:isEmployedOrSelfEmployedForPrimaryJob :FormOfEmployment))
DataPropertyRange(:hasWorkLocation DataUnionOf(:missing :unknown DataOneOf("at home " "at your employer's premises " "driving or travelling around " "or at one or more other places? " "spontaneous: other")))

# Data Property: :hasWorkLocationAndIsNotSelfEmployed (:hasWorkLocationAndIsNotSelfEmployed)

AnnotationAssertion(rdfs:comment :hasWorkLocationAndIsNotSelfEmployed "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasWorkLocationAndIsNotSelfEmployed "d_jbpl"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasWorkLocationAndIsNotSelfEmployed "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbpl"^^xsd:anyURI)
SubDataPropertyOf(:hasWorkLocationAndIsNotSelfEmployed :hasWorkLocation)
DataPropertyDomain(:hasWorkLocationAndIsNotSelfEmployed ObjectSomeValuesFrom(:isEmployedOrSelfEmployedForPrimaryJob :NotSelfEmployed))
DataPropertyRange(:hasWorkLocationAndIsNotSelfEmployed DataUnionOf(:missing :unknown DataOneOf("at home " "at your employer's premises " "driving or travelling around " "or at one or more other places? " "spontaneous: other")))

# Data Property: :hasWorkLocationAndIsSelfEmployed (:hasWorkLocationAndIsSelfEmployed)

AnnotationAssertion(rdfs:comment :hasWorkLocationAndIsSelfEmployed "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasWorkLocationAndIsSelfEmployed "d_jspl"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasWorkLocationAndIsSelfEmployed "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jspl"^^xsd:anyURI)
SubDataPropertyOf(:hasWorkLocationAndIsSelfEmployed :hasWorkLocation)
DataPropertyDomain(:hasWorkLocationAndIsSelfEmployed ObjectSomeValuesFrom(:isEmployedOrSelfEmployedForPrimaryJob :SelfEmployed))
DataPropertyRange(:hasWorkLocationAndIsSelfEmployed DataUnionOf(:missing :unknown DataOneOf("at home" "driving or travelling around" "from a van or stall" "from client's or customer's premises" "from separate business premises" "from your own home" "or from some other place")))

# Data Property: :hasYearlyIncomeFromInvestmentsAndSavingsValue (:hasYearlyIncomeFromInvestmentsAndSavingsValue)

AnnotationAssertion(rdfs:comment :hasYearlyIncomeFromInvestmentsAndSavingsValue "d_fiyrinvinc_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasYearlyIncomeFromInvestmentsAndSavingsValue "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasYearlyIncomeFromInvestmentsAndSavingsValue "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasYearlyIncomeFromInvestmentsAndSavingsValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_fiyrinvinc_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasYearlyIncomeFromInvestmentsAndSavingsValue :hasDerivedPersonalIncomeProperty)
SubDataPropertyOf(:hasYearlyIncomeFromInvestmentsAndSavingsValue :hasPersonalIncomeAttribute)
DataPropertyDomain(:hasYearlyIncomeFromInvestmentsAndSavingsValue :YearlyIncomeFromInvestmentsAndSavings)
DataPropertyRange(:hasYearlyIncomeFromInvestmentsAndSavingsValue xsd:decimal)

# Data Property: :hasYoungestChildValueInYears (:hasYoungestChildValueInYears)

AnnotationAssertion(rdfs:comment :hasYoungestChildValueInYears "d_agechy_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasYoungestChildValueInYears "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasYoungestChildValueInYears "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :hasYoungestChildValueInYears "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_agechy_dv"^^xsd:anyURI)
SubDataPropertyOf(:hasYoungestChildValueInYears :hasAgeValueInYears)
DataPropertyDomain(:hasYoungestChildValueInYears :YoungestChild)
DataPropertyRange(:hasYoungestChildValueInYears DatatypeRestriction(xsd:nonNegativeInteger xsd:maxInclusive "16"^^xsd:nonNegativeInteger))

# Data Property: :howCurrentlyFeelsAboutLifestyleAndEnvironment (:howCurrentlyFeelsAboutLifestyleAndEnvironment)

AnnotationAssertion(rdfs:comment :howCurrentlyFeelsAboutLifestyleAndEnvironment "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :howCurrentlyFeelsAboutLifestyleAndEnvironment "d_scenv_ftst"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :howCurrentlyFeelsAboutLifestyleAndEnvironment "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_scenv_ftst"^^xsd:anyURI)
SubDataPropertyOf(:howCurrentlyFeelsAboutLifestyleAndEnvironment :hasEnvironmentalBeliefs)
DataPropertyDomain(:howCurrentlyFeelsAboutLifestyleAndEnvironment :Person)
DataPropertyRange(:howCurrentlyFeelsAboutLifestyleAndEnvironment DataUnionOf(:missing :proxy :refused :unknown DataOneOf("happy with what i do" "like to do bit more" "like to do lots more")))

# Data Property: :isAsleepWithin30Minutes (:isAsleepWithin30Minutes)

AnnotationAssertion(rdfs:comment :isAsleepWithin30Minutes "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isAsleepWithin30Minutes "d_sctslp_30m"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isAsleepWithin30Minutes "https://www.understandingsociety.ac.uk/documentation/innovation-panel/dataset-documentation/wave/4/datafile/d_indresp_ip/variable/d_sctslp_30m"^^xsd:anyURI)
SubDataPropertyOf(:isAsleepWithin30Minutes :hasSleepAttribute)
DataPropertyDomain(:isAsleepWithin30Minutes :Person)
DataPropertyRange(:isAsleepWithin30Minutes xsd:string)
DataPropertyRange(:isAsleepWithin30Minutes DataOneOf("less than once a week " "more than once most nights" "not during the past month " "once or twice a week " "three or more times a week "))

# Data Property: :isCloserToOnePoliticalParty (:isCloserToOnePoliticalParty)

AnnotationAssertion(rdfs:comment :isCloserToOnePoliticalParty "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isCloserToOnePoliticalParty "d_vote2"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isCloserToOnePoliticalParty "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_vote2"^^xsd:anyURI)
SubDataPropertyOf(:isCloserToOnePoliticalParty :hasPoliticalAttribute)
DataPropertyDomain(:isCloserToOnePoliticalParty :Person)
DataPropertyRange(:isCloserToOnePoliticalParty DataUnionOf(:missing :proxy :refused :unknown xsd:boolean))

# Data Property: :isDistanceFromWork (:isDistanceFromWork)

AnnotationAssertion(rdfs:comment :isDistanceFromWork "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isDistanceFromWork "d_workdis"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isDistanceFromWork "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_workdis"^^xsd:anyURI)
SubDataPropertyOf(:isDistanceFromWork :hasJobAttribute)
DataPropertyDomain(:isDistanceFromWork :Person)
DataPropertyDomain(:isDistanceFromWork ObjectUnionOf(ObjectIntersectionOf(ObjectUnionOf(DataHasValue(:hasWorkLocationAndIsNotSelfEmployed "at your employer's premises ") DataHasValue(:hasWorkLocationAndIsNotSelfEmployed "driving or travelling around ") DataHasValue(:hasWorkLocationAndIsNotSelfEmployed "or at one or more other places? ") DataHasValue(:hasWorkLocationAndIsNotSelfEmployed "spontaneous: other")) ObjectSomeValuesFrom(:isEmployedOrSelfEmployed :NotSelfEmployed)) ObjectIntersectionOf(ObjectUnionOf(DataHasValue(:hasWorkLocationAndIsSelfEmployed "driving or travelling around") DataHasValue(:hasWorkLocationAndIsSelfEmployed "from a van or stall") DataHasValue(:hasWorkLocationAndIsSelfEmployed "from client's or customer's premises") DataHasValue(:hasWorkLocationAndIsSelfEmployed "from separate business premises") DataHasValue(:hasWorkLocationAndIsSelfEmployed "or from some other place")) ObjectSomeValuesFrom(:isEmployedOrSelfEmployed :SelfEmployed))))
DataPropertyRange(:isDistanceFromWork DataUnionOf(:missing :proxy :refused :unknown DatatypeRestriction(xsd:decimal xsd:minExclusive "0"^^xsd:decimal)))

# Data Property: :isImputed (:isImputed)

DataPropertyDomain(:isImputed ObjectUnionOf(:HouseholdIncomeGrossMonthBeforeInterview :MonthlyPersonalIncome :ShareOfIncomeFromBenefitsAndIncomeNEC :TotalMonthlyLabourIncome :UsualGrossPayPerMonthForPrimaryJob :UsualGrossPayPerMonthIfSelfEmployed :UsualNetPayPerMonthForPrimaryJob :UsualPayFromSecondJob :YearlyIncomeFromInvestmentsAndSavings))
DataPropertyRange(:isImputed xsd:boolean)

# Data Property: :isImputedForHouseholdIncome (:isImputedForHouseholdIncome)

SubDataPropertyOf(:isImputedForHouseholdIncome :isImputedForIncome)
DataPropertyDomain(:isImputedForHouseholdIncome :HouseholdIncomeGrossMonthBeforeInterview)
DataPropertyRange(:isImputedForHouseholdIncome xsd:boolean)

# Data Property: :isImputedForHouseholdIncomeGrossMonthBeforeInterview (:isImputedForHouseholdIncomeGrossMonthBeforeInterview)

AnnotationAssertion(rdfs:comment :isImputedForHouseholdIncomeGrossMonthBeforeInterview "d_fihhmngrs_if")
AnnotationAssertion(rdfs:comment :isImputedForHouseholdIncomeGrossMonthBeforeInterview "d_hhresp")
AnnotationAssertion(rdfs:isDefinedBy :isImputedForHouseholdIncomeGrossMonthBeforeInterview "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_fihhmngrs_if"^^xsd:anyURI)
SubDataPropertyOf(:isImputedForHouseholdIncomeGrossMonthBeforeInterview :isImputedForHouseholdIncome)
DataPropertyDomain(:isImputedForHouseholdIncomeGrossMonthBeforeInterview :HouseholdIncomeGrossMonthBeforeInterview)
DataPropertyRange(:isImputedForHouseholdIncomeGrossMonthBeforeInterview xsd:boolean)

# Data Property: :isImputedForIncome (:isImputedForIncome)

SubDataPropertyOf(:isImputedForIncome :isImputed)
DataPropertyDomain(:isImputedForIncome ObjectUnionOf(:HouseholdIncomeGrossMonthBeforeInterview :MonthlyPersonalIncome :ShareOfIncomeFromBenefitsAndIncomeNEC :TotalMonthlyLabourIncome :UsualGrossPayPerMonthForPrimaryJob :UsualGrossPayPerMonthIfSelfEmployed :UsualNetPayPerMonthForPrimaryJob :UsualPayFromSecondJob :YearlyIncomeFromInvestmentsAndSavings))
DataPropertyRange(:isImputedForIncome xsd:boolean)

# Data Property: :isImputedForPersonalIncome (:isImputedForPersonalIncome)

SubDataPropertyOf(:isImputedForPersonalIncome :isImputedForIncome)
DataPropertyDomain(:isImputedForPersonalIncome ObjectUnionOf(:MonthlyPersonalIncome :ShareOfIncomeFromBenefitsAndIncomeNEC :TotalMonthlyLabourIncome :UsualGrossPayPerMonthForPrimaryJob :UsualGrossPayPerMonthIfSelfEmployed :UsualNetPayPerMonthForPrimaryJob :UsualPayFromSecondJob :YearlyIncomeFromInvestmentsAndSavings))
DataPropertyRange(:isImputedForPersonalIncome xsd:boolean)

# Data Property: :isImputedForShareOfIncomeFromBenefitsAndIncomeNEC (:isImputedForShareOfIncomeFromBenefitsAndIncomeNEC)

AnnotationAssertion(rdfs:comment :isImputedForShareOfIncomeFromBenefitsAndIncomeNEC "d_fibenothr_if"^^xsd:string)
AnnotationAssertion(rdfs:comment :isImputedForShareOfIncomeFromBenefitsAndIncomeNEC "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isImputedForShareOfIncomeFromBenefitsAndIncomeNEC "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_fibenothr_if"^^xsd:anyURI)
SubDataPropertyOf(:isImputedForShareOfIncomeFromBenefitsAndIncomeNEC :isImputedForPersonalIncome)
DataPropertyDomain(:isImputedForShareOfIncomeFromBenefitsAndIncomeNEC :ShareOfIncomeFromBenefitsAndIncomeNEC)
DataPropertyRange(:isImputedForShareOfIncomeFromBenefitsAndIncomeNEC xsd:boolean)

# Data Property: :isImputedForTotalMonthlyLabourIncome (:isImputedForTotalMonthlyLabourIncome)

AnnotationAssertion(rdfs:comment :isImputedForTotalMonthlyLabourIncome "d_fimnlabgrs_if"^^xsd:string)
AnnotationAssertion(rdfs:comment :isImputedForTotalMonthlyLabourIncome "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isImputedForTotalMonthlyLabourIncome "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_fimnlabgrs_if"^^xsd:anyURI)
SubDataPropertyOf(:isImputedForTotalMonthlyLabourIncome :isImputedForPersonalIncome)
DataPropertyDomain(:isImputedForTotalMonthlyLabourIncome :TotalMonthlyLabourIncome)
DataPropertyRange(:isImputedForTotalMonthlyLabourIncome xsd:boolean)

# Data Property: :isImputedForTotalMonthlyPersonalIncome (:isImputedForTotalMonthlyPersonalIncome)

AnnotationAssertion(rdfs:comment :isImputedForTotalMonthlyPersonalIncome "d_fimngrs_if"^^xsd:string)
AnnotationAssertion(rdfs:comment :isImputedForTotalMonthlyPersonalIncome "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isImputedForTotalMonthlyPersonalIncome "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_fimngrs_if"^^xsd:anyURI)
SubDataPropertyOf(:isImputedForTotalMonthlyPersonalIncome :isImputedForPersonalIncome)
DataPropertyDomain(:isImputedForTotalMonthlyPersonalIncome :TotalMonthlyPersonalIncome)
DataPropertyRange(:isImputedForTotalMonthlyPersonalIncome xsd:boolean)

# Data Property: :isImputedForUsualGrossPayPerMonthForPrimaryJob (:isImputedForUsualGrossPayPerMonthForPrimaryJob)

AnnotationAssertion(rdfs:comment :isImputedForUsualGrossPayPerMonthForPrimaryJob "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isImputedForUsualGrossPayPerMonthForPrimaryJob "d_paygu_if"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isImputedForUsualGrossPayPerMonthForPrimaryJob "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_paygu_if"^^xsd:anyURI)
SubDataPropertyOf(:isImputedForUsualGrossPayPerMonthForPrimaryJob :isImputedForPersonalIncome)
DataPropertyDomain(:isImputedForUsualGrossPayPerMonthForPrimaryJob :UsualGrossPayPerMonthForPrimaryJob)
DataPropertyRange(:isImputedForUsualGrossPayPerMonthForPrimaryJob xsd:boolean)

# Data Property: :isImputedForUsualGrossPayPerMonthIfSelfEmployed (:isImputedForUsualGrossPayPerMonthIfSelfEmployed)

AnnotationAssertion(rdfs:comment :isImputedForUsualGrossPayPerMonthIfSelfEmployed "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isImputedForUsualGrossPayPerMonthIfSelfEmployed "d_searngrs_if"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isImputedForUsualGrossPayPerMonthIfSelfEmployed "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_seearngrs_if"^^xsd:anyURI)
SubDataPropertyOf(:isImputedForUsualGrossPayPerMonthIfSelfEmployed :isImputedForPersonalIncome)
DataPropertyDomain(:isImputedForUsualGrossPayPerMonthIfSelfEmployed :UsualGrossPayPerMonthForPrimaryJob)
DataPropertyRange(:isImputedForUsualGrossPayPerMonthIfSelfEmployed xsd:boolean)

# Data Property: :isImputedForUsualNetPayPerMonth (:isImputedForUsualNetPayPerMonth)

AnnotationAssertion(rdfs:comment :isImputedForUsualNetPayPerMonth "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isImputedForUsualNetPayPerMonth "d_paynu_if"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isImputedForUsualNetPayPerMonth "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_paynu_if"^^xsd:anyURI)
SubDataPropertyOf(:isImputedForUsualNetPayPerMonth :isImputedForPersonalIncome)
DataPropertyDomain(:isImputedForUsualNetPayPerMonth :UsualNetPayPerMonthForPrimaryJob)
DataPropertyRange(:isImputedForUsualNetPayPerMonth xsd:boolean)

# Data Property: :isImputedForUsualPayFromSecondJob (:isImputedForUsualPayFromSecondJob)

AnnotationAssertion(rdfs:comment :isImputedForUsualPayFromSecondJob "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isImputedForUsualPayFromSecondJob "d_jb2pay_if"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isImputedForUsualPayFromSecondJob "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jb2pay_if"^^xsd:anyURI)
SubDataPropertyOf(:isImputedForUsualPayFromSecondJob :isImputedForPersonalIncome)
DataPropertyDomain(:isImputedForUsualPayFromSecondJob :UsualPayFromSecondJob)
DataPropertyRange(:isImputedForUsualPayFromSecondJob xsd:boolean)

# Data Property: :isImputedForYearlyIncomeFromInvestmentsAndSavings (:isImputedForYearlyIncomeFromInvestmentsAndSavings)

AnnotationAssertion(rdfs:comment :isImputedForYearlyIncomeFromInvestmentsAndSavings "d_fiyrinvinc_if"^^xsd:string)
AnnotationAssertion(rdfs:comment :isImputedForYearlyIncomeFromInvestmentsAndSavings "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isImputedForYearlyIncomeFromInvestmentsAndSavings "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_fiyrinvinc_if"^^xsd:anyURI)
SubDataPropertyOf(:isImputedForYearlyIncomeFromInvestmentsAndSavings :isImputedForPersonalIncome)
DataPropertyDomain(:isImputedForYearlyIncomeFromInvestmentsAndSavings :YearlyIncomeFromInvestmentsAndSavings)
DataPropertyRange(:isImputedForYearlyIncomeFromInvestmentsAndSavings xsd:boolean)

# Data Property: :isLatestTakeHomePayUsualAmount (:isLatestTakeHomePayUsualAmount)

AnnotationAssertion(rdfs:comment :isLatestTakeHomePayUsualAmount "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isLatestTakeHomePayUsualAmount "d_payusl"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isLatestTakeHomePayUsualAmount "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_payusl"^^xsd:anyURI)
AnnotationAssertion(rdfs:seeAlso :isLatestTakeHomePayUsualAmount :hasLatestTakeHomePayGrossValue)
AnnotationAssertion(rdfs:seeAlso :isLatestTakeHomePayUsualAmount :hasLatestTakeHomePayNetValue)
SubDataPropertyOf(:isLatestTakeHomePayUsualAmount :hasTakeHomePayAttribute)
DataPropertyDomain(:isLatestTakeHomePayUsualAmount :TakeHomePay)
DataPropertyRange(:isLatestTakeHomePayUsualAmount DataUnionOf(:proxy :refused :unknown xsd:boolean))

# Data Property: :isLoneParent (:isLoneParent)

SubDataPropertyOf(:isLoneParent :hasPersonAttribute)
DataPropertyDomain(:isLoneParent :Person)
DataPropertyRange(:isLoneParent xsd:boolean)

# Data Property: :isSingleInHousehold (:isSingleInHousehold)

AnnotationAssertion(rdfs:comment :isSingleInHousehold "Missing:

d_relationship_dv 
d_apno 
d_egoalt"^^xsd:string)
AnnotationAssertion(rdfs:comment :isSingleInHousehold "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isSingleInHousehold "d_single_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :isSingleInHousehold "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isSingleInHousehold "https://www.understandingsociety.ac.uk/documentation/innovation-panel/dataset-documentation/wave/4/datafile/d_indall_ip/variable/d_single_dv"^^xsd:anyURI)
SubDataPropertyOf(:isSingleInHousehold :hasPersonAttribute)
DataPropertyDomain(:isSingleInHousehold :Person)
DataPropertyDomain(:isSingleInHousehold ObjectSomeValuesFrom(:isResident :SingleAdult))
DataPropertyRange(:isSingleInHousehold xsd:boolean)

# Data Property: :isUrban (:isUrban)

AnnotationAssertion(rdfs:comment :isUrban "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :isUrban "d_urban_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :isUrban "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :isUrban "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_urban_dv"^^xsd:anyURI)
SubDataPropertyOf(:isUrban :hasHouseholdAttribute)
DataPropertyDomain(:isUrban :Household)
DataPropertyRange(:isUrban DataUnionOf(:missing DataOneOf("rural area" "urban area")))

# Data Property: :leavesTVOnStandyForTheNight (:leavesTVOnStandyForTheNight)

AnnotationAssertion(rdfs:comment :leavesTVOnStandyForTheNight "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :leavesTVOnStandyForTheNight "e_envhabit1"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :leavesTVOnStandyForTheNight "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_envhabit1"^^xsd:anyURI)
SubDataPropertyOf(:leavesTVOnStandyForTheNight :hasEnvironmentalHabit)
DataPropertyDomain(:leavesTVOnStandyForTheNight :Person)
DataPropertyRange(:leavesTVOnStandyForTheNight DataUnionOf(:missing :proxy :refused :unknown DataOneOf("always" "n/a, can't do this" "never" "not very often" "quite often" "very often")))

# Data Property: :livesAsCoupleInHousehold (:livesAsCoupleInHousehold)

AnnotationAssertion(rdfs:comment :livesAsCoupleInHousehold "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :livesAsCoupleInHousehold "d_livewith"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :livesAsCoupleInHousehold "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_livewith"^^xsd:anyURI)
SubDataPropertyOf(:livesAsCoupleInHousehold :livesWithInHousehold)
DataPropertyDomain(:livesAsCoupleInHousehold :Person)
DataPropertyDomain(:livesAsCoupleInHousehold ObjectUnionOf(DataHasValue(:hasLegalMarriageStatus "divorced") DataHasValue(:hasLegalMarriageStatus "separated legally married") DataHasValue(:hasLegalMarriageStatus "single, nvr marr/civ p") DataHasValue(:hasLegalMarriageStatus "widowed")))
DataPropertyDomain(:livesAsCoupleInHousehold ObjectSomeValuesFrom(:isResident ObjectMinCardinality(2 :hasResident :Person)))
DataPropertyDomain(:livesAsCoupleInHousehold DataSomeValuesFrom(:hasAgeValueInYears DatatypeRestriction(xsd:nonNegativeInteger xsd:minInclusive "16"^^xsd:nonNegativeInteger)))
DataPropertyDomain(:livesAsCoupleInHousehold DataHasValue(:livesAsSpouseInHousehold "false"^^xsd:boolean))
DataPropertyRange(:livesAsCoupleInHousehold DataUnionOf(:proxy :refused :unknown xsd:boolean))

# Data Property: :livesAsSpouseInHousehold (:livesAsSpouseInHousehold)

AnnotationAssertion(rdfs:comment :livesAsSpouseInHousehold "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :livesAsSpouseInHousehold "d_livesp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :livesAsSpouseInHousehold "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_livesp"^^xsd:anyURI)
SubDataPropertyOf(:livesAsSpouseInHousehold :livesWithInHousehold)
DataPropertyDomain(:livesAsSpouseInHousehold :Person)
DataPropertyDomain(:livesAsSpouseInHousehold ObjectUnionOf(DataHasValue(:hasLegalMarriageStatus "civil partner (legal)") DataHasValue(:hasLegalMarriageStatus "married")))
DataPropertyDomain(:livesAsSpouseInHousehold ObjectSomeValuesFrom(:isResident ObjectMinCardinality(2 :hasResident :Person)))
DataPropertyDomain(:livesAsSpouseInHousehold DataSomeValuesFrom(:hasAgeValueInYears DatatypeRestriction(xsd:nonNegativeInteger xsd:minInclusive "16"^^xsd:nonNegativeInteger)))
DataPropertyRange(:livesAsSpouseInHousehold DataUnionOf(:proxy :refused :unknown xsd:boolean))

# Data Property: :livesWithCohabiteeInHousehold (:livesWithCohabiteeInHousehold)

AnnotationAssertion(rdfs:comment :livesWithCohabiteeInHousehold "d_cohab_dv"^^xsd:string)
AnnotationAssertion(rdfs:comment :livesWithCohabiteeInHousehold "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :livesWithCohabiteeInHousehold "derived"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :livesWithCohabiteeInHousehold "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indall/variable/d_cohab_dv"^^xsd:anyURI)
SubDataPropertyOf(:livesWithCohabiteeInHousehold :livesWithInHousehold)
DataPropertyDomain(:livesWithCohabiteeInHousehold :Person)
DataPropertyDomain(:livesWithCohabiteeInHousehold ObjectSomeValuesFrom(:hasPartner ObjectSomeValuesFrom(:isResident ObjectSomeValuesFrom(:hasResident ObjectSomeValuesFrom(:hasPartner :Adult)))))
DataPropertyRange(:livesWithCohabiteeInHousehold xsd:boolean)

# Data Property: :livesWithInHousehold (:livesWithInHousehold)

SubDataPropertyOf(:livesWithInHousehold :hasPersonAttribute)
DataPropertyDomain(:livesWithInHousehold :Person)
DataPropertyRange(:livesWithInHousehold DataUnionOf(:proxy :refused :unknown xsd:boolean))

# Data Property: :livesWithSpouseInHousehold (:livesWithSpouseInHousehold)

AnnotationAssertion(rdfs:comment :livesWithSpouseInHousehold "Missing:

d_relationship_dv
d_egoalt"^^xsd:string)
AnnotationAssertion(rdfs:comment :livesWithSpouseInHousehold "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :livesWithSpouseInHousehold "d_livesp_dv"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :livesWithSpouseInHousehold "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indall/variable/d_livesp_dv"^^xsd:anyURI)
SubDataPropertyOf(:livesWithSpouseInHousehold :livesAsSpouseInHousehold)
FunctionalDataProperty(:livesWithSpouseInHousehold)
DataPropertyDomain(:livesWithSpouseInHousehold :Person)
DataPropertyDomain(:livesWithSpouseInHousehold ObjectSomeValuesFrom(:hasSpouse ObjectSomeValuesFrom(:isResident ObjectSomeValuesFrom(:hasResident ObjectSomeValuesFrom(:hasSpouse :Adult)))))
DataPropertyRange(:livesWithSpouseInHousehold xsd:boolean)

# Data Property: :movedToCurrentAddressOnDate (:movedToCurrentAddressOnDate)

AnnotationAssertion(rdfs:comment :movedToCurrentAddressOnDate "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :movedToCurrentAddressOnDate "d_mvyr"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :movedToCurrentAddressOnDate "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_mvyr"^^xsd:anyURI)
SubDataPropertyOf(:movedToCurrentAddressOnDate :hasPersonAttribute)
FunctionalDataProperty(:movedToCurrentAddressOnDate)
DataPropertyDomain(:movedToCurrentAddressOnDate :Person)
DataPropertyRange(:movedToCurrentAddressOnDate xsd:dateTime)

# Data Property: :neverWentToSchool (:neverWentToSchool)

AnnotationAssertion(rdfs:comment :neverWentToSchool "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :neverWentToSchool "d_school"^^xsd:string)
AnnotationAssertion(rdfs:comment :neverWentToSchool "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_school"^^xsd:string)
SubDataPropertyOf(:neverWentToSchool :hasPersonAttribute)
DataPropertyDomain(:neverWentToSchool :Person)
DataPropertyRange(:neverWentToSchool DataUnionOf(xsd:nonNegativeInteger DataOneOf("never went to school" "still at school")))

# Data Property: :numberOfMinutesToTravelToWork (:numberOfMinutesToTravelToWork)

SubDataPropertyOf(:numberOfMinutesToTravelToWork :hasTimeSpanValue)
DataPropertyRange(:numberOfMinutesToTravelToWork DataUnionOf(:missing :proxy :refused :unknown xsd:nonNegativeInteger))

# Data Property: :numberOfMinutesToTravelToWorkAndNotSelfEmployed (:numberOfMinutesToTravelToWorkAndNotSelfEmployed)

AnnotationAssertion(rdfs:comment :numberOfMinutesToTravelToWorkAndNotSelfEmployed "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :numberOfMinutesToTravelToWorkAndNotSelfEmployed "d_jbttwt"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :numberOfMinutesToTravelToWorkAndNotSelfEmployed "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbttwt"^^xsd:anyURI)
SubDataPropertyOf(:numberOfMinutesToTravelToWorkAndNotSelfEmployed :numberOfMinutesToTravelToWork)
DataPropertyDomain(:numberOfMinutesToTravelToWorkAndNotSelfEmployed :TravelTimeToWorkAndNotSelfEmployed)
DataPropertyRange(:numberOfMinutesToTravelToWorkAndNotSelfEmployed DataUnionOf(:missing :proxy :refused :unknown xsd:nonNegativeInteger))

# Data Property: :numberOfMinutesToTravelToWorkAndSelfEmployed (:numberOfMinutesToTravelToWorkAndSelfEmployed)

AnnotationAssertion(rdfs:comment :numberOfMinutesToTravelToWorkAndSelfEmployed "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :numberOfMinutesToTravelToWorkAndSelfEmployed "j_jsttwtb"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :numberOfMinutesToTravelToWorkAndSelfEmployed "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jsttwtb"^^xsd:anyURI)
SubDataPropertyOf(:numberOfMinutesToTravelToWorkAndSelfEmployed :numberOfMinutesToTravelToWork)
DataPropertyDomain(:numberOfMinutesToTravelToWorkAndSelfEmployed :TravelTimeToWorkAndSelfEmployed)
DataPropertyRange(:numberOfMinutesToTravelToWorkAndSelfEmployed DataUnionOf(:missing :proxy :refused :unknown xsd:nonNegativeInteger))

# Data Property: :numberOfMinutesToTravelToWorkProvidedAndSelfEmployed (:numberOfMinutesToTravelToWorkProvidedAndSelfEmployed)

AnnotationAssertion(rdfs:comment :numberOfMinutesToTravelToWorkProvidedAndSelfEmployed "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :numberOfMinutesToTravelToWorkProvidedAndSelfEmployed "d_jsttwt"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :numberOfMinutesToTravelToWorkProvidedAndSelfEmployed "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jsttwt"^^xsd:anyURI)
SubDataPropertyOf(:numberOfMinutesToTravelToWorkProvidedAndSelfEmployed :hasPersonAttribute)
DataPropertyDomain(:numberOfMinutesToTravelToWorkProvidedAndSelfEmployed :Person)
DataPropertyDomain(:numberOfMinutesToTravelToWorkProvidedAndSelfEmployed ObjectSomeValuesFrom(:isEmployedOrSelfEmployed :SelfEmployed))
DataPropertyRange(:numberOfMinutesToTravelToWorkProvidedAndSelfEmployed DataUnionOf(:missing :proxy :refused :unknown DataOneOf("write in num")))

# Data Property: :putsOnMoreClothesRatherThanTurnUpHeating (:putsOnMoreClothesRatherThanTurnUpHeating)

AnnotationAssertion(rdfs:comment :putsOnMoreClothesRatherThanTurnUpHeating "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :putsOnMoreClothesRatherThanTurnUpHeating "e_envhabit4"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :putsOnMoreClothesRatherThanTurnUpHeating "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_envhabit4"^^xsd:anyURI)
SubDataPropertyOf(:putsOnMoreClothesRatherThanTurnUpHeating :hasEnvironmentalHabit)
DataPropertyDomain(:putsOnMoreClothesRatherThanTurnUpHeating :Person)
DataPropertyRange(:putsOnMoreClothesRatherThanTurnUpHeating DataUnionOf(:missing :proxy :refused :unknown DataOneOf("always" "n/a, can't do this" "never" "not very often" "quite often" "very often")))

# Data Property: :recyclesGardenWasteWithFrequencyValue (:recyclesGardenWasteWithFrequencyValue)

AnnotationAssertion(rdfs:comment :recyclesGardenWasteWithFrequencyValue "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :recyclesGardenWasteWithFrequencyValue "d_othrec4")
AnnotationAssertion(rdfs:isDefinedBy :recyclesGardenWasteWithFrequencyValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_othrec4"^^xsd:anyURI)
SubDataPropertyOf(:recyclesGardenWasteWithFrequencyValue :recyclesWithFrequencyValue)
DataPropertyDomain(:recyclesGardenWasteWithFrequencyValue :Household)
DataPropertyRange(:recyclesGardenWasteWithFrequencyValue DataOneOf("fairly often" "never" "no recycling in area" "not very often" "very often"))

# Data Property: :recyclesGlassBottlesWithFrequencyValue (:recyclesGlassBottlesWithFrequencyValue)

AnnotationAssertion(rdfs:comment :recyclesGlassBottlesWithFrequencyValue "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :recyclesGlassBottlesWithFrequencyValue "d_othrec1")
AnnotationAssertion(rdfs:isDefinedBy :recyclesGlassBottlesWithFrequencyValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_othrec1"^^xsd:anyURI)
SubDataPropertyOf(:recyclesGlassBottlesWithFrequencyValue :recyclesWithFrequencyValue)
DataPropertyDomain(:recyclesGlassBottlesWithFrequencyValue :Household)
DataPropertyRange(:recyclesGlassBottlesWithFrequencyValue DataOneOf("fairly often" "never" "no recycling in area" "not very often" "very often"))

# Data Property: :recyclesPaperWithFrequencyValue (:recyclesPaperWithFrequencyValue)

AnnotationAssertion(rdfs:comment :recyclesPaperWithFrequencyValue "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :recyclesPaperWithFrequencyValue "d_othrec2")
AnnotationAssertion(rdfs:isDefinedBy :recyclesPaperWithFrequencyValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_othrec2"^^xsd:anyURI)
SubDataPropertyOf(:recyclesPaperWithFrequencyValue :recyclesWithFrequencyValue)
DataPropertyDomain(:recyclesPaperWithFrequencyValue :Household)
DataPropertyRange(:recyclesPaperWithFrequencyValue DataOneOf("fairly often" "never" "no recycling in area" "not very often" "very often"))

# Data Property: :recyclesPlasticBagsWithFrequencyValue (:recyclesPlasticBagsWithFrequencyValue)

AnnotationAssertion(rdfs:comment :recyclesPlasticBagsWithFrequencyValue "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :recyclesPlasticBagsWithFrequencyValue "d_othrec3"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :recyclesPlasticBagsWithFrequencyValue "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_othrec3"^^xsd:anyURI)
SubDataPropertyOf(:recyclesPlasticBagsWithFrequencyValue :recyclesWithFrequencyValue)
DataPropertyDomain(:recyclesPlasticBagsWithFrequencyValue :Household)
DataPropertyRange(:recyclesPlasticBagsWithFrequencyValue DataOneOf("fairly often" "never" "no recycling in area" "not very often" "very often"))

# Data Property: :recyclesWithFrequencyValue (:recyclesWithFrequencyValue)

SubDataPropertyOf(:recyclesWithFrequencyValue :hasHouseholdAttribute)
FunctionalDataProperty(:recyclesWithFrequencyValue)
DataPropertyDomain(:recyclesWithFrequencyValue :Household)
DataPropertyRange(:recyclesWithFrequencyValue xsd:string)

# Data Property: :regularlyUsesInternet (:regularlyUsesInternet)

AnnotationAssertion(rdfs:comment :regularlyUsesInternet "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :regularlyUsesInternet "d_netuse"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :regularlyUsesInternet "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_netuse"^^xsd:anyURI)
SubDataPropertyOf(:regularlyUsesInternet :hasPersonAttribute)
DataPropertyDomain(:regularlyUsesInternet :Person)
DataPropertyRange(:regularlyUsesInternet DataUnionOf(:missing :unknown xsd:boolean))

# Data Property: :religionMakesDifferenceToLife (:religionMakesDifferenceToLife)

AnnotationAssertion(rdfs:comment :religionMakesDifferenceToLife "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :religionMakesDifferenceToLife "d_oprlg3"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :religionMakesDifferenceToLife "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_oprlg3"^^xsd:anyURI)
SubDataPropertyOf(:religionMakesDifferenceToLife :hasReligiousAtrribute)
DataPropertyDomain(:religionMakesDifferenceToLife :Person)
DataPropertyRange(:religionMakesDifferenceToLife xsd:string)
DataPropertyRange(:religionMakesDifferenceToLife DataOneOf("a great difference " "a little difference " "no difference" "some difference "))

# Data Property: :separatesItemsForRecycling (:separatesItemsForRecycling)

AnnotationAssertion(rdfs:comment :separatesItemsForRecycling "d_hhresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :separatesItemsForRecycling "d_rubrec"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :separatesItemsForRecycling "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_hhresp/variable/d_rubrec"^^xsd:anyURI)
SubDataPropertyOf(:separatesItemsForRecycling :hasHouseholdAttribute)
DataPropertyDomain(:separatesItemsForRecycling :Household)
DataPropertyRange(:separatesItemsForRecycling DataOneOf("always" "never" "no recycling through normal rubbish collection (spontaneous)" "sometimes" "usually"))

# Data Property: :supportsAPoliticalParty (:supportsAPoliticalParty)

AnnotationAssertion(rdfs:comment :supportsAPoliticalParty "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :supportsAPoliticalParty "d_vote1"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :supportsAPoliticalParty "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_vote1"^^xsd:anyURI)
SubDataPropertyOf(:supportsAPoliticalParty :hasPoliticalAttribute)
DataPropertyRange(:supportsAPoliticalParty DataUnionOf(:missing :proxy :refused :unknown xsd:boolean))

# Data Property: :switchesOffLightsInUnusedRooms (:switchesOffLightsInUnusedRooms)

AnnotationAssertion(rdfs:comment :switchesOffLightsInUnusedRooms "e_envhabit1"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :switchesOffLightsInUnusedRooms "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :switchesOffLightsInUnusedRooms "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_envhabit2"^^xsd:anyURI)
SubDataPropertyOf(:switchesOffLightsInUnusedRooms :hasEnvironmentalHabit)
DataPropertyDomain(:switchesOffLightsInUnusedRooms :Person)
DataPropertyRange(:switchesOffLightsInUnusedRooms DataUnionOf(:missing :proxy :refused :unknown DataOneOf("always" "n/a, can't do this" "never" "not very often" "quite often" "very often")))

# Data Property: :takesOwnShoppingBagWhenShopping (:takesOwnShoppingBagWhenShopping)

AnnotationAssertion(rdfs:comment :takesOwnShoppingBagWhenShopping "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :takesOwnShoppingBagWhenShopping "e_envhabit7"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :takesOwnShoppingBagWhenShopping "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_envhabit7"^^xsd:anyURI)
SubDataPropertyOf(:takesOwnShoppingBagWhenShopping :hasEnvironmentalHabit)
DataPropertyDomain(:takesOwnShoppingBagWhenShopping :Person)
DataPropertyRange(:takesOwnShoppingBagWhenShopping DataUnionOf(:missing :proxy :refused :unknown DataOneOf("always" "n/a, can't do this" "never" "not very often" "quite often" "very often")))

# Data Property: :timeSpanValueForAlcoholConsumption (:timeSpanValueForAlcoholConsumption)

SubDataPropertyOf(:timeSpanValueForAlcoholConsumption :hasTimeSpanValueForFoodAndDrinkConsumption)
DataPropertyDomain(:timeSpanValueForAlcoholConsumption :Alcohol)
DataPropertyRange(:timeSpanValueForAlcoholConsumption xsd:positiveInteger)

# Data Property: :timeSpanValueForConsumptionOfMealsAndSnacksOutsideTheHome (:timeSpanValueForConsumptionOfMealsAndSnacksOutsideTheHome)

SubDataPropertyOf(:timeSpanValueForConsumptionOfMealsAndSnacksOutsideTheHome :hasTimeSpanValueForFoodAndDrinkConsumption)
DataPropertyDomain(:timeSpanValueForConsumptionOfMealsAndSnacksOutsideTheHome :MealsAndSnacksOutsideTheHome)

# Data Property: :timeSpanValueForFuelCostOfCombinedElectricityAndGas (:timeSpanValueForFuelCostOfCombinedElectricityAndGas)

SubDataPropertyOf(:timeSpanValueForFuelCostOfCombinedElectricityAndGas :hasTimeSpanValueForFuelCost)
DataPropertyDomain(:timeSpanValueForFuelCostOfCombinedElectricityAndGas :CombinedElectricityAndGas)
DataPropertyRange(:timeSpanValueForFuelCostOfCombinedElectricityAndGas xsd:nonNegativeInteger)

# Data Property: :timeSpanValueForFuelCostOfElectricity (:timeSpanValueForFuelCostOfElectricity)

SubDataPropertyOf(:timeSpanValueForFuelCostOfElectricity :hasTimeSpanValueForFuelCost)
DataPropertyDomain(:timeSpanValueForFuelCostOfElectricity :Electricity)
DataPropertyRange(:timeSpanValueForFuelCostOfElectricity xsd:nonNegativeInteger)

# Data Property: :timeSpanValueForFuelCostOfGas (:timeSpanValueForFuelCostOfGas)

SubDataPropertyOf(:timeSpanValueForFuelCostOfGas :hasTimeSpanValueForFuelCost)
DataPropertyDomain(:timeSpanValueForFuelCostOfGas :Gas)
DataPropertyRange(:timeSpanValueForFuelCostOfGas xsd:nonNegativeInteger)

# Data Property: :timeSpanValueForFuelCostOfOil (:timeSpanValueForFuelCostOfOil)

SubDataPropertyOf(:timeSpanValueForFuelCostOfOil :hasTimeSpanValueForFuelCost)
DataPropertyDomain(:timeSpanValueForFuelCostOfOil :Oil)
DataPropertyRange(:timeSpanValueForFuelCostOfOil xsd:nonNegativeInteger)

# Data Property: :timeSpanValueForFuelCostOfSolidFuelOrOther (:timeSpanValueForFuelCostOfSolidFuelOrOther)

SubDataPropertyOf(:timeSpanValueForFuelCostOfSolidFuelOrOther :hasTimeSpanValueForFuelCost)
DataPropertyDomain(:timeSpanValueForFuelCostOfSolidFuelOrOther :SolidFuelOrOther)
DataPropertyRange(:timeSpanValueForFuelCostOfSolidFuelOrOther xsd:nonNegativeInteger)

# Data Property: :timeSpanValueForPurchasingOfFoodFromSupermarket (:timeSpanValueForPurchasingOfFoodFromSupermarket)

SubDataPropertyOf(:timeSpanValueForPurchasingOfFoodFromSupermarket :hasTimeSpanValueForFoodAndDrinkConsumption)
DataPropertyDomain(:timeSpanValueForPurchasingOfFoodFromSupermarket :FoodPurchasedFromSupermarket)

# Data Property: :turnsOffTapWhilstBrushingTeeth (:turnsOffTapWhilstBrushingTeeth)

AnnotationAssertion(rdfs:comment :turnsOffTapWhilstBrushingTeeth "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :turnsOffTapWhilstBrushingTeeth "e_envhabit3"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :turnsOffTapWhilstBrushingTeeth "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_envhabit3"^^xsd:string)
SubDataPropertyOf(:turnsOffTapWhilstBrushingTeeth :hasEnvironmentalHabit)
DataPropertyDomain(:turnsOffTapWhilstBrushingTeeth :Person)
DataPropertyRange(:turnsOffTapWhilstBrushingTeeth DataUnionOf(:missing :proxy :refused :unknown DataOneOf("always" "n/a, can't do this" "never" "not very often" "quite often" "very often")))

# Data Property: :usesCarShareIfPossible (:usesCarShareIfPossible)

AnnotationAssertion(rdfs:comment :usesCarShareIfPossible "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :usesCarShareIfPossible "e_envhabit10"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :usesCarShareIfPossible "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_envhabit10"^^xsd:anyURI)
SubDataPropertyOf(:usesCarShareIfPossible :hasEnvironmentalHabit)
DataPropertyDomain(:usesCarShareIfPossible :Person)
DataPropertyRange(:usesCarShareIfPossible DataUnionOf(:missing :proxy :refused :unknown DataOneOf("always" "n/a, can't do this" "never" "not very often" "quite often" "very often")))

# Data Property: :usesPublicTransportRatherThanCar (:usesPublicTransportRatherThanCar)

AnnotationAssertion(rdfs:comment :usesPublicTransportRatherThanCar "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :usesPublicTransportRatherThanCar "e_envhabit8"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :usesPublicTransportRatherThanCar "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_envhabit8"^^xsd:anyURI)
SubDataPropertyOf(:usesPublicTransportRatherThanCar :hasEnvironmentalHabit)
DataPropertyDomain(:usesPublicTransportRatherThanCar :Person)
DataPropertyRange(:usesPublicTransportRatherThanCar DataUnionOf(:missing :proxy :refused :unknown DataOneOf("always" "n/a, can't do this" "never" "not very often" "quite often" "very often")))
DataPropertyRange(:usesPublicTransportRatherThanCar xsd:string)

# Data Property: :wakesUpInTheMiddleOfTheNight (:wakesUpInTheMiddleOfTheNight)

AnnotationAssertion(rdfs:comment :wakesUpInTheMiddleOfTheNight "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :wakesUpInTheMiddleOfTheNight "d_scslp_wak"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :wakesUpInTheMiddleOfTheNight "https://www.understandingsociety.ac.uk/documentation/innovation-panel/dataset-documentation/wave/4/datafile/d_indresp_ip/variable/d_sctslp_wak"^^xsd:anyURI)
SubDataPropertyOf(:wakesUpInTheMiddleOfTheNight :hasSleepAttribute)
DataPropertyDomain(:wakesUpInTheMiddleOfTheNight :Person)
DataPropertyRange(:wakesUpInTheMiddleOfTheNight xsd:string)
DataPropertyRange(:wakesUpInTheMiddleOfTheNight DataOneOf("less than once a week " "more than once most nights" "not during the past month " "once or twice a week " "three or more times a week "))

# Data Property: :walksorCylesForShortJourneysLessThan2Or3Miles (:walksorCylesForShortJourneysLessThan2Or3Miles)

AnnotationAssertion(rdfs:comment :walksorCylesForShortJourneysLessThan2Or3Miles "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :walksorCylesForShortJourneysLessThan2Or3Miles "e_envhabit9"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :walksorCylesForShortJourneysLessThan2Or3Miles "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_envhabit9"^^xsd:anyURI)
SubDataPropertyOf(:walksorCylesForShortJourneysLessThan2Or3Miles :hasEnvironmentalHabit)
DataPropertyDomain(:walksorCylesForShortJourneysLessThan2Or3Miles :Person)
DataPropertyRange(:walksorCylesForShortJourneysLessThan2Or3Miles DataUnionOf(:missing :proxy :refused :unknown DataOneOf("always" "n/a, can't do this" "never" "not very often" "quite often" "very often")))

# Data Property: :worksNumberOfHours (:worksNumberOfHours)

SubDataPropertyOf(:worksNumberOfHours :hasJobAttribute)
DataPropertyDomain(:worksNumberOfHours :Person)

# Data Property: :worksNumberOfHoursForPrimaryEmployment (:worksNumberOfHoursForPrimaryEmployment)

SubDataPropertyOf(:worksNumberOfHoursForPrimaryEmployment :worksNumberOfHours)
DataPropertyDomain(:worksNumberOfHoursForPrimaryEmployment :Person)
DataPropertyRange(:worksNumberOfHoursForPrimaryEmployment DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal xsd:maxInclusive "148"^^xsd:decimal))

# Data Property: :worksOnAverageNumberOfHoursOvertimePerWeek (:worksOnAverageNumberOfHoursOvertimePerWeek)

AnnotationAssertion(rdfs:comment :worksOnAverageNumberOfHoursOvertimePerWeek "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :worksOnAverageNumberOfHoursOvertimePerWeek "d_jbot"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :worksOnAverageNumberOfHoursOvertimePerWeek "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbot"^^xsd:anyURI)
SubDataPropertyOf(:worksOnAverageNumberOfHoursOvertimePerWeek :worksNumberOfHours)
DataPropertyDomain(:worksOnAverageNumberOfHoursOvertimePerWeek :Person)
DataPropertyDomain(:worksOnAverageNumberOfHoursOvertimePerWeek ObjectSomeValuesFrom(:isEmployedOrSelfEmployedForPrimaryJob :NotSelfEmployed))
DataPropertyRange(:worksOnAverageNumberOfHoursOvertimePerWeek DataUnionOf(:missing :proxy :refused :unknown DatatypeRestriction(xsd:positiveInteger xsd:maxInclusive "148"^^xsd:positiveInteger)))

# Data Property: :worksOnAverageNumberOfHoursPaidOvertimePerWeek (:worksOnAverageNumberOfHoursPaidOvertimePerWeek)

AnnotationAssertion(rdfs:comment :worksOnAverageNumberOfHoursPaidOvertimePerWeek "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :worksOnAverageNumberOfHoursPaidOvertimePerWeek "d_jbotpd"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :worksOnAverageNumberOfHoursPaidOvertimePerWeek "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbotpd"^^xsd:anyURI)
SubDataPropertyOf(:worksOnAverageNumberOfHoursPaidOvertimePerWeek :worksNumberOfHours)
DataPropertyDomain(:worksOnAverageNumberOfHoursPaidOvertimePerWeek :Person)
DataPropertyDomain(:worksOnAverageNumberOfHoursPaidOvertimePerWeek ObjectSomeValuesFrom(:isEmployedOrSelfEmployedForPrimaryJob :NotSelfEmployed))
DataPropertyDomain(:worksOnAverageNumberOfHoursPaidOvertimePerWeek DataSomeValuesFrom(:worksOnAverageNumberOfHoursOvertimePerWeek xsd:positiveInteger))
DataPropertyRange(:worksOnAverageNumberOfHoursPaidOvertimePerWeek DataUnionOf(:proxy :refused :unknown DatatypeRestriction(xsd:positiveInteger xsd:maxInclusive "148"^^xsd:positiveInteger)))

# Data Property: :worksOnAverageNumberOfHoursPerWeek (:worksOnAverageNumberOfHoursPerWeek)

AnnotationAssertion(rdfs:comment :worksOnAverageNumberOfHoursPerWeek "Missing:

d_jbhas"^^xsd:string)
AnnotationAssertion(rdfs:comment :worksOnAverageNumberOfHoursPerWeek "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :worksOnAverageNumberOfHoursPerWeek "d_jbhrs"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :worksOnAverageNumberOfHoursPerWeek "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbhrs"^^xsd:anyURI)
SubDataPropertyOf(:worksOnAverageNumberOfHoursPerWeek :worksNumberOfHours)
DataPropertyDomain(:worksOnAverageNumberOfHoursPerWeek :Person)
DataPropertyDomain(:worksOnAverageNumberOfHoursPerWeek ObjectSomeValuesFrom(:isEmployedOrSelfEmployedForPrimaryJob :NotSelfEmployed))
DataPropertyRange(:worksOnAverageNumberOfHoursPerWeek DataUnionOf(:missing :refused :unknown DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal xsd:maxInclusive "148"^^xsd:decimal)))

# Data Property: :worksOnAverageNumberOfHoursPerWeekAndIsSelfEmployed (:worksOnAverageNumberOfHoursPerWeekAndIsSelfEmployed)

AnnotationAssertion(rdfs:comment :worksOnAverageNumberOfHoursPerWeekAndIsSelfEmployed "Derived from:

d_jshrs
d_jbhrs
d_jbsemp
d_jbhas
d_jboff
d_jbot"^^xsd:string)
AnnotationAssertion(rdfs:comment :worksOnAverageNumberOfHoursPerWeekAndIsSelfEmployed "Missing:

d_jbhas
d_jboff"^^xsd:string)
AnnotationAssertion(rdfs:comment :worksOnAverageNumberOfHoursPerWeekAndIsSelfEmployed "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :worksOnAverageNumberOfHoursPerWeekAndIsSelfEmployed "d_jshrs"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :worksOnAverageNumberOfHoursPerWeekAndIsSelfEmployed "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jbft_dv"^^xsd:anyURI)
AnnotationAssertion(rdfs:isDefinedBy :worksOnAverageNumberOfHoursPerWeekAndIsSelfEmployed "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_jshrs"^^xsd:anyURI)
SubDataPropertyOf(:worksOnAverageNumberOfHoursPerWeekAndIsSelfEmployed :worksNumberOfHours)
DataPropertyDomain(:worksOnAverageNumberOfHoursPerWeekAndIsSelfEmployed :Person)
DataPropertyDomain(:worksOnAverageNumberOfHoursPerWeekAndIsSelfEmployed ObjectSomeValuesFrom(:isEmployedOrSelfEmployedForPrimaryJob :SelfEmployed))
DataPropertyRange(:worksOnAverageNumberOfHoursPerWeekAndIsSelfEmployed DataUnionOf(:missing :refused :unknown DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal xsd:maxInclusive "148"^^xsd:decimal)))

# Data Property: :worksOnAverageNumberOfHoursePerMonthForSecondJob (:worksOnAverageNumberOfHoursePerMonthForSecondJob)

AnnotationAssertion(rdfs:comment :worksOnAverageNumberOfHoursePerMonthForSecondJob "d_indresp"^^xsd:string)
AnnotationAssertion(rdfs:comment :worksOnAverageNumberOfHoursePerMonthForSecondJob "d_j2hrs"^^xsd:string)
AnnotationAssertion(rdfs:isDefinedBy :worksOnAverageNumberOfHoursePerMonthForSecondJob "https://www.understandingsociety.ac.uk/documentation/mainstage/dataset-documentation/wave/4/datafile/d_indresp/variable/d_j2hrs"^^xsd:anyURI)
SubDataPropertyOf(:worksOnAverageNumberOfHoursePerMonthForSecondJob :worksNumberOfHours)
DataPropertyDomain(:worksOnAverageNumberOfHoursePerMonthForSecondJob :Person)
DataPropertyDomain(:worksOnAverageNumberOfHoursePerMonthForSecondJob DataHasValue(:has2ndJob "true"^^xsd:boolean))
DataPropertyRange(:worksOnAverageNumberOfHoursePerMonthForSecondJob DataUnionOf(:proxy :refused :unknown DatatypeRestriction(xsd:decimal xsd:minInclusive "0"^^xsd:decimal)))


############################
#   Datatypes
############################

# Datatype: :jobSoc00Condensed (:jobSoc00Condensed)

DatatypeDefinition(:jobSoc00Condensed DataOneOf("Administrative occupations: communications" "Administrative occupations: finance" "Administrative occupations: general" "Administrative occupations: government and related organisations" "Administrative occupations: records" "Agricultural trades" "Animal care services" "Architects, town planners, surveyors" "Artistic and literary occupations" "Assemblers and routine operatives" "Building trades" "Business and finance associate professionals" "Business and statistical professionals" "Childcare and related personal services" "Conservation associate professionals" "Construction operatives" "Construction trades" "Corporate managers and senior officials" "Customer service occupations" "Design associate professionals" "Electrical trades" "Elementary administration occupations" "Elementary agricultural occupations" "Elementary cleaning occupations" "Elementary construction occupations" "Elementary goods storage occupations" "Elementary personal services occupations" "Elementary process plant occupations" "Elementary sales occupations" "Elementary security occupations" "Engineering professionals" "Financial institution and office managers" "Food preparation trades" "Functional managers" "Hairdressers and related occupations" "Health and social services managers" "Health associate professionals" "Health professionals" "Healthcare and related personal services" "Housekeeping occupations" "Information and communication technology professionals" "It service delivery occupations" "Legal associate professionals" "Legal professionals" "Leisure and travel service occupations" "Librarians and related professionals" "Managers and proprietors in hospitality and leisure services" "Managers and proprietors in other service industries" "Managers in distribution, storage and retailing" "Managers in farming, horticulture, forestry and services" "Media associate professionals" "Metal forming, welding and related trades" "Metal machining, fitting and instrument making trades" "Mobile machine drivers and operatives" "Personal services occupations nec" "Plant and machine operatives" "Printing trades" "Process operatives" "Production managers" "Protective service occupations" "Protective service officers" "Public service and other associate professionals" "Public service professionals" "Quality and customer care managers" "Research professionals" "Sales and related associate professionals" "Sales assistants and retail cashiers" "Sales related occupations" "Science and engineering technicians" "Science professionals" "Secretarial and related occupations" "Skilled trades nec" "Social welfare associate professionals" "Sports and fitness occupations" "Teaching professionals" "Textiles and garments trades" "Therapists" "Transport associate professionals" "Transport drivers and operatives" "Vehicle trades"))

# Datatype: :missing (:missing)

DatatypeDefinition(:missing DataOneOf("missing"))

# Datatype: :proxy (:proxy)

DatatypeDefinition(:proxy DataOneOf("proxy"))

# Datatype: :refused (:refused)

DatatypeDefinition(:refused DataOneOf("refused"))

# Datatype: :unknown (:unknown)

DatatypeDefinition(:unknown DataOneOf("Don't know"))


############################
#   Classes
############################

# Class: :ALevel (:ALevel)

SubClassOf(:ALevel :UKQualification)
DisjointClasses(:ALevel :OtherQualification)

# Class: :ASLevel (:ASLevel)

SubClassOf(:ASLevel :UKQualification)
DisjointClasses(:ASLevel :OtherQualification)

# Class: :Adult (:Adult)

SubClassOf(:Adult :Person)
DisjointClasses(:Adult :Child)

# Class: :Alcohol (:Alcohol)

SubClassOf(:Alcohol :FoodAndDrink)

# Class: :AllianceParty (:AllianceParty)

SubClassOf(:AllianceParty :PoliticalParty)

# Class: :Apprenticeship (:Apprenticeship)

SubClassOf(:Apprenticeship :EconomicActivity)

# Class: :BTECOrBECOrTECOrEdexcelOrLQL (:BTECOrBECOrTECOrEdexcelOrLQL)

AnnotationAssertion(rdfs:comment :BTECOrBECOrTECOrEdexcelOrLQL "BTEC - Business and Technician Education Council
BEC - Cambridge English: Business Certificate
TEC - Technology Entrepreneur Certificate
Edexcel - Pearson Edexcel - London Examinations (Baccalaureate)
LQL - ????"^^xsd:string)
SubClassOf(:BTECOrBECOrTECOrEdexcelOrLQL :VocationalOrProfessionalOrTechnicalQualification)

# Class: :BasicSkills (:BasicSkills)

SubClassOf(:BasicSkills :VocationalOrProfessionalOrTechnicalQualification)

# Class: :Bedroom (:Bedroom)

SubClassOf(:Bedroom :Room)
DisjointClasses(:Bedroom :OtherRoom)

# Class: :BritishNationalParty (:BritishNationalParty)

SubClassOf(:BritishNationalParty :PoliticalParty)

# Class: :BusOrCoach (:BusOrCoach)

SubClassOf(:BusOrCoach :Transport)
DisjointClasses(:BusOrCoach :OtherTransport)

# Class: :BusinessIncome (:BusinessIncome)

AnnotationAssertion(rdfs:seeAlso :BusinessIncome :SelfEmployedIncome)
SubClassOf(:BusinessIncome :PersonalIncome)

# Class: :CSE (:CSE)

SubClassOf(:CSE :UKQualification)
DisjointClasses(:CSE :OtherQualification)

# Class: :Car (:Car)

SubClassOf(:Car :CarOrVan)

# Class: :CarOrVan (:CarOrVan)

SubClassOf(:CarOrVan :Transport)
DisjointClasses(:CarOrVan :OtherTransport)

# Class: :Carer (:Carer)

SubClassOf(:Carer :EconomicActivity)

# Class: :CertificateOfSixthYearStudies (:CertificateOfSixthYearStudies)

SubClassOf(:CertificateOfSixthYearStudies :UKQualification)
DisjointClasses(:CertificateOfSixthYearStudies :OtherQualification)

# Class: :Child (:Child)

SubClassOf(:Child :Person)
SubClassOf(:Child DataSomeValuesFrom(:hasAgeValueInYears DatatypeRestriction(xsd:nonNegativeInteger xsd:maxInclusive "15"^^xsd:nonNegativeInteger)))

# Class: :ChildAged_00_to_02 (:ChildAged_00_to_02)

SubClassOf(:ChildAged_00_to_02 :Child)
SubClassOf(:ChildAged_00_to_02 DataSomeValuesFrom(:hasAgeValueInYears DatatypeRestriction(xsd:nonNegativeInteger xsd:maxInclusive "2"^^xsd:nonNegativeInteger)))

# Class: :ChildAged_00_to_09 (:ChildAged_00_to_09)

SubClassOf(:ChildAged_00_to_09 :Child)
SubClassOf(:ChildAged_00_to_09 DataSomeValuesFrom(:hasAgeValueInYears DatatypeRestriction(xsd:nonNegativeInteger xsd:maxInclusive "9"^^xsd:nonNegativeInteger)))
DisjointClasses(:ChildAged_00_to_09 :ChildAged_10_to_15)

# Class: :ChildAged_03_to_04 (:ChildAged_03_to_04)

SubClassOf(:ChildAged_03_to_04 :Child)
SubClassOf(:ChildAged_03_to_04 DataSomeValuesFrom(:hasAgeValueInYears DatatypeRestriction(xsd:positiveInteger xsd:minInclusive "3"^^xsd:positiveInteger xsd:maxInclusive "4"^^xsd:positiveInteger)))

# Class: :ChildAged_05_to_11 (:ChildAged_05_to_11)

SubClassOf(:ChildAged_05_to_11 :Child)
SubClassOf(:ChildAged_05_to_11 DataSomeValuesFrom(:hasAgeValueInYears DatatypeRestriction(xsd:positiveInteger xsd:minInclusive "5"^^xsd:positiveInteger xsd:maxInclusive "11"^^xsd:positiveInteger)))

# Class: :ChildAged_10_to_15 (:ChildAged_10_to_15)

SubClassOf(:ChildAged_10_to_15 :Child)
SubClassOf(:ChildAged_10_to_15 DataSomeValuesFrom(:hasAgeValueInYears DatatypeRestriction(xsd:positiveInteger xsd:minInclusive "10"^^xsd:positiveInteger)))

# Class: :ChildAged_12_to_15 (:ChildAged_12_to_15)

SubClassOf(:ChildAged_12_to_15 :Child)
SubClassOf(:ChildAged_12_to_15 DataSomeValuesFrom(:hasAgeValueInYears DatatypeRestriction(xsd:positiveInteger xsd:minInclusive "12"^^xsd:positiveInteger)))

# Class: :ChristianParty (:ChristianParty)

SubClassOf(:ChristianParty :PoliticalParty)

# Class: :Citizen (:Citizen)

SubClassOf(:Citizen :Person)

# Class: :CityAndGuildCertificate (:CityAndGuildCertificate)

SubClassOf(:CityAndGuildCertificate :VocationalOrProfessionalOrTechnicalQualification)

# Class: :CoalitionGovernment (:CoalitionGovernment)

SubClassOf(:CoalitionGovernment :PoliticalParty)

# Class: :CohabitingAdult (:CohabitingAdult)

SubClassOf(:CohabitingAdult :Adult)
DisjointClasses(:CohabitingAdult :SingleAdult)

# Class: :ColourTelevision (:ColourTelevision)

SubClassOf(:ColourTelevision :ConsumerElectronics)

# Class: :CombinedElectricityAndGas (:CombinedElectricityAndGas)

SubClassOf(:CombinedElectricityAndGas :ExternalPowerSupply)

# Class: :CommunistParty (:CommunistParty)

SubClassOf(:CommunistParty :PoliticalParty)

# Class: :CompactDiscPlayer (:CompactDiscPlayer)

SubClassOf(:CompactDiscPlayer :ConsumerElectronics)

# Class: :Conservative (:Conservative)

SubClassOf(:Conservative :PoliticalParty)

# Class: :ConsumerElectronics (:ConsumerElectronics)

SubClassOf(:ConsumerElectronics :ConsumerDuarable)
DisjointClasses(:ConsumerElectronics :NoRecognizedConsumerElectronics)
DisjointClasses(:ConsumerElectronics :WhiteGood)

# Class: :Couple (:Couple)

SubClassOf(:Couple :GroupOfTwoPeople)
SubClassOf(:Couple ObjectExactCardinality(2 :hasGroupMember :Adult))

# Class: :Currency (:Currency)

SubClassOf(:Currency :UnitsOfMonetaryValue)

# Class: :Cycle (:Cycle)

SubClassOf(:Cycle :Transport)
DisjointClasses(:Cycle :OtherTransport)

# Class: :Day (:Day)

SubClassOf(:Day :UnitsOfTime)

# Class: :DemocraticUnionist (:DemocraticUnionist)

SubClassOf(:DemocraticUnionist :PoliticalParty)

# Class: :DiplomaInHigherEducation (:DiplomaInHigherEducation)

SubClassOf(:DiplomaInHigherEducation :Qualification)
DisjointClasses(:DiplomaInHigherEducation :NoQualifications)
DisjointClasses(:DiplomaInHigherEducation :OtherQualification)

# Class: :Dishwasher (:Dishwasher)

SubClassOf(:Dishwasher :WhiteGood)

# Class: :DrivenByHouseholdMember (:DrivenByHouseholdMember)

SubClassOf(:DrivenByHouseholdMember :CarOrVan)

# Class: :DrivenByNoneHouseholdMember (:DrivenByNoneHouseholdMember)

SubClassOf(:DrivenByNoneHouseholdMember :CarOrVan)

# Class: :Earnings (:Earnings)

SubClassOf(:Earnings :PersonalIncome)

# Class: :Electricity (:Electricity)

SubClassOf(:Electricity :ExternalPowerSupply)

# Class: :EnglishDemocrats (:EnglishDemocrats)

SubClassOf(:EnglishDemocrats :PoliticalParty)

# Class: :EntryLevelQualificationWalesOnly (:EntryLevelQualificationWalesOnly)

SubClassOf(:EntryLevelQualificationWalesOnly :VocationalOrProfessionalOrTechnicalQualification)
SubClassOf(:EntryLevelQualificationWalesOnly :WelshQualfication)

# Class: :ExternalPowerSupply (:ExternalPowerSupply)

SubClassOf(:ExternalPowerSupply :PowerSupply)

# Class: :Female (:Female)

SubClassOf(:Female :Person)
DisjointClasses(:Female :Male)

# Class: :FirstDegreeOrEquivalent (:FirstDegreeOrEquivalent)

SubClassOf(:FirstDegreeOrEquivalent :Qualification)
DisjointClasses(:FirstDegreeOrEquivalent :NoQualifications)
DisjointClasses(:FirstDegreeOrEquivalent :OtherQualification)

# Class: :Food (:Food)

SubClassOf(:Food :FoodAndDrink)

# Class: :FoodAndDrink (:FoodAndDrink)

SubClassOf(:FoodAndDrink :Consumption)

# Class: :FoodPurchasedFromSupermarket (:FoodPurchasedFromSupermarket)

SubClassOf(:FoodPurchasedFromSupermarket :Food)

# Class: :FormOfEmployment (:FormOfEmployment)

SubClassOf(:FormOfEmployment :EconomicActivity)
DisjointClasses(:FormOfEmployment :Unemployed)
DisjointUnion(:FormOfEmployment :NotSelfEmployed :SelfEmployed)

# Class: :Freezer (:Freezer)

SubClassOf(:Freezer :WhiteGood)

# Class: :FullTime (:FullTime)

SubClassOf(:FullTime :EconomicActivity)

# Class: :GCSEOrOLevel (:GCSEOrOLevel)

SubClassOf(:GCSEOrOLevel :UKQualification)
DisjointClasses(:GCSEOrOLevel :OtherQualification)

# Class: :GNVQOrGSVQ (:GNVQOrGSVQ)

AnnotationAssertion(rdfs:comment :GNVQOrGSVQ "GNVQ - General National Vocational Qualification
GSVQ - Genreal Scottish Vocational Qualification"^^xsd:string)
SubClassOf(:GNVQOrGSVQ :VocationalOrProfessionalOrTechnicalQualification)

# Class: :GardenWaste (:GardenWaste)

SubClassOf(:GardenWaste :HouseholdWaste)

# Class: :Gas (:Gas)

SubClassOf(:Gas :ExternalPowerSupply)

# Class: :GovernmentTrainingScheme (:GovernmentTrainingScheme)

SubClassOf(:GovernmentTrainingScheme :EconomicActivity)

# Class: :GreenParty (:GreenParty)

SubClassOf(:GreenParty :PoliticalParty)

# Class: :GroupOfTwoPeople (:GroupOfTwoPeople)

SubClassOf(:GroupOfTwoPeople :GroupOfPeople)
SubClassOf(:GroupOfTwoPeople ObjectExactCardinality(2 :hasGroupMember :Person))

# Class: :HNCOrHND (:HNCOrHND)

SubClassOf(:HNCOrHND :VocationalOrProfessionalOrTechnicalQualification)

# Class: :HigherDegree (:HigherDegree)

SubClassOf(:HigherDegree :Qualification)
DisjointClasses(:HigherDegree :NoQualifications)
DisjointClasses(:HigherDegree :OtherQualification)

# Class: :HighersScotland (:HighersScotland)

SubClassOf(:HighersScotland :ScottishQualification)
DisjointClasses(:HighersScotland :OtherQualification)

# Class: :HomeComputer (:HomeComputer)

SubClassOf(:HomeComputer :ConsumerElectronics)

# Class: :HomeGeneration (:HomeGeneration)

SubClassOf(:HomeGeneration :PowerSupply)

# Class: :Hour (:Hour)

SubClassOf(:Hour :UnitsOfTime)

# Class: :HouseholdIncome (:HouseholdIncome)

SubClassOf(:HouseholdIncome :Income)

# Class: :HouseholdIncomeGrossMonthBeforeInterview (:HouseholdIncomeGrossMonthBeforeInterview)

SubClassOf(:HouseholdIncomeGrossMonthBeforeInterview :HouseholdIncome)

# Class: :HouseholdIncomeNetNoDeductions (:HouseholdIncomeNetNoDeductions)

SubClassOf(:HouseholdIncomeNetNoDeductions :HouseholdIncome)

# Class: :HouseholdMortgaged (:HouseholdMortgaged)

SubClassOf(:HouseholdMortgaged :HouseholdOwned)
SubClassOf(:HouseholdMortgaged ObjectSomeValuesFrom(:hasOwnerWithMortgage :Person))

# Class: :HouseholdOwned (:HouseholdOwned)

SubClassOf(:HouseholdOwned :HouseholdTenure)
SubClassOf(:HouseholdOwned ObjectSomeValuesFrom(:hasOwner :Person))
DisjointClasses(:HouseholdOwned :HouseholdTenureOther)

# Class: :HouseholdOwnedOutright (:HouseholdOwnedOutright)

SubClassOf(:HouseholdOwnedOutright :HouseholdOwned)
SubClassOf(:HouseholdOwnedOutright ObjectSomeValuesFrom(:haOutrightOwner :Person))

# Class: :HouseholdRented (:HouseholdRented)

SubClassOf(:HouseholdRented :HouseholdTenure)
SubClassOf(:HouseholdRented ObjectSomeValuesFrom(:hasRenter :Person))
DisjointClasses(:HouseholdRented :HouseholdTenureOther)

# Class: :HouseholdRentedFromCouncilOrLocalAuthority (:HouseholdRentedFromCouncilOrLocalAuthority)

SubClassOf(:HouseholdRentedFromCouncilOrLocalAuthority :HouseholdRented)
SubClassOf(:HouseholdRentedFromCouncilOrLocalAuthority ObjectSomeValuesFrom(:hasRenterAndRentsFromCouncilOrLocalAuthority :Person))

# Class: :HouseholdRentedFromEmployerOfAResident (:HouseholdRentedFromEmployerOfAResident)

SubClassOf(:HouseholdRentedFromEmployerOfAResident :HouseholdRented)
SubClassOf(:HouseholdRentedFromEmployerOfAResident ObjectSomeValuesFrom(:hasRenterAndRentsFromEmployerOfAResident :Person))

# Class: :HouseholdRentedFromHousingAssociation (:HouseholdRentedFromHousingAssociation)

SubClassOf(:HouseholdRentedFromHousingAssociation :HouseholdRented)
SubClassOf(:HouseholdRentedFromHousingAssociation ObjectSomeValuesFrom(:hasRenterAndRentsFromAHousingAssociation :Person))

# Class: :HouseholdRentedPrivately (:HouseholdRentedPrivately)

SubClassOf(:HouseholdRentedPrivately :HouseholdRented)
SubClassOf(:HouseholdRentedPrivately ObjectSomeValuesFrom(:hasRenterAndRentsFromPrivateLandlord :Person))

# Class: :HouseholdRentedPrivatelyFurnished (:HouseholdRentedPrivatelyFurnished)

SubClassOf(:HouseholdRentedPrivatelyFurnished :HouseholdRentedPrivately)
SubClassOf(:HouseholdRentedPrivatelyFurnished ObjectSomeValuesFrom(:hasRenterAndRentsFromPrivateLandlordFurnished :Person))

# Class: :HouseholdRentedPrivatelyUnfurnished (:HouseholdRentedPrivatelyUnfurnished)

SubClassOf(:HouseholdRentedPrivatelyUnfurnished :HouseholdRentedPrivately)
SubClassOf(:HouseholdRentedPrivatelyUnfurnished ObjectSomeValuesFrom(:hasRenterAndRentsFromPrivateLandlordUnfurnished :Person))

# Class: :HouseholdRentedWithHeatingAndLightingIncluded (:HouseholdRentedWithHeatingAndLightingIncluded)

SubClassOf(:HouseholdRentedWithHeatingAndLightingIncluded :HouseholdRented)
SubClassOf(:HouseholdRentedWithHeatingAndLightingIncluded ObjectSomeValuesFrom(:hasRenterAndRentIncludesHeatingLightingOrWater :Person))

# Class: :HouseholdRentedWithSewageAndWaterChargesIncluded (:HouseholdRentedWithSewageAndWaterChargesIncluded)

SubClassOf(:HouseholdRentedWithSewageAndWaterChargesIncluded :HouseholdRented)
SubClassOf(:HouseholdRentedWithSewageAndWaterChargesIncluded ObjectSomeValuesFrom(:hasRenterAndRentIncludesSewageAndWaterCharges :Person))

# Class: :HouseholdSharedOwnership (:HouseholdSharedOwnership)

SubClassOf(:HouseholdSharedOwnership :HouseholdOwned)
SubClassOf(:HouseholdSharedOwnership ObjectSomeValuesFrom(:hasSharedOwner :Person))

# Class: :HouseholdTenure (:HouseholdTenure)

SubClassOf(:HouseholdTenure :Household)

# Class: :HouseholdTenureOther (:HouseholdTenureOther)

SubClassOf(:HouseholdTenureOther :HouseholdTenure)
SubClassOf(:HouseholdTenureOther ObjectSomeValuesFrom(:hasOccupierNeitherRentingNorOwning :Person))

# Class: :HouseholdWithExternalPowerSupply (:HouseholdWithExternalPowerSupply)

SubClassOf(:HouseholdWithExternalPowerSupply :Household)
SubClassOf(:HouseholdWithExternalPowerSupply ObjectAllValuesFrom(:hasExternalPowerSupply :ExternalPowerSupply))
DisjointClasses(:HouseholdWithExternalPowerSupply :HouseholdWithNoExternalPowerSupply)

# Class: :HouseholdWithNoExternalPowerSupply (:HouseholdWithNoExternalPowerSupply)

SubClassOf(:HouseholdWithNoExternalPowerSupply :Household)
SubClassOf(:HouseholdWithNoExternalPowerSupply ObjectAllValuesFrom(:hasExternalPowerSupply :NoExternalPowerSupply))

# Class: :HouseholdWithUseOfAppliances (:HouseholdWithUseOfAppliances)

SubClassOf(:HouseholdWithUseOfAppliances :Household)
SubClassOf(:HouseholdWithUseOfAppliances ObjectUnionOf(ObjectAllValuesFrom(:hasUseOfConsumerElectronics :ConsumerElectronics) ObjectAllValuesFrom(:hasUseOfWhiteGoods :WhiteGood)))
DisjointClasses(:HouseholdWithUseOfAppliances :HouseholdWithUseOfNoAppliances)

# Class: :HouseholdWithUseOfNoAppliances (:HouseholdWithUseOfNoAppliances)

SubClassOf(:HouseholdWithUseOfNoAppliances :Household)
SubClassOf(:HouseholdWithUseOfNoAppliances ObjectIntersectionOf(ObjectAllValuesFrom(:hasUseOfConsumerElectronics :NoRecognizedWhiteGood) ObjectAllValuesFrom(:hasUseOfWhiteGoods :NoRecognizedConsumerElectronics)))
SubClassOf(:HouseholdWithUseOfNoAppliances DataHasValue(:hasDVB-CAccess "false"^^xsd:boolean))
SubClassOf(:HouseholdWithUseOfNoAppliances DataHasValue(:hasDVB-SAccess "false"^^xsd:boolean))

# Class: :Independent (:Independent)

SubClassOf(:Independent :PoliticalParty)

# Class: :InternationalBaccalaureate (:InternationalBaccalaureate)

SubClassOf(:InternationalBaccalaureate :Qualification)
DisjointClasses(:InternationalBaccalaureate :NoQualifications)
DisjointClasses(:InternationalBaccalaureate :OtherQualification)

# Class: :InvestmentIncome (:InvestmentIncome)

SubClassOf(:InvestmentIncome :MonthlyIncomeComponentAmount)

# Class: :KeySkills (:KeySkills)

SubClassOf(:KeySkills :VocationalOrProfessionalOrTechnicalQualification)

# Class: :Labour (:Labour)

SubClassOf(:Labour :PoliticalParty)

# Class: :Landline (:Landline)

SubClassOf(:Landline :Telephone)

# Class: :LatestSecondJobIncome (:LatestSecondJobIncome)

SubClassOf(:LatestSecondJobIncome :PayFromSecondJob)

# Class: :LiberalDemocrat (:LiberalDemocrat)

SubClassOf(:LiberalDemocrat :PoliticalParty)

# Class: :LongTermSickOrDisabled (:LongTermSickOrDisabled)

SubClassOf(:LongTermSickOrDisabled :EconomicActivity)

# Class: :Male (:Male)

SubClassOf(:Male :Person)

# Class: :MaternityLeave (:MaternityLeave)

SubClassOf(:MaternityLeave :EconomicActivity)

# Class: :MealsAndSnacksOutsideTheHome (:MealsAndSnacksOutsideTheHome)

SubClassOf(:MealsAndSnacksOutsideTheHome :Food)

# Class: :MebyonKernow (:MebyonKernow)

SubClassOf(:MebyonKernow :PoliticalParty)

# Class: :MicrowaveOven (:MicrowaveOven)

SubClassOf(:MicrowaveOven :WhiteGood)

# Class: :Minutes (:Minutes)

SubClassOf(:Minutes :UnitsOfTime)

# Class: :MiscellaneousIncome (:MiscellaneousIncome)

SubClassOf(:MiscellaneousIncome :MonthlyIncomeComponentAmount)

# Class: :Missing (:Missing)

SubClassOf(:Missing :NegativeResponse)

# Class: :MobilePhone (:MobilePhone)

SubClassOf(:MobilePhone :Telephone)

# Class: :ModernOrTradeApprentice (:ModernOrTradeApprentice)

SubClassOf(:ModernOrTradeApprentice :VocationalOrProfessionalOrTechnicalQualification)

# Class: :MonsterRavingLoonyParty (:MonsterRavingLoonyParty)

SubClassOf(:MonsterRavingLoonyParty :PoliticalParty)

# Class: :Month (:Month)

SubClassOf(:Month :UnitsOfTime)

# Class: :MonthlyIncomeComponentAmount (:MonthlyIncomeComponentAmount)

SubClassOf(:MonthlyIncomeComponentAmount :MonthlyPersonalIncome)

# Class: :MonthlyPersonalIncome (:MonthlyPersonalIncome)

SubClassOf(:MonthlyPersonalIncome :PersonalIncome)

# Class: :MotorCycleOrMopedOrScooter (:MotorCycleOrMopedOrScooter)

SubClassOf(:MotorCycleOrMopedOrScooter :Transport)
DisjointClasses(:MotorCycleOrMopedOrScooter :OtherTransport)

# Class: :NVQOrSVQLevel_1_2 (:NVQOrSVQLevel_1_2)

SubClassOf(:NVQOrSVQLevel_1_2 :VocationalOrProfessionalOrTechnicalQualification)

# Class: :NVQOrSVQLevel_3_5 (:NVQOrSVQLevel_3_5)

SubClassOf(:NVQOrSVQLevel_3_5 :VocationalOrProfessionalOrTechnicalQualification)

# Class: :NationalFront (:NationalFront)

SubClassOf(:NationalFront :PoliticalParty)

# Class: :NegativeResponse (:NegativeResponse)

SubClassOf(:NegativeResponse :IndeterminateResponse)

# Class: :NetEarningsPrimaryJob (:NetEarningsPrimaryJob)

SubClassOf(:NetEarningsPrimaryJob :MonthlyIncomeComponentAmount)

# Class: :NetEarningsSecondJob (:NetEarningsSecondJob)

SubClassOf(:NetEarningsSecondJob :MonthlyIncomeComponentAmount)

# Class: :NetLabourIncome (:NetLabourIncome)

SubClassOf(:NetLabourIncome :MonthlyIncomeComponentAmount)

# Class: :NoExternalPowerSupply (:NoExternalPowerSupply)

SubClassOf(:NoExternalPowerSupply :ExternalPowerSupply)

# Class: :NoQualifications (:NoQualifications)

SubClassOf(:NoQualifications :Qualification)
DisjointClasses(:NoQualifications :NonUKQualification)
DisjointClasses(:NoQualifications :NursingOrOtherMedicalQualification)
DisjointClasses(:NoQualifications :OtherQualification)
DisjointClasses(:NoQualifications :OtherSchoolCertificate)
DisjointClasses(:NoQualifications :OtherVocationalTechnicalOrProfessionalQualification)
DisjointClasses(:NoQualifications :TeachingQualification)
DisjointClasses(:NoQualifications :UKQualification)

# Class: :NoRecognizedConsumerElectronics (:NoRecognizedConsumerElectronics)

SubClassOf(:NoRecognizedConsumerElectronics :ConsumerDuarable)

# Class: :NoRecognizedWhiteGood (:NoRecognizedWhiteGood)

SubClassOf(:NoRecognizedWhiteGood :ConsumerDuarable)
DisjointClasses(:NoRecognizedWhiteGood :WhiteGood)

# Class: :NonUKCitizen (:NonUKCitizen)

SubClassOf(:NonUKCitizen :Citizen)

# Class: :NonUKQualification (:NonUKQualification)

SubClassOf(:NonUKQualification :Qualification)
DisjointClasses(:NonUKQualification :UKQualification)
DisjointClasses(:NonUKQualification :VocationalOrProfessionalOrTechnicalQualification)

# Class: :NotPermanent (:NotPermanent)

SubClassOf(:NotPermanent :EconomicActivity)
DisjointClasses(:NotPermanent :Permanent)

# Class: :NotSelfEmployed (:NotSelfEmployed)

SubClassOf(:NotSelfEmployed :EconomicActivity)
DisjointClasses(:NotSelfEmployed :SelfEmployed)

# Class: :NotSelfEmployedPerson (:NotSelfEmployedPerson)

SubClassOf(:NotSelfEmployedPerson :PersonInEmployment)
SubClassOf(:NotSelfEmployedPerson ObjectSomeValuesFrom(:isEmployedOrSelfEmployed :NotSelfEmployed))

# Class: :NursingOrOtherMedicalQualification (:NursingOrOtherMedicalQualification)

SubClassOf(:NursingOrOtherMedicalQualification :Qualification)

# Class: :OECDAdult (:OECDAdult)

SubClassOf(:OECDAdult :OECDDefinedPerson)
SubClassOf(:OECDAdult DataSomeValuesFrom(:hasAgeValueInYears DatatypeRestriction(xsd:nonNegativeInteger xsd:minInclusive "15"^^xsd:nonNegativeInteger)))
DisjointClasses(:OECDAdult :OECDChild)

# Class: :OECDChild (:OECDChild)

SubClassOf(:OECDChild :OECDDefinedPerson)
SubClassOf(:OECDChild DataSomeValuesFrom(:hasAgeValueInYears DatatypeRestriction(xsd:nonNegativeInteger xsd:maxInclusive "14"^^xsd:nonNegativeInteger)))

# Class: :OECDDefinedPerson (:OECDDefinedPerson)

SubClassOf(:OECDDefinedPerson :Person)

# Class: :ONCOrOND (:ONCOrOND)

SubClassOf(:ONCOrOND :VocationalOrProfessionalOrTechnicalQualification)

# Class: :Oil (:Oil)

SubClassOf(:Oil :ExternalPowerSupply)

# Class: :OtherPoliticalParty (:OtherPoliticalParty)

SubClassOf(:OtherPoliticalParty :PoliticalParty)

# Class: :OtherQualification (:OtherQualification)

SubClassOf(:OtherQualification :Qualification)
DisjointClasses(:OtherQualification :OtherSchoolCertificate)
DisjointClasses(:OtherQualification :StandardOrOrdinaryOrLowerScotland)

# Class: :OtherRoom (:OtherRoom)

SubClassOf(:OtherRoom :Room)

# Class: :OtherSchoolCertificate (:OtherSchoolCertificate)

SubClassOf(:OtherSchoolCertificate :Qualification)

# Class: :OtherTransport (:OtherTransport)

SubClassOf(:OtherTransport :Transport)
DisjointClasses(:OtherTransport :TaxiOrMiniCab)
DisjointClasses(:OtherTransport :Train)
DisjointClasses(:OtherTransport :TramOrUndergroundOrMetroOrLightRailway)
DisjointClasses(:OtherTransport :Walk)

# Class: :OtherVocationalTechnicalOrProfessionalQualification (:OtherVocationalTechnicalOrProfessionalQualification)

SubClassOf(:OtherVocationalTechnicalOrProfessionalQualification :Qualification)

# Class: :PartTime (:PartTime)

SubClassOf(:PartTime :EconomicActivity)

# Class: :PayFromSecondJob (:PayFromSecondJob)

SubClassOf(:PayFromSecondJob :PersonalIncome)

# Class: :PaymentPeriod (:PaymentPeriod)

SubClassOf(:PaymentPeriod :TimePeriod)

# Class: :PaymentPeriodOfACalendarMonth (:PaymentPeriodOfACalendarMonth)

SubClassOf(:PaymentPeriodOfACalendarMonth :PaymentPeriod)
DisjointClasses(:PaymentPeriodOfACalendarMonth :PaymentPeriodUnspecified)

# Class: :PaymentPeriodOfAFortnight (:PaymentPeriodOfAFortnight)

SubClassOf(:PaymentPeriodOfAFortnight :PaymentPeriod)
DisjointClasses(:PaymentPeriodOfAFortnight :PaymentPeriodUnspecified)

# Class: :PaymentPeriodOfANinthOfAYear (:PaymentPeriodOfANinthOfAYear)

SubClassOf(:PaymentPeriodOfANinthOfAYear :PaymentPeriod)
DisjointClasses(:PaymentPeriodOfANinthOfAYear :PaymentPeriodUnspecified)

# Class: :PaymentPeriodOfAWeek (:PaymentPeriodOfAWeek)

SubClassOf(:PaymentPeriodOfAWeek :PaymentPeriod)
DisjointClasses(:PaymentPeriodOfAWeek :PaymentPeriodUnspecified)

# Class: :PaymentPeriodOfAYear (:PaymentPeriodOfAYear)

SubClassOf(:PaymentPeriodOfAYear :PaymentPeriod)
DisjointClasses(:PaymentPeriodOfAYear :PaymentPeriodUnspecified)

# Class: :PaymentPeriodOfAnHour (:PaymentPeriodOfAnHour)

SubClassOf(:PaymentPeriodOfAnHour :PaymentPeriod)
DisjointClasses(:PaymentPeriodOfAnHour :PaymentPeriodUnspecified)

# Class: :PaymentPeriodOfFourWeeks (:PaymentPeriodOfFourWeeks)

SubClassOf(:PaymentPeriodOfFourWeeks :PaymentPeriod)
DisjointClasses(:PaymentPeriodOfFourWeeks :PaymentPeriodUnspecified)

# Class: :PaymentPeriodOfLessThanAWeek (:PaymentPeriodOfLessThanAWeek)

SubClassOf(:PaymentPeriodOfLessThanAWeek :PaymentPeriod)
DisjointClasses(:PaymentPeriodOfLessThanAWeek :PaymentPeriodUnspecified)

# Class: :PaymentPeriodOfPeriodOfEmployment (:PaymentPeriodOfPeriodOfEmployment)

SubClassOf(:PaymentPeriodOfPeriodOfEmployment :PaymentPeriod)
DisjointClasses(:PaymentPeriodOfPeriodOfEmployment :PaymentPeriodUnspecified)

# Class: :PaymentPeriodOfSixMonths (:PaymentPeriodOfSixMonths)

SubClassOf(:PaymentPeriodOfSixMonths :PaymentPeriod)
DisjointClasses(:PaymentPeriodOfSixMonths :PaymentPeriodUnspecified)

# Class: :PaymentPeriodOfThreeWeeks (:PaymentPeriodOfThreeWeeks)

SubClassOf(:PaymentPeriodOfThreeWeeks :PaymentPeriod)
DisjointClasses(:PaymentPeriodOfThreeWeeks :PaymentPeriodUnspecified)

# Class: :PaymentPeriodOfTwoMonths (:PaymentPeriodOfTwoMonths)

SubClassOf(:PaymentPeriodOfTwoMonths :PaymentPeriod)
DisjointClasses(:PaymentPeriodOfTwoMonths :PaymentPeriodUnspecified)

# Class: :PaymentPeriodUnspecified (:PaymentPeriodUnspecified)

SubClassOf(:PaymentPeriodUnspecified :PaymentPeriod)

# Class: :PensionIncome (:PensionIncome)

SubClassOf(:PensionIncome :MonthlyIncomeComponentAmount)

# Class: :PensionableAgeFemale (:PensionableAgeFemale)

SubClassOf(:PensionableAgeFemale :Female)
SubClassOf(:PensionableAgeFemale DataSomeValuesFrom(:hasAgeValueInYears DatatypeRestriction(xsd:positiveInteger xsd:minInclusive "67"^^xsd:positiveInteger)))

# Class: :PensionableAgeMale (:PensionableAgeMale)

SubClassOf(:PensionableAgeMale :Male)
SubClassOf(:PensionableAgeMale DataSomeValuesFrom(:hasAgeValueInYears DatatypeRestriction(xsd:nonNegativeInteger xsd:minInclusive "67"^^xsd:nonNegativeInteger)))

# Class: :PensionableAgePerson (:PensionableAgePerson)

SubClassOf(:PensionableAgePerson :Person)
SubClassOf(:PensionableAgePerson ObjectUnionOf(:PensionableAgeFemale :PensionableAgeMale))

# Class: :Permanent (:Permanent)

SubClassOf(:Permanent :EconomicActivity)
DisjointClasses(:Permanent :Temporary)

# Class: :Person (:Person)

DisjointUnion(:Person :Female :Male)

# Class: :PersonInEmployment (:PersonInEmployment)

SubClassOf(:PersonInEmployment :Person)
SubClassOf(:PersonInEmployment ObjectSomeValuesFrom(:hasFullOrPartTimePrimaryJobAndNotSelfEmployed :PrimaryJob))
DisjointClasses(:PersonInEmployment :UnemployedPerson)

# Class: :PersonInFullTimeEmployment (:PersonInFullTimeEmployment)

SubClassOf(:PersonInFullTimeEmployment :PersonInEmployment)
SubClassOf(:PersonInFullTimeEmployment ObjectSomeValuesFrom(:hasFullOrPartTimePrimaryJobAndNotSelfEmployed :FullTime))

# Class: :PersonInPaidEmployment (:PersonInPaidEmployment)

SubClassOf(:PersonInPaidEmployment :PersonInEmployment)

# Class: :PersonInPartTimeEmployment (:PersonInPartTimeEmployment)

SubClassOf(:PersonInPartTimeEmployment :PersonInEmployment)
SubClassOf(:PersonInPartTimeEmployment ObjectSomeValuesFrom(:hasFullOrPartTimePrimaryJobAndNotSelfEmployed :PartTime))

# Class: :PersonInUnpaidEmployment (:PersonInUnpaidEmployment)

SubClassOf(:PersonInUnpaidEmployment :PersonInEmployment)

# Class: :PersonWithNoUKVocationalQualifications (:PersonWithNoUKVocationalQualifications)

SubClassOf(:PersonWithNoUKVocationalQualifications :Person)
DisjointClasses(:PersonWithNoUKVocationalQualifications :PersonWithUKVocationalQualifications)

# Class: :PersonWithPermanentEmploymentContract (:PersonWithPermanentEmploymentContract)

SubClassOf(:PersonWithPermanentEmploymentContract :PersonInEmployment)

# Class: :PersonWithTemporaryEmploymentContract (:PersonWithTemporaryEmploymentContract)

SubClassOf(:PersonWithTemporaryEmploymentContract :PersonInEmployment)

# Class: :PersonWithUKVocationalQualifications (:PersonWithUKVocationalQualifications)

SubClassOf(:PersonWithUKVocationalQualifications :Person)
SubClassOf(:PersonWithUKVocationalQualifications ObjectSomeValuesFrom(:hasVocationalQualification :VocationalOrProfessionalOrTechnicalQualification))

# Class: :PersonalIncome (:PersonalIncome)

SubClassOf(:PersonalIncome :Income)

# Class: :PlaidCymru (:PlaidCymru)

SubClassOf(:PlaidCymru :PoliticalParty)

# Class: :PowerSupply (:PowerSupply)

SubClassOf(:PowerSupply :Consumption)

# Class: :PrimaryJob (:PrimaryJob)

SubClassOf(:PrimaryJob :EconomicActivity)

# Class: :PrivateBenefitIncome (:PrivateBenefitIncome)

SubClassOf(:PrivateBenefitIncome :MonthlyIncomeComponentAmount)

# Class: :Proxy (:Proxy)

AnnotationAssertion(rdfs:comment :Proxy "Need to find out what this is from Patricia")
SubClassOf(:Proxy :IndeterminateResponse)

# Class: :Qualification (:Qualification)

DisjointUnion(:Qualification :NoQualifications :NonUKQualification :UKQualification)

# Class: :RSAOrOCROrCleriOrCommQualification (:RSAOrOCROrCleriOrCommQualification)

AnnotationAssertion(rdfs:comment :RSAOrOCROrCleriOrCommQualification "RSA - Royal School of Art
OCR - Oxford Cambridge and RSA
Cleri - Adminstration or Clerical?
Comm - Communications?")
SubClassOf(:RSAOrOCROrCleriOrCommQualification :VocationalOrProfessionalOrTechnicalQualification)

# Class: :Refused (:Refused)

SubClassOf(:Refused :NegativeResponse)

# Class: :Respect (:Respect)

SubClassOf(:Respect :PoliticalParty)

# Class: :Retired (:Retired)

SubClassOf(:Retired :EconomicActivity)

# Class: :SDLP (:SDLP)

SubClassOf(:SDLP :PoliticalParty)

# Class: :ScotVECorScoTECOrScotBEC (:ScotVECorScoTECOrScotBEC)

AnnotationAssertion(rdfs:comment :ScotVECorScoTECOrScotBEC "SCOTVEC - Scottish Vocational EducationCouncil
SCOTEC - Scottish Technical Education Council
SCOTBEC - Scottish Business Education Council")
SubClassOf(:ScotVECorScoTECOrScotBEC :ScottishQualification)
SubClassOf(:ScotVECorScoTECOrScotBEC :VocationalOrProfessionalOrTechnicalQualification)

# Class: :ScottishNationalParty (:ScottishNationalParty)

SubClassOf(:ScottishNationalParty :PoliticalParty)

# Class: :ScottishQualification (:ScottishQualification)

SubClassOf(:ScottishQualification :UKQualification)

# Class: :SecondJob (:SecondJob)

SubClassOf(:SecondJob :EconomicActivity)

# Class: :SelfDriven (:SelfDriven)

SubClassOf(:SelfDriven :CarOrVan)

# Class: :SelfEmployed (:SelfEmployed)

SubClassOf(:SelfEmployed :EconomicActivity)

# Class: :SelfEmployedIncome (:SelfEmployedIncome)

AnnotationAssertion(rdfs:seeAlso :SelfEmployedIncome :BusinessIncome)
SubClassOf(:SelfEmployedIncome :PersonalIncome)

# Class: :SelfEmployedPerson (:SelfEmployedPerson)

SubClassOf(:SelfEmployedPerson :PersonInEmployment)
SubClassOf(:SelfEmployedPerson ObjectSomeValuesFrom(:isEmployedOrSelfEmployed :SelfEmployed))

# Class: :ShareOfIncomeFromBenefitsAndIncomeNEC (:ShareOfIncomeFromBenefitsAndIncomeNEC)

SubClassOf(:ShareOfIncomeFromBenefitsAndIncomeNEC :PersonalIncome)
DisjointClasses(:ShareOfIncomeFromBenefitsAndIncomeNEC :UsualGrossPayPerMonthForPrimaryJob)
DisjointClasses(:ShareOfIncomeFromBenefitsAndIncomeNEC :UsualGrossPayPerMonthIfSelfEmployed)
DisjointClasses(:ShareOfIncomeFromBenefitsAndIncomeNEC :UsualNetPayPerMonthForPrimaryJob)
DisjointClasses(:ShareOfIncomeFromBenefitsAndIncomeNEC :UsualNetPayPerMonthIfSelfEmployed)
DisjointClasses(:ShareOfIncomeFromBenefitsAndIncomeNEC :YearlyIncomeFromInvestmentsAndSavings)

# Class: :SingleAdult (:SingleAdult)

SubClassOf(:SingleAdult :Adult)

# Class: :SinnFein (:SinnFein)

SubClassOf(:SinnFein :PoliticalParty)

# Class: :SocialBenefitIncome (:SocialBenefitIncome)

SubClassOf(:SocialBenefitIncome :MonthlyIncomeComponentAmount)

# Class: :Socialist (:Socialist)

SubClassOf(:Socialist :PoliticalParty)

# Class: :SolarHeatedWater (:SolarHeatedWater)

SubClassOf(:SolarHeatedWater :HomeGeneration)

# Class: :SolarPanels (:SolarPanels)

SubClassOf(:SolarPanels :HomeGeneration)

# Class: :SolidFuelOrOther (:SolidFuelOrOther)

SubClassOf(:SolidFuelOrOther :ExternalPowerSupply)

# Class: :StandardOrOrdinaryOrLowerScotland (:StandardOrOrdinaryOrLowerScotland)

SubClassOf(:StandardOrOrdinaryOrLowerScotland :ScottishQualification)

# Class: :Student (:Student)

SubClassOf(:Student :EconomicActivity)

# Class: :TakeHomePay (:TakeHomePay)

SubClassOf(:TakeHomePay :PersonalIncome)

# Class: :TaxiOrMiniCab (:TaxiOrMiniCab)

SubClassOf(:TaxiOrMiniCab :Transport)

# Class: :TeachingQualification (:TeachingQualification)

SubClassOf(:TeachingQualification :Qualification)

# Class: :Telephone (:Telephone)

SubClassOf(:Telephone :ConsumerElectronics)

# Class: :Temporary (:Temporary)

SubClassOf(:Temporary :EconomicActivity)

# Class: :TotalEarningsWeekNoIncome (:TotalEarningsWeekNoIncome)

SubClassOf(:TotalEarningsWeekNoIncome :TotalEarningsWeekly)
DisjointClasses(:TotalEarningsWeekNoIncome :TotalEarningsWeekly100To149)
DisjointClasses(:TotalEarningsWeekNoIncome :TotalEarningsWeekly150To239)
DisjointClasses(:TotalEarningsWeekNoIncome :TotalEarningsWeekly240To319)
DisjointClasses(:TotalEarningsWeekNoIncome :TotalEarningsWeekly320To379)
DisjointClasses(:TotalEarningsWeekNoIncome :TotalEarningsWeekly380To459)
DisjointClasses(:TotalEarningsWeekNoIncome :TotalEarningsWeekly460To559)
DisjointClasses(:TotalEarningsWeekNoIncome :TotalEarningsWeekly560To669)
DisjointClasses(:TotalEarningsWeekNoIncome :TotalEarningsWeekly670To859)
DisjointClasses(:TotalEarningsWeekNoIncome :TotalEarningsWeekly860OrMore)
DisjointClasses(:TotalEarningsWeekNoIncome :TotalEarningsWeeklyUpTo99)

# Class: :TotalEarningsWeekly (:TotalEarningsWeekly)

SubClassOf(:TotalEarningsWeekly :Earnings)
DisjointUnion(:TotalEarningsWeekly :TotalEarningsWeekNoIncome :TotalEarningsWeekly100To149 :TotalEarningsWeekly150To239 :TotalEarningsWeekly240To319 :TotalEarningsWeekly320To379 :TotalEarningsWeekly380To459 :TotalEarningsWeekly460To559 :TotalEarningsWeekly560To669 :TotalEarningsWeekly670To859 :TotalEarningsWeekly860OrMore :TotalEarningsWeeklyUpTo99)

# Class: :TotalEarningsWeekly100To149 (:TotalEarningsWeekly100To149)

SubClassOf(:TotalEarningsWeekly100To149 :TotalEarningsWeekly)
DisjointClasses(:TotalEarningsWeekly100To149 :TotalEarningsWeekly150To239)
DisjointClasses(:TotalEarningsWeekly100To149 :TotalEarningsWeekly240To319)
DisjointClasses(:TotalEarningsWeekly100To149 :TotalEarningsWeekly320To379)
DisjointClasses(:TotalEarningsWeekly100To149 :TotalEarningsWeekly380To459)
DisjointClasses(:TotalEarningsWeekly100To149 :TotalEarningsWeekly460To559)
DisjointClasses(:TotalEarningsWeekly100To149 :TotalEarningsWeekly560To669)
DisjointClasses(:TotalEarningsWeekly100To149 :TotalEarningsWeekly670To859)
DisjointClasses(:TotalEarningsWeekly100To149 :TotalEarningsWeekly860OrMore)
DisjointClasses(:TotalEarningsWeekly100To149 :TotalEarningsWeeklyUpTo99)

# Class: :TotalEarningsWeekly150To239 (:TotalEarningsWeekly150To239)

SubClassOf(:TotalEarningsWeekly150To239 :TotalEarningsWeekly)
DisjointClasses(:TotalEarningsWeekly150To239 :TotalEarningsWeekly240To319)
DisjointClasses(:TotalEarningsWeekly150To239 :TotalEarningsWeekly320To379)
DisjointClasses(:TotalEarningsWeekly150To239 :TotalEarningsWeekly380To459)
DisjointClasses(:TotalEarningsWeekly150To239 :TotalEarningsWeekly460To559)
DisjointClasses(:TotalEarningsWeekly150To239 :TotalEarningsWeekly560To669)
DisjointClasses(:TotalEarningsWeekly150To239 :TotalEarningsWeekly670To859)
DisjointClasses(:TotalEarningsWeekly150To239 :TotalEarningsWeekly860OrMore)
DisjointClasses(:TotalEarningsWeekly150To239 :TotalEarningsWeeklyUpTo99)

# Class: :TotalEarningsWeekly240To319 (:TotalEarningsWeekly240To319)

SubClassOf(:TotalEarningsWeekly240To319 :TotalEarningsWeekly)
DisjointClasses(:TotalEarningsWeekly240To319 :TotalEarningsWeekly320To379)
DisjointClasses(:TotalEarningsWeekly240To319 :TotalEarningsWeekly380To459)
DisjointClasses(:TotalEarningsWeekly240To319 :TotalEarningsWeekly460To559)
DisjointClasses(:TotalEarningsWeekly240To319 :TotalEarningsWeekly560To669)
DisjointClasses(:TotalEarningsWeekly240To319 :TotalEarningsWeekly670To859)
DisjointClasses(:TotalEarningsWeekly240To319 :TotalEarningsWeekly860OrMore)
DisjointClasses(:TotalEarningsWeekly240To319 :TotalEarningsWeeklyUpTo99)

# Class: :TotalEarningsWeekly320To379 (:TotalEarningsWeekly320To379)

SubClassOf(:TotalEarningsWeekly320To379 :TotalEarningsWeekly)
DisjointClasses(:TotalEarningsWeekly320To379 :TotalEarningsWeekly380To459)
DisjointClasses(:TotalEarningsWeekly320To379 :TotalEarningsWeekly460To559)
DisjointClasses(:TotalEarningsWeekly320To379 :TotalEarningsWeekly560To669)
DisjointClasses(:TotalEarningsWeekly320To379 :TotalEarningsWeekly670To859)
DisjointClasses(:TotalEarningsWeekly320To379 :TotalEarningsWeekly860OrMore)
DisjointClasses(:TotalEarningsWeekly320To379 :TotalEarningsWeeklyUpTo99)

# Class: :TotalEarningsWeekly380To459 (:TotalEarningsWeekly380To459)

SubClassOf(:TotalEarningsWeekly380To459 :TotalEarningsWeekly)
DisjointClasses(:TotalEarningsWeekly380To459 :TotalEarningsWeekly460To559)
DisjointClasses(:TotalEarningsWeekly380To459 :TotalEarningsWeekly560To669)
DisjointClasses(:TotalEarningsWeekly380To459 :TotalEarningsWeekly670To859)
DisjointClasses(:TotalEarningsWeekly380To459 :TotalEarningsWeekly860OrMore)
DisjointClasses(:TotalEarningsWeekly380To459 :TotalEarningsWeeklyUpTo99)

# Class: :TotalEarningsWeekly460To559 (:TotalEarningsWeekly460To559)

SubClassOf(:TotalEarningsWeekly460To559 :TotalEarningsWeekly)
DisjointClasses(:TotalEarningsWeekly460To559 :TotalEarningsWeekly560To669)
DisjointClasses(:TotalEarningsWeekly460To559 :TotalEarningsWeekly670To859)
DisjointClasses(:TotalEarningsWeekly460To559 :TotalEarningsWeekly860OrMore)
DisjointClasses(:TotalEarningsWeekly460To559 :TotalEarningsWeeklyUpTo99)

# Class: :TotalEarningsWeekly560To669 (:TotalEarningsWeekly560To669)

SubClassOf(:TotalEarningsWeekly560To669 :TotalEarningsWeekly)
DisjointClasses(:TotalEarningsWeekly560To669 :TotalEarningsWeekly670To859)
DisjointClasses(:TotalEarningsWeekly560To669 :TotalEarningsWeekly860OrMore)
DisjointClasses(:TotalEarningsWeekly560To669 :TotalEarningsWeeklyUpTo99)

# Class: :TotalEarningsWeekly670To859 (:TotalEarningsWeekly670To859)

SubClassOf(:TotalEarningsWeekly670To859 :TotalEarningsWeekly)
DisjointClasses(:TotalEarningsWeekly670To859 :TotalEarningsWeekly860OrMore)
DisjointClasses(:TotalEarningsWeekly670To859 :TotalEarningsWeeklyUpTo99)

# Class: :TotalEarningsWeekly860OrMore (:TotalEarningsWeekly860OrMore)

SubClassOf(:TotalEarningsWeekly860OrMore :TotalEarningsWeekly)
DisjointClasses(:TotalEarningsWeekly860OrMore :TotalEarningsWeeklyUpTo99)

# Class: :TotalEarningsWeeklyUpTo99 (:TotalEarningsWeeklyUpTo99)

SubClassOf(:TotalEarningsWeeklyUpTo99 :TotalEarningsWeekly)

# Class: :TotalEarningsYearly (:TotalEarningsYearly)

AnnotationAssertion(rdfs:comment :TotalEarningsYearly "I am trying to find out what is the difference between Earnings and Net Income. All I can find is:

\"In other words, revenues is the amount earned before deducting the cost of goods sold, expenses, and losses. Earnings is the net amount earned after deducting the cost of goods sold, expenses and losses. It is often presented as net earnings or net income.\"

http://www.google.co.uk/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&cad=rja&uact=8&ved=0ahUKEwjIoeKJgYLNAhWKcBoKHdSQDH8QFggeMAE&url=http%3A%2F%2Fwww.accountingcoach.com%2Fblog%2Fwhat-is-the-difference-between-revenues-and-earnings&usg=AFQjCNFQqAPVQA3zLAdFJYsmJaY01zwAAQ&sig2=YZpdFMj4bkk9ZIlo8FJz4A&bvm=bv.123325700,d.d2s"^^xsd:string)
SubClassOf(:TotalEarningsYearly :Earnings)
DisjointUnion(:TotalEarningsYearly :TotalEarningsYearly12500To16599 :TotalEarningsYearly16600To19999 :TotalEarningsYearly20000To23999 :TotalEarningsYearly24000To29999 :TotalEarningsYearly30000To34999 :TotalEarningsYearly35000To44999 :TotalEarningsYearly45000OrMore :TotalEarningsYearly5200To7799 :TotalEarningsYearly7800To12499 :TotalEarningsYearlyNoIncome :TotalEarningsYearlyUpTo5199)

# Class: :TotalEarningsYearly12500To16599 (:TotalEarningsYearly12500To16599)

SubClassOf(:TotalEarningsYearly12500To16599 :TotalEarningsYearly)
DisjointClasses(:TotalEarningsYearly12500To16599 :TotalEarningsYearly16600To19999)
DisjointClasses(:TotalEarningsYearly12500To16599 :TotalEarningsYearly20000To23999)
DisjointClasses(:TotalEarningsYearly12500To16599 :TotalEarningsYearly24000To29999)
DisjointClasses(:TotalEarningsYearly12500To16599 :TotalEarningsYearly30000To34999)
DisjointClasses(:TotalEarningsYearly12500To16599 :TotalEarningsYearly35000To44999)
DisjointClasses(:TotalEarningsYearly12500To16599 :TotalEarningsYearly45000OrMore)
DisjointClasses(:TotalEarningsYearly12500To16599 :TotalEarningsYearly5200To7799)
DisjointClasses(:TotalEarningsYearly12500To16599 :TotalEarningsYearly7800To12499)
DisjointClasses(:TotalEarningsYearly12500To16599 :TotalEarningsYearlyNoIncome)
DisjointClasses(:TotalEarningsYearly12500To16599 :TotalEarningsYearlyUpTo5199)

# Class: :TotalEarningsYearly16600To19999 (:TotalEarningsYearly16600To19999)

SubClassOf(:TotalEarningsYearly16600To19999 :TotalEarningsYearly)
DisjointClasses(:TotalEarningsYearly16600To19999 :TotalEarningsYearly20000To23999)
DisjointClasses(:TotalEarningsYearly16600To19999 :TotalEarningsYearly24000To29999)
DisjointClasses(:TotalEarningsYearly16600To19999 :TotalEarningsYearly30000To34999)
DisjointClasses(:TotalEarningsYearly16600To19999 :TotalEarningsYearly35000To44999)
DisjointClasses(:TotalEarningsYearly16600To19999 :TotalEarningsYearly45000OrMore)
DisjointClasses(:TotalEarningsYearly16600To19999 :TotalEarningsYearly5200To7799)
DisjointClasses(:TotalEarningsYearly16600To19999 :TotalEarningsYearly7800To12499)
DisjointClasses(:TotalEarningsYearly16600To19999 :TotalEarningsYearlyNoIncome)
DisjointClasses(:TotalEarningsYearly16600To19999 :TotalEarningsYearlyUpTo5199)

# Class: :TotalEarningsYearly20000To23999 (:TotalEarningsYearly20000To23999)

SubClassOf(:TotalEarningsYearly20000To23999 :TotalEarningsYearly)
DisjointClasses(:TotalEarningsYearly20000To23999 :TotalEarningsYearly24000To29999)
DisjointClasses(:TotalEarningsYearly20000To23999 :TotalEarningsYearly30000To34999)
DisjointClasses(:TotalEarningsYearly20000To23999 :TotalEarningsYearly35000To44999)
DisjointClasses(:TotalEarningsYearly20000To23999 :TotalEarningsYearly45000OrMore)
DisjointClasses(:TotalEarningsYearly20000To23999 :TotalEarningsYearly5200To7799)
DisjointClasses(:TotalEarningsYearly20000To23999 :TotalEarningsYearly7800To12499)
DisjointClasses(:TotalEarningsYearly20000To23999 :TotalEarningsYearlyNoIncome)
DisjointClasses(:TotalEarningsYearly20000To23999 :TotalEarningsYearlyUpTo5199)

# Class: :TotalEarningsYearly24000To29999 (:TotalEarningsYearly24000To29999)

SubClassOf(:TotalEarningsYearly24000To29999 :TotalEarningsYearly)
DisjointClasses(:TotalEarningsYearly24000To29999 :TotalEarningsYearly30000To34999)
DisjointClasses(:TotalEarningsYearly24000To29999 :TotalEarningsYearly35000To44999)
DisjointClasses(:TotalEarningsYearly24000To29999 :TotalEarningsYearly45000OrMore)
DisjointClasses(:TotalEarningsYearly24000To29999 :TotalEarningsYearly5200To7799)
DisjointClasses(:TotalEarningsYearly24000To29999 :TotalEarningsYearly7800To12499)
DisjointClasses(:TotalEarningsYearly24000To29999 :TotalEarningsYearlyNoIncome)
DisjointClasses(:TotalEarningsYearly24000To29999 :TotalEarningsYearlyUpTo5199)

# Class: :TotalEarningsYearly30000To34999 (:TotalEarningsYearly30000To34999)

SubClassOf(:TotalEarningsYearly30000To34999 :TotalEarningsYearly)
DisjointClasses(:TotalEarningsYearly30000To34999 :TotalEarningsYearly35000To44999)
DisjointClasses(:TotalEarningsYearly30000To34999 :TotalEarningsYearly45000OrMore)
DisjointClasses(:TotalEarningsYearly30000To34999 :TotalEarningsYearly5200To7799)
DisjointClasses(:TotalEarningsYearly30000To34999 :TotalEarningsYearly7800To12499)
DisjointClasses(:TotalEarningsYearly30000To34999 :TotalEarningsYearlyNoIncome)
DisjointClasses(:TotalEarningsYearly30000To34999 :TotalEarningsYearlyUpTo5199)

# Class: :TotalEarningsYearly35000To44999 (:TotalEarningsYearly35000To44999)

SubClassOf(:TotalEarningsYearly35000To44999 :TotalEarningsYearly)
DisjointClasses(:TotalEarningsYearly35000To44999 :TotalEarningsYearly45000OrMore)
DisjointClasses(:TotalEarningsYearly35000To44999 :TotalEarningsYearly5200To7799)
DisjointClasses(:TotalEarningsYearly35000To44999 :TotalEarningsYearly7800To12499)
DisjointClasses(:TotalEarningsYearly35000To44999 :TotalEarningsYearlyNoIncome)
DisjointClasses(:TotalEarningsYearly35000To44999 :TotalEarningsYearlyUpTo5199)

# Class: :TotalEarningsYearly45000OrMore (:TotalEarningsYearly45000OrMore)

SubClassOf(:TotalEarningsYearly45000OrMore :TotalEarningsYearly)
DisjointClasses(:TotalEarningsYearly45000OrMore :TotalEarningsYearly5200To7799)
DisjointClasses(:TotalEarningsYearly45000OrMore :TotalEarningsYearly7800To12499)
DisjointClasses(:TotalEarningsYearly45000OrMore :TotalEarningsYearlyNoIncome)
DisjointClasses(:TotalEarningsYearly45000OrMore :TotalEarningsYearlyUpTo5199)

# Class: :TotalEarningsYearly5200To7799 (:TotalEarningsYearly5200To7799)

SubClassOf(:TotalEarningsYearly5200To7799 :TotalEarningsYearly)
DisjointClasses(:TotalEarningsYearly5200To7799 :TotalEarningsYearly7800To12499)
DisjointClasses(:TotalEarningsYearly5200To7799 :TotalEarningsYearlyNoIncome)
DisjointClasses(:TotalEarningsYearly5200To7799 :TotalEarningsYearlyUpTo5199)

# Class: :TotalEarningsYearly7800To12499 (:TotalEarningsYearly7800To12499)

SubClassOf(:TotalEarningsYearly7800To12499 :TotalEarningsYearly)
DisjointClasses(:TotalEarningsYearly7800To12499 :TotalEarningsYearlyNoIncome)
DisjointClasses(:TotalEarningsYearly7800To12499 :TotalEarningsYearlyUpTo5199)

# Class: :TotalEarningsYearlyNoIncome (:TotalEarningsYearlyNoIncome)

SubClassOf(:TotalEarningsYearlyNoIncome :TotalEarningsYearly)
DisjointClasses(:TotalEarningsYearlyNoIncome :TotalEarningsYearlyUpTo5199)

# Class: :TotalEarningsYearlyUpTo5199 (:TotalEarningsYearlyUpTo5199)

SubClassOf(:TotalEarningsYearlyUpTo5199 :TotalEarningsYearly)

# Class: :TotalMonthlyLabourIncome (:TotalMonthlyLabourIncome)

SubClassOf(:TotalMonthlyLabourIncome :MonthlyPersonalIncome)

# Class: :TotalMonthlyPersonalIncome (:TotalMonthlyPersonalIncome)

SubClassOf(:TotalMonthlyPersonalIncome :MonthlyPersonalIncome)

# Class: :TotalNetPersonalIncome (:TotalNetPersonalIncome)

SubClassOf(:TotalNetPersonalIncome :PersonalIncome)

# Class: :TotalPersonalIncome (:TotalPersonalIncome)

SubClassOf(:TotalPersonalIncome :PersonalIncome)

# Class: :TotalPersonalIncomeWeekly (:TotalPersonalIncomeWeekly)

SubClassOf(:TotalPersonalIncomeWeekly :WeeklyPersonalIncome)
DisjointUnion(:TotalPersonalIncomeWeekly :TotalPersonalIncomeWeekly140To199 :TotalPersonalIncomeWeekly200To249 :TotalPersonalIncomeWeekly250To324 :TotalPersonalIncomeWeekly325To399 :TotalPersonalIncomeWeekly400To499 :TotalPersonalIncomeWeekly500To624 :TotalPersonalIncomeWeekly625To749 :TotalPersonalIncomeWeekly750OrMore :TotalPersonalIncomeWeekly75To139 :TotalPersonalIncomeWeeklyNoIncome :TotalPersonalIncomeWeeklyUpTo74)

# Class: :TotalPersonalIncomeWeekly140To199 (:TotalPersonalIncomeWeekly140To199)

SubClassOf(:TotalPersonalIncomeWeekly140To199 :TotalPersonalIncomeWeekly)
DisjointClasses(:TotalPersonalIncomeWeekly140To199 :TotalPersonalIncomeWeekly200To249)
DisjointClasses(:TotalPersonalIncomeWeekly140To199 :TotalPersonalIncomeWeekly250To324)
DisjointClasses(:TotalPersonalIncomeWeekly140To199 :TotalPersonalIncomeWeekly325To399)
DisjointClasses(:TotalPersonalIncomeWeekly140To199 :TotalPersonalIncomeWeekly400To499)
DisjointClasses(:TotalPersonalIncomeWeekly140To199 :TotalPersonalIncomeWeekly500To624)
DisjointClasses(:TotalPersonalIncomeWeekly140To199 :TotalPersonalIncomeWeekly625To749)
DisjointClasses(:TotalPersonalIncomeWeekly140To199 :TotalPersonalIncomeWeekly750OrMore)
DisjointClasses(:TotalPersonalIncomeWeekly140To199 :TotalPersonalIncomeWeekly75To139)
DisjointClasses(:TotalPersonalIncomeWeekly140To199 :TotalPersonalIncomeWeeklyNoIncome)
DisjointClasses(:TotalPersonalIncomeWeekly140To199 :TotalPersonalIncomeWeeklyUpTo74)

# Class: :TotalPersonalIncomeWeekly200To249 (:TotalPersonalIncomeWeekly200To249)

SubClassOf(:TotalPersonalIncomeWeekly200To249 :TotalPersonalIncomeWeekly)
DisjointClasses(:TotalPersonalIncomeWeekly200To249 :TotalPersonalIncomeWeekly250To324)
DisjointClasses(:TotalPersonalIncomeWeekly200To249 :TotalPersonalIncomeWeekly325To399)
DisjointClasses(:TotalPersonalIncomeWeekly200To249 :TotalPersonalIncomeWeekly400To499)
DisjointClasses(:TotalPersonalIncomeWeekly200To249 :TotalPersonalIncomeWeekly500To624)
DisjointClasses(:TotalPersonalIncomeWeekly200To249 :TotalPersonalIncomeWeekly625To749)
DisjointClasses(:TotalPersonalIncomeWeekly200To249 :TotalPersonalIncomeWeekly750OrMore)
DisjointClasses(:TotalPersonalIncomeWeekly200To249 :TotalPersonalIncomeWeekly75To139)
DisjointClasses(:TotalPersonalIncomeWeekly200To249 :TotalPersonalIncomeWeeklyNoIncome)
DisjointClasses(:TotalPersonalIncomeWeekly200To249 :TotalPersonalIncomeWeeklyUpTo74)

# Class: :TotalPersonalIncomeWeekly250To324 (:TotalPersonalIncomeWeekly250To324)

SubClassOf(:TotalPersonalIncomeWeekly250To324 :TotalPersonalIncomeWeekly)
DisjointClasses(:TotalPersonalIncomeWeekly250To324 :TotalPersonalIncomeWeekly325To399)
DisjointClasses(:TotalPersonalIncomeWeekly250To324 :TotalPersonalIncomeWeekly400To499)
DisjointClasses(:TotalPersonalIncomeWeekly250To324 :TotalPersonalIncomeWeekly500To624)
DisjointClasses(:TotalPersonalIncomeWeekly250To324 :TotalPersonalIncomeWeekly625To749)
DisjointClasses(:TotalPersonalIncomeWeekly250To324 :TotalPersonalIncomeWeekly750OrMore)
DisjointClasses(:TotalPersonalIncomeWeekly250To324 :TotalPersonalIncomeWeekly75To139)
DisjointClasses(:TotalPersonalIncomeWeekly250To324 :TotalPersonalIncomeWeeklyNoIncome)
DisjointClasses(:TotalPersonalIncomeWeekly250To324 :TotalPersonalIncomeWeeklyUpTo74)

# Class: :TotalPersonalIncomeWeekly325To399 (:TotalPersonalIncomeWeekly325To399)

SubClassOf(:TotalPersonalIncomeWeekly325To399 :TotalPersonalIncomeWeekly)
DisjointClasses(:TotalPersonalIncomeWeekly325To399 :TotalPersonalIncomeWeekly400To499)
DisjointClasses(:TotalPersonalIncomeWeekly325To399 :TotalPersonalIncomeWeekly500To624)
DisjointClasses(:TotalPersonalIncomeWeekly325To399 :TotalPersonalIncomeWeekly625To749)
DisjointClasses(:TotalPersonalIncomeWeekly325To399 :TotalPersonalIncomeWeekly750OrMore)
DisjointClasses(:TotalPersonalIncomeWeekly325To399 :TotalPersonalIncomeWeekly75To139)
DisjointClasses(:TotalPersonalIncomeWeekly325To399 :TotalPersonalIncomeWeeklyNoIncome)
DisjointClasses(:TotalPersonalIncomeWeekly325To399 :TotalPersonalIncomeWeeklyUpTo74)

# Class: :TotalPersonalIncomeWeekly400To499 (:TotalPersonalIncomeWeekly400To499)

SubClassOf(:TotalPersonalIncomeWeekly400To499 :TotalPersonalIncomeWeekly)
DisjointClasses(:TotalPersonalIncomeWeekly400To499 :TotalPersonalIncomeWeekly500To624)
DisjointClasses(:TotalPersonalIncomeWeekly400To499 :TotalPersonalIncomeWeekly625To749)
DisjointClasses(:TotalPersonalIncomeWeekly400To499 :TotalPersonalIncomeWeekly750OrMore)
DisjointClasses(:TotalPersonalIncomeWeekly400To499 :TotalPersonalIncomeWeekly75To139)
DisjointClasses(:TotalPersonalIncomeWeekly400To499 :TotalPersonalIncomeWeeklyNoIncome)
DisjointClasses(:TotalPersonalIncomeWeekly400To499 :TotalPersonalIncomeWeeklyUpTo74)

# Class: :TotalPersonalIncomeWeekly500To624 (:TotalPersonalIncomeWeekly500To624)

SubClassOf(:TotalPersonalIncomeWeekly500To624 :TotalPersonalIncomeWeekly)
DisjointClasses(:TotalPersonalIncomeWeekly500To624 :TotalPersonalIncomeWeekly625To749)
DisjointClasses(:TotalPersonalIncomeWeekly500To624 :TotalPersonalIncomeWeekly750OrMore)
DisjointClasses(:TotalPersonalIncomeWeekly500To624 :TotalPersonalIncomeWeekly75To139)
DisjointClasses(:TotalPersonalIncomeWeekly500To624 :TotalPersonalIncomeWeeklyNoIncome)
DisjointClasses(:TotalPersonalIncomeWeekly500To624 :TotalPersonalIncomeWeeklyUpTo74)

# Class: :TotalPersonalIncomeWeekly625To749 (:TotalPersonalIncomeWeekly625To749)

SubClassOf(:TotalPersonalIncomeWeekly625To749 :TotalPersonalIncomeWeekly)
DisjointClasses(:TotalPersonalIncomeWeekly625To749 :TotalPersonalIncomeWeekly750OrMore)
DisjointClasses(:TotalPersonalIncomeWeekly625To749 :TotalPersonalIncomeWeekly75To139)
DisjointClasses(:TotalPersonalIncomeWeekly625To749 :TotalPersonalIncomeWeeklyNoIncome)
DisjointClasses(:TotalPersonalIncomeWeekly625To749 :TotalPersonalIncomeWeeklyUpTo74)

# Class: :TotalPersonalIncomeWeekly750OrMore (:TotalPersonalIncomeWeekly750OrMore)

SubClassOf(:TotalPersonalIncomeWeekly750OrMore :TotalPersonalIncomeWeekly)
DisjointClasses(:TotalPersonalIncomeWeekly750OrMore :TotalPersonalIncomeWeekly75To139)
DisjointClasses(:TotalPersonalIncomeWeekly750OrMore :TotalPersonalIncomeWeeklyNoIncome)
DisjointClasses(:TotalPersonalIncomeWeekly750OrMore :TotalPersonalIncomeWeeklyUpTo74)

# Class: :TotalPersonalIncomeWeekly75To139 (:TotalPersonalIncomeWeekly75To139)

SubClassOf(:TotalPersonalIncomeWeekly75To139 :TotalPersonalIncomeWeekly)
DisjointClasses(:TotalPersonalIncomeWeekly75To139 :TotalPersonalIncomeWeeklyNoIncome)
DisjointClasses(:TotalPersonalIncomeWeekly75To139 :TotalPersonalIncomeWeeklyUpTo74)

# Class: :TotalPersonalIncomeWeeklyNoIncome (:TotalPersonalIncomeWeeklyNoIncome)

SubClassOf(:TotalPersonalIncomeWeeklyNoIncome :TotalPersonalIncomeWeekly)
DisjointClasses(:TotalPersonalIncomeWeeklyNoIncome :TotalPersonalIncomeWeeklyUpTo74)

# Class: :TotalPersonalIncomeWeeklyUpTo74 (:TotalPersonalIncomeWeeklyUpTo74)

SubClassOf(:TotalPersonalIncomeWeeklyUpTo74 :TotalPersonalIncomeWeekly)

# Class: :TotalPersonalIncomeYearly (:TotalPersonalIncomeYearly)

SubClassOf(:TotalPersonalIncomeYearly :YearlyPersonalIncome)
DisjointUnion(:TotalPersonalIncomeYearly :TotalPersonalIncomeYearly12600To15599 :TotalPersonalIncomeYearly15600To19199 :TotalPersonalIncomeYearly19200To23999 :TotalPersonalIncomeYearly24000To29999 :TotalPersonalIncomeYearly30000To35999 :TotalPersonalIncomeYearly36000OrMore :TotalPersonalIncomeYearly3600To6599 :TotalPersonalIncomeYearly6600To9599 :TotalPersonalIncomeYearly9600To12599 :TotalPersonalIncomeYearlyNone :TotalPersonalIncomeYearlyUpTo3599)

# Class: :TotalPersonalIncomeYearly12600To15599 (:TotalPersonalIncomeYearly12600To15599)

SubClassOf(:TotalPersonalIncomeYearly12600To15599 :TotalPersonalIncomeYearly)
DisjointClasses(:TotalPersonalIncomeYearly12600To15599 :TotalPersonalIncomeYearly15600To19199)
DisjointClasses(:TotalPersonalIncomeYearly12600To15599 :TotalPersonalIncomeYearly19200To23999)
DisjointClasses(:TotalPersonalIncomeYearly12600To15599 :TotalPersonalIncomeYearly24000To29999)
DisjointClasses(:TotalPersonalIncomeYearly12600To15599 :TotalPersonalIncomeYearly30000To35999)
DisjointClasses(:TotalPersonalIncomeYearly12600To15599 :TotalPersonalIncomeYearly36000OrMore)
DisjointClasses(:TotalPersonalIncomeYearly12600To15599 :TotalPersonalIncomeYearly3600To6599)
DisjointClasses(:TotalPersonalIncomeYearly12600To15599 :TotalPersonalIncomeYearly6600To9599)
DisjointClasses(:TotalPersonalIncomeYearly12600To15599 :TotalPersonalIncomeYearly9600To12599)
DisjointClasses(:TotalPersonalIncomeYearly12600To15599 :TotalPersonalIncomeYearlyNone)
DisjointClasses(:TotalPersonalIncomeYearly12600To15599 :TotalPersonalIncomeYearlyUpTo3599)

# Class: :TotalPersonalIncomeYearly15600To19199 (:TotalPersonalIncomeYearly15600To19199)

SubClassOf(:TotalPersonalIncomeYearly15600To19199 :TotalPersonalIncomeYearly)
DisjointClasses(:TotalPersonalIncomeYearly15600To19199 :TotalPersonalIncomeYearly19200To23999)
DisjointClasses(:TotalPersonalIncomeYearly15600To19199 :TotalPersonalIncomeYearly24000To29999)
DisjointClasses(:TotalPersonalIncomeYearly15600To19199 :TotalPersonalIncomeYearly30000To35999)
DisjointClasses(:TotalPersonalIncomeYearly15600To19199 :TotalPersonalIncomeYearly36000OrMore)
DisjointClasses(:TotalPersonalIncomeYearly15600To19199 :TotalPersonalIncomeYearly3600To6599)
DisjointClasses(:TotalPersonalIncomeYearly15600To19199 :TotalPersonalIncomeYearly6600To9599)
DisjointClasses(:TotalPersonalIncomeYearly15600To19199 :TotalPersonalIncomeYearly9600To12599)
DisjointClasses(:TotalPersonalIncomeYearly15600To19199 :TotalPersonalIncomeYearlyNone)
DisjointClasses(:TotalPersonalIncomeYearly15600To19199 :TotalPersonalIncomeYearlyUpTo3599)

# Class: :TotalPersonalIncomeYearly19200To23999 (:TotalPersonalIncomeYearly19200To23999)

SubClassOf(:TotalPersonalIncomeYearly19200To23999 :TotalPersonalIncomeYearly)
DisjointClasses(:TotalPersonalIncomeYearly19200To23999 :TotalPersonalIncomeYearly24000To29999)
DisjointClasses(:TotalPersonalIncomeYearly19200To23999 :TotalPersonalIncomeYearly30000To35999)
DisjointClasses(:TotalPersonalIncomeYearly19200To23999 :TotalPersonalIncomeYearly36000OrMore)
DisjointClasses(:TotalPersonalIncomeYearly19200To23999 :TotalPersonalIncomeYearly3600To6599)
DisjointClasses(:TotalPersonalIncomeYearly19200To23999 :TotalPersonalIncomeYearly6600To9599)
DisjointClasses(:TotalPersonalIncomeYearly19200To23999 :TotalPersonalIncomeYearly9600To12599)
DisjointClasses(:TotalPersonalIncomeYearly19200To23999 :TotalPersonalIncomeYearlyNone)
DisjointClasses(:TotalPersonalIncomeYearly19200To23999 :TotalPersonalIncomeYearlyUpTo3599)

# Class: :TotalPersonalIncomeYearly24000To29999 (:TotalPersonalIncomeYearly24000To29999)

SubClassOf(:TotalPersonalIncomeYearly24000To29999 :TotalPersonalIncomeYearly)
DisjointClasses(:TotalPersonalIncomeYearly24000To29999 :TotalPersonalIncomeYearly30000To35999)
DisjointClasses(:TotalPersonalIncomeYearly24000To29999 :TotalPersonalIncomeYearly36000OrMore)
DisjointClasses(:TotalPersonalIncomeYearly24000To29999 :TotalPersonalIncomeYearly3600To6599)
DisjointClasses(:TotalPersonalIncomeYearly24000To29999 :TotalPersonalIncomeYearly6600To9599)
DisjointClasses(:TotalPersonalIncomeYearly24000To29999 :TotalPersonalIncomeYearly9600To12599)
DisjointClasses(:TotalPersonalIncomeYearly24000To29999 :TotalPersonalIncomeYearlyNone)
DisjointClasses(:TotalPersonalIncomeYearly24000To29999 :TotalPersonalIncomeYearlyUpTo3599)

# Class: :TotalPersonalIncomeYearly30000To35999 (:TotalPersonalIncomeYearly30000To35999)

SubClassOf(:TotalPersonalIncomeYearly30000To35999 :TotalPersonalIncomeYearly)
DisjointClasses(:TotalPersonalIncomeYearly30000To35999 :TotalPersonalIncomeYearly36000OrMore)
DisjointClasses(:TotalPersonalIncomeYearly30000To35999 :TotalPersonalIncomeYearly3600To6599)
DisjointClasses(:TotalPersonalIncomeYearly30000To35999 :TotalPersonalIncomeYearly6600To9599)
DisjointClasses(:TotalPersonalIncomeYearly30000To35999 :TotalPersonalIncomeYearly9600To12599)
DisjointClasses(:TotalPersonalIncomeYearly30000To35999 :TotalPersonalIncomeYearlyNone)
DisjointClasses(:TotalPersonalIncomeYearly30000To35999 :TotalPersonalIncomeYearlyUpTo3599)

# Class: :TotalPersonalIncomeYearly36000OrMore (:TotalPersonalIncomeYearly36000OrMore)

SubClassOf(:TotalPersonalIncomeYearly36000OrMore :TotalPersonalIncomeYearly)
DisjointClasses(:TotalPersonalIncomeYearly36000OrMore :TotalPersonalIncomeYearly3600To6599)
DisjointClasses(:TotalPersonalIncomeYearly36000OrMore :TotalPersonalIncomeYearly6600To9599)
DisjointClasses(:TotalPersonalIncomeYearly36000OrMore :TotalPersonalIncomeYearly9600To12599)
DisjointClasses(:TotalPersonalIncomeYearly36000OrMore :TotalPersonalIncomeYearlyNone)
DisjointClasses(:TotalPersonalIncomeYearly36000OrMore :TotalPersonalIncomeYearlyUpTo3599)

# Class: :TotalPersonalIncomeYearly3600To6599 (:TotalPersonalIncomeYearly3600To6599)

SubClassOf(:TotalPersonalIncomeYearly3600To6599 :TotalPersonalIncomeYearly)
DisjointClasses(:TotalPersonalIncomeYearly3600To6599 :TotalPersonalIncomeYearly6600To9599)
DisjointClasses(:TotalPersonalIncomeYearly3600To6599 :TotalPersonalIncomeYearly9600To12599)
DisjointClasses(:TotalPersonalIncomeYearly3600To6599 :TotalPersonalIncomeYearlyNone)
DisjointClasses(:TotalPersonalIncomeYearly3600To6599 :TotalPersonalIncomeYearlyUpTo3599)

# Class: :TotalPersonalIncomeYearly6600To9599 (:TotalPersonalIncomeYearly6600To9599)

SubClassOf(:TotalPersonalIncomeYearly6600To9599 :TotalPersonalIncomeYearly)
DisjointClasses(:TotalPersonalIncomeYearly6600To9599 :TotalPersonalIncomeYearly9600To12599)
DisjointClasses(:TotalPersonalIncomeYearly6600To9599 :TotalPersonalIncomeYearlyNone)
DisjointClasses(:TotalPersonalIncomeYearly6600To9599 :TotalPersonalIncomeYearlyUpTo3599)

# Class: :TotalPersonalIncomeYearly9600To12599 (:TotalPersonalIncomeYearly9600To12599)

SubClassOf(:TotalPersonalIncomeYearly9600To12599 :TotalPersonalIncomeYearly)
DisjointClasses(:TotalPersonalIncomeYearly9600To12599 :TotalPersonalIncomeYearlyNone)
DisjointClasses(:TotalPersonalIncomeYearly9600To12599 :TotalPersonalIncomeYearlyUpTo3599)

# Class: :TotalPersonalIncomeYearlyNone (:TotalPersonalIncomeYearlyNone)

SubClassOf(:TotalPersonalIncomeYearlyNone :TotalPersonalIncomeYearly)
DisjointClasses(:TotalPersonalIncomeYearlyNone :TotalPersonalIncomeYearlyUpTo3599)

# Class: :TotalPersonalIncomeYearlyUpTo3599 (:TotalPersonalIncomeYearlyUpTo3599)

SubClassOf(:TotalPersonalIncomeYearlyUpTo3599 :TotalPersonalIncomeYearly)

# Class: :TraditionalUnionistVoice (:TraditionalUnionistVoice)

SubClassOf(:TraditionalUnionistVoice :PoliticalParty)

# Class: :Train (:Train)

SubClassOf(:Train :Transport)

# Class: :TramOrUndergroundOrMetroOrLightRailway (:TramOrUndergroundOrMetroOrLightRailway)

SubClassOf(:TramOrUndergroundOrMetroOrLightRailway :Transport)

# Class: :TravelTimeToWork (:TravelTimeToWork)

SubClassOf(:TravelTimeToWork :TimePeriod)

# Class: :TravelTimeToWorkAndNotSelfEmployed (:TravelTimeToWorkAndNotSelfEmployed)

SubClassOf(:TravelTimeToWorkAndNotSelfEmployed :TravelTimeToWork)

# Class: :TravelTimeToWorkAndSelfEmployed (:TravelTimeToWorkAndSelfEmployed)

SubClassOf(:TravelTimeToWorkAndSelfEmployed :TravelTimeToWork)

# Class: :TumbleDryer (:TumbleDryer)

SubClassOf(:TumbleDryer :WhiteGood)

# Class: :UKCitizen (:UKCitizen)

SubClassOf(:UKCitizen :Citizen)

# Class: :UKIndependenceParty (:UKIndependenceParty)

SubClassOf(:UKIndependenceParty :PoliticalParty)

# Class: :UKQualification (:UKQualification)

SubClassOf(:UKQualification :Qualification)

# Class: :UlsterUnionist (:UlsterUnionist)

SubClassOf(:UlsterUnionist :PoliticalParty)

# Class: :Unemployed (:Unemployed)

SubClassOf(:Unemployed :EconomicActivity)

# Class: :UnemployedPerson (:UnemployedPerson)

SubClassOf(:UnemployedPerson :Person)

# Class: :UnitsOfMonetaryValue (:UnitsOfMonetaryValue)

SubClassOf(:UnitsOfMonetaryValue :Units)

# Class: :UnitsOfTime (:UnitsOfTime)

SubClassOf(:UnitsOfTime :Units)

# Class: :Unknown (:Unknown)

SubClassOf(:Unknown :NegativeResponse)

# Class: :UnpaidWork (:UnpaidWork)

SubClassOf(:UnpaidWork :EconomicActivity)

# Class: :UnpaidWorkForFamilyBusiness (:UnpaidWorkForFamilyBusiness)

SubClassOf(:UnpaidWorkForFamilyBusiness :UnpaidWork)

# Class: :UsualGrossPayPerMonthForPrimaryJob (:UsualGrossPayPerMonthForPrimaryJob)

SubClassOf(:UsualGrossPayPerMonthForPrimaryJob :UsualPayPerMonthForPrimaryJob)

# Class: :UsualGrossPayPerMonthIfSelfEmployed (:UsualGrossPayPerMonthIfSelfEmployed)

SubClassOf(:UsualGrossPayPerMonthIfSelfEmployed :UsualPayPerMonthIfSelfEmployed)

# Class: :UsualNetPayPerMonthForPrimaryJob (:UsualNetPayPerMonthForPrimaryJob)

SubClassOf(:UsualNetPayPerMonthForPrimaryJob :UsualPayPerMonthForPrimaryJob)

# Class: :UsualNetPayPerMonthIfSelfEmployed (:UsualNetPayPerMonthIfSelfEmployed)

SubClassOf(:UsualNetPayPerMonthIfSelfEmployed :UsualPayPerMonthIfSelfEmployed)

# Class: :UsualPayFromSecondJob (:UsualPayFromSecondJob)

SubClassOf(:UsualPayFromSecondJob :PayFromSecondJob)

# Class: :UsualPayPerMonthForPrimaryJob (:UsualPayPerMonthForPrimaryJob)

SubClassOf(:UsualPayPerMonthForPrimaryJob :MonthlyPersonalIncome)

# Class: :UsualPayPerMonthIfSelfEmployed (:UsualPayPerMonthIfSelfEmployed)

SubClassOf(:UsualPayPerMonthIfSelfEmployed :MonthlyPersonalIncome)

# Class: :Van (:Van)

SubClassOf(:Van :CarOrVan)

# Class: :VideoRecorderOrDVDPlayer (:VideoRecorderOrDVDPlayer)

SubClassOf(:VideoRecorderOrDVDPlayer :ConsumerElectronics)

# Class: :VocationalOrProfessionalOrTechnicalQualification (:VocationalOrProfessionalOrTechnicalQualification)

SubClassOf(:VocationalOrProfessionalOrTechnicalQualification :UKQualification)

# Class: :Walk (:Walk)

SubClassOf(:Walk :Transport)

# Class: :WashingMachine (:WashingMachine)

SubClassOf(:WashingMachine :WhiteGood)

# Class: :WasteGlassBottles (:WasteGlassBottles)

SubClassOf(:WasteGlassBottles :HouseholdWaste)

# Class: :WastePaper (:WastePaper)

SubClassOf(:WastePaper :HouseholdWaste)

# Class: :WastePlasticBags (:WastePlasticBags)

SubClassOf(:WastePlasticBags :HouseholdWaste)

# Class: :WaveA (:WaveA)

SubClassOf(:WaveA :Wave)

# Class: :WaveD (:WaveD)

SubClassOf(:WaveD :Wave)

# Class: :Week (:Week)

SubClassOf(:Week :UnitsOfTime)

# Class: :WeeklyPersonalIncome (:WeeklyPersonalIncome)

SubClassOf(:WeeklyPersonalIncome :PersonalIncome)

# Class: :WelshBacculaureate (:WelshBacculaureate)

SubClassOf(:WelshBacculaureate :WelshQualfication)

# Class: :WelshQualfication (:WelshQualfication)

SubClassOf(:WelshQualfication :UKQualification)

# Class: :WhiteGood (:WhiteGood)

SubClassOf(:WhiteGood :ConsumerDuarable)

# Class: :WindTurbine (:WindTurbine)

SubClassOf(:WindTurbine :HomeGeneration)

# Class: :Year (:Year)

SubClassOf(:Year :UnitsOfTime)

# Class: :YearlyIncomeFromInvestmentsAndSavings (:YearlyIncomeFromInvestmentsAndSavings)

SubClassOf(:YearlyIncomeFromInvestmentsAndSavings :YearlyPersonalIncome)

# Class: :YearlyPersonalIncome (:YearlyPersonalIncome)

SubClassOf(:YearlyPersonalIncome :PersonalIncome)

# Class: :YoungestChild (:YoungestChild)

SubClassOf(:YoungestChild :Child)
SubClassOf(:YoungestChild ObjectExactCardinality(1 :isYoungestResident :Child))

# Class: :YouthTraningCertificate (:YouthTraningCertificate)

SubClassOf(:YouthTraningCertificate :VocationalOrProfessionalOrTechnicalQualification)


############################
#   Named Individuals
############################

# Individual: :author:DougSalt (Doug Salt)

AnnotationAssertion(rdfs:label :author:DougSalt "Doug Salt")


DisjointClasses(:AllianceParty :BritishNationalParty :ChristianParty :CoalitionGovernment :CommunistParty :Conservative :DemocraticUnionist :EnglishDemocrats :GreenParty :Independent :Labour :LiberalDemocrat :MebyonKernow :MonsterRavingLoonyParty :NationalFront :OtherPoliticalParty :PlaidCymru :Respect :SDLP :ScottishNationalParty :SinnFein :Socialist :TraditionalUnionistVoice :UKIndependenceParty :UlsterUnionist)
DisjointClasses(:CombinedElectricityAndGas :Electricity :Gas :NoExternalPowerSupply :Oil :SolidFuelOrOther)
)