Prefix(:=<http://www.glamurs.eu/ontologies/2016/TBOX/bottom-up/regional-roe#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.glamurs.eu/ontologies/2016/TBOX/bottom-up/regional-roe>
Annotation(rdfs:comment "2016-09-04"^^xsd:date)
Annotation(rdfs:comment "Note all dataypes originate with the class Person (but often via some other class and properites)

Most responses are scales 1-7. It should be noted that although the lowest version of the scale is often treated as negative version of the datatype - this is not assumed in this ontology, for the purposes of defining domains."@en)
Annotation(rdfs:comment "Note the conventions for this ontology are:

The name of an entity, i.e. a class, object, datatype or property name is in Camel Case and should indicate the purpose of the entity. This is opposed to some ontologies which randomly name the entity and purely use the label to identify the entity in some meaningful way.
 
+ classes begin with an upper case letter
+ object properties begin with a lower case letter
+ data properties begin with a lower case letter and are suffixed with -value unless the data value is boolean.
+ data properties and object properties being with has unless another verb makes better sense.
+ individuals gerneally begin with a lowercase letter, unless it is a proper name

Note these conventions relate to the underlying entity and not what is shown as its name in Protégé (which is normally the value of the label for whatever default the language is set to).

+ a label must be provided (usually with a language specification) and should be make sense in the language of choice

Markdown will be used in all text."@en)
Annotation(rdfs:comment "The methodology of construction was 

1) Set up one class Person
2) Set up all possible answers in the questionnaire as datatypes relating to that class.
3) Identify  and create classes best fitting obvious collections of datatypes.
4) Link new classes from collected datatypes to the Person class with new object properties.
5) Analyse remaining text for new classes.
6) Review and remove redundancy by trying to merge object properties
7) Simplify terminology as much as possible for vocabulary linking.
8) Populate ontology.

Notice my ultimate aim in creating these ontologies is to build vocabularies across disciplines."@en)
Annotation(rdfs:isDefinedBy <http://www.glamurs.eu/ontologies/2016/TBOX/bottom-up/regional-roe#author:DougSalt>)
Annotation(owl:versionInfo "1.0"^^xsd:token)

Declaration(Class(:Accomodation))
Declaration(Class(:Acessories))
Declaration(Class(:Adult))
Declaration(Class(:AffiliationAspiration))
Declaration(Class(:AirBnBApartment))
Declaration(Class(:Apartment))
Declaration(Class(:ApartmentBlock))
Declaration(Class(:Aspiration))
Declaration(Class(:AttituteToTechnicalInnovation))
Declaration(Class(:Batteries))
Declaration(Class(:BedAndBreakfast))
Declaration(Class(:Beef))
Declaration(Class(:Bicycle))
Declaration(Class(:Bill))
Declaration(Class(:Bottle))
Declaration(Class(:Bus))
Declaration(Class(:CampingSite))
Declaration(Class(:Can))
Declaration(Class(:CannedOrBottled))
Declaration(Class(:Car))
Declaration(Class(:CarAge10To15Years))
Declaration(Class(:CarAge5To10Years))
Declaration(Class(:CarAgeGreaterThan15Years))
Declaration(Class(:CarAgeLessThan5years))
Declaration(Class(:CarUsedByASingleDriver))
Declaration(Class(:CarUsedByHousehold))
Declaration(Class(:Carpool))
Declaration(Class(:Centre))
Declaration(Class(:Charity))
Declaration(Class(:Chicken))
Declaration(Class(:Child))
Declaration(Class(:Clothing))
Declaration(Class(:ClothingOrShoesOrAccessories))
Declaration(Class(:ColdSeason))
Declaration(Class(:Collection))
Declaration(Class(:CollectionOfIndividuals))
Declaration(Class(:CollectionOfRooms))
Declaration(Class(:CollegeDegree))
Declaration(Class(:ComfortableLife))
Declaration(Class(:Community))
Declaration(Class(:CommunityAspiration))
Declaration(Class(:CommunityLife))
Declaration(Class(:Commute))
Declaration(Class(:CommutePart1))
Declaration(Class(:CommutePart2))
Declaration(Class(:CommutePart3))
Declaration(Class(:CommuterTrain))
Declaration(Class(:Compact))
Declaration(Class(:Computer))
Declaration(Class(:ConsumerDurables))
Declaration(Class(:CookingTime))
Declaration(Class(:Dairy))
Declaration(Class(:Day))
Declaration(Class(:Days))
Declaration(Class(:Diesel))
Declaration(Class(:DieselGenerator))
Declaration(Class(:DistrictHouseHeating))
Declaration(Class(:DistrictWaterHeating))
Declaration(Class(:Divorced))
Declaration(Class(:DivorcedOrSeparated))
Declaration(Class(:DoctoralDegree))
Declaration(Class(:Drink))
Declaration(Class(:Dwelling))
Declaration(Class(:Eaten))
Declaration(Class(:EatingOut))
Declaration(Class(:Ecological))
Declaration(Class(:Ecotourism))
Declaration(Class(:ElectricBicycle))
Declaration(Class(:ElectricOrGasPumpHouseHeating))
Declaration(Class(:ElectricOrGasPumpWaterHeating))
Declaration(Class(:ElectricUnderfloorHeatingOrElectricConvectorsOrElectricAccumulators))
Declaration(Class(:ElectricWaterHeaterHeating))
Declaration(Class(:Electrical))
Declaration(Class(:Electricity))
Declaration(Class(:ElectricityBill))
Declaration(Class(:EmployedFullTime))
Declaration(Class(:EmployedPartTime))
Declaration(Class(:Employment))
Declaration(Class(:EnjoyableLife))
Declaration(Class(:EntrepreneurWithStaff))
Declaration(Class(:EntrepreneurWithoutStaff))
Declaration(Class(:Euro))
Declaration(Class(:ExternallyGeneratedElectricity))
Declaration(Class(:Farmer))
Declaration(Class(:Female))
Declaration(Class(:FinancialAspiration))
Declaration(Class(:FiveDays))
Declaration(Class(:Flight))
Declaration(Class(:Flying))
Declaration(Class(:Food))
Declaration(Class(:FoodBill))
Declaration(Class(:FoodDirectlyFromProducer))
Declaration(Class(:FourDays))
Declaration(Class(:FreeDay))
Declaration(Class(:Frequency))
Declaration(Class(:Fruit))
Declaration(Class(:GPLOrMethane))
Declaration(Class(:Garden))
Declaration(Class(:GasHouseHeating))
Declaration(Class(:GasTurbine))
Declaration(Class(:GasWaterHeating))
Declaration(Class(:Gasoline))
Declaration(Class(:Glass))
Declaration(Class(:Heating))
Declaration(Class(:HedonismAspiration))
Declaration(Class(:HighSchool))
Declaration(Class(:Home))
Declaration(Class(:HomeGeneratedElectricity))
Declaration(Class(:HomeHeating))
Declaration(Class(:HomeHeatingMethodUnknown))
Declaration(Class(:HomeInsulation))
Declaration(Class(:HomeIsNotHeated))
Declaration(Class(:Hotel))
Declaration(Class(:Hour))
Declaration(Class(:HouseWorkerOrHouseWife))
Declaration(Class(:Household))
Declaration(Class(:Hybrid))
Declaration(Class(:InStorePurchases))
Declaration(Class(:Indoor))
Declaration(Class(:Institution))
Declaration(Class(:InternalAttitude))
Declaration(Class(:JobSeeker))
Declaration(Class(:Journey))
Declaration(Class(:Kilometre))
Declaration(Class(:LabelledOrganic))
Declaration(Class(:LabelledOrganicOrEcological))
Declaration(Class(:LargeOrFamiliarOrStationWagon))
Declaration(Class(:LeftOfCentre))
Declaration(Class(:LeftWing))
Declaration(Class(:LeisureTime))
Declaration(Class(:Life))
Declaration(Class(:LifeStyleChange))
Declaration(Class(:LivingAlone))
Declaration(Class(:LivingWithOthers))
Declaration(Class(:Local))
Declaration(Class(:LocalCommunity))
Declaration(Class(:LocalProduct))
Declaration(Class(:Location))
Declaration(Class(:LongFlight))
Declaration(Class(:Male))
Declaration(Class(:ManufacturingMethod))
Declaration(Class(:Married))
Declaration(Class(:MastersDegree))
Declaration(Class(:MaternityLeave))
Declaration(Class(:MembersOfHousehold))
Declaration(Class(:Mini))
Declaration(Class(:Money))
Declaration(Class(:Motorbike))
Declaration(Class(:Multi-familyHouse))
Declaration(Class(:Neighbour))
Declaration(Class(:Neighbourhood))
Declaration(Class(:NeighbourhoodQuality))
Declaration(Class(:Never))
Declaration(Class(:NoEducation))
Declaration(Class(:NonSustainableMethod))
Declaration(Class(:NoneWorkTime))
Declaration(Class(:OccasionalTemporaryContracts))
Declaration(Class(:OilHouseHeating))
Declaration(Class(:OilWaterHeating))
Declaration(Class(:OneDay))
Declaration(Class(:OneWeek))
Declaration(Class(:OrganicWaste))
Declaration(Class(:OtherFormOfElectricalGeneration))
Declaration(Class(:OtherTransport))
Declaration(Class(:OtherTypeOfAccomodation))
Declaration(Class(:Outdoor))
Declaration(Class(:PaceOfLife))
Declaration(Class(:PelletHouseHeating))
Declaration(Class(:PelletWaterHeating))
Declaration(Class(:PeopleOfEmotionalImportance))
Declaration(Class(:Person))
Declaration(Class(:Plastic))
Declaration(Class(:PlasticBags))
Declaration(Class(:PlasticPackaging))
Declaration(Class(:PopularityAspiration))
Declaration(Class(:Pork))
Declaration(Class(:Preprepared))
Declaration(Class(:PrimarySchool))
Declaration(Class(:PrivateTravel))
Declaration(Class(:ProEnvironmentalIdentity))
Declaration(Class(:Producer))
Declaration(Class(:PublicTransport))
Declaration(Class(:QualificationLevel))
Declaration(Class(:Regional))
Declaration(Class(:RegionalOrLocalProducts))
Declaration(Class(:RegionalProduct))
Declaration(Class(:RegularPrivateTravel))
Declaration(Class(:RegularPrivateTravelTrip1))
Declaration(Class(:RegularPrivateTravelTrip2))
Declaration(Class(:RegularPrivateTravelTrip3))
Declaration(Class(:Remote))
Declaration(Class(:Retired))
Declaration(Class(:RightOfCentre))
Declaration(Class(:RightWing))
Declaration(Class(:Room))
Declaration(Class(:Rural))
Declaration(Class(:SUVor4X4))
Declaration(Class(:SchwarzScale))
Declaration(Class(:Seasonal))
Declaration(Class(:SecondHandShop))
Declaration(Class(:SecondarySchool))
Declaration(Class(:SelfAcceptanceAspiration))
Declaration(Class(:SelfEfficacy))
Declaration(Class(:Separated))
Declaration(Class(:SevenDays))
Declaration(Class(:Shoes))
Declaration(Class(:Shop))
Declaration(Class(:ShortFlight))
Declaration(Class(:Single))
Declaration(Class(:SingleFamilyHouse))
Declaration(Class(:SingleLivingAlone))
Declaration(Class(:SingleLivingWithOthers))
Declaration(Class(:SixToSevenDays))
Declaration(Class(:SocialNorm))
Declaration(Class(:SocialTime))
Declaration(Class(:SolarCellPanel))
Declaration(Class(:SolarOrThermalHouseHeating))
Declaration(Class(:SolarOrThermalWaterHeating))
Declaration(Class(:SpiritualityAspiration))
Declaration(Class(:StayAtFriendsHome))
Declaration(Class(:Student))
Declaration(Class(:Summer))
Declaration(Class(:Surburban))
Declaration(Class(:SustainabilityInitiativeService))
Declaration(Class(:SustainableClothing))
Declaration(Class(:SustainableMethod))
Declaration(Class(:TakeAway))
Declaration(Class(:TerracedHouse))
Declaration(Class(:ThreeDays))
Declaration(Class(:Time))
Declaration(Class(:TimeAffluence))
Declaration(Class(:Times))
Declaration(Class(:TramOrUnderground))
Declaration(Class(:Transport))
Declaration(Class(:TwoDays))
Declaration(Class(:Unemployed))
Declaration(Class(:UnitsOfMeasurement))
Declaration(Class(:UnitsOfMeasurementOfCurrency))
Declaration(Class(:UnitsOfMeasurementOfLength))
Declaration(Class(:UnitsOfMeasurementOfMass))
Declaration(Class(:UnitsOfMeasurementOfTime))
Declaration(Class(:UnpaidVolunteerWork))
Declaration(Class(:Urban))
Declaration(Class(:Vegetable))
Declaration(Class(:VegetablesAndFruit))
Declaration(Class(:VocationalSchool))
Declaration(Class(:Walking))
Declaration(Class(:WashingMachine))
Declaration(Class(:Waste))
Declaration(Class(:WaterHeating))
Declaration(Class(:WaterHeatingMethodUnknown))
Declaration(Class(:WaterIsNotHeated))
Declaration(Class(:Week))
Declaration(Class(:WeeklyFrequency))
Declaration(Class(:Weeks))
Declaration(Class(:WellBeing))
Declaration(Class(:Widow))
Declaration(Class(:WidowOrWidower))
Declaration(Class(:Widower))
Declaration(Class(:WindTurbine))
Declaration(Class(:Winter))
Declaration(Class(:WithLessPlasticPackaging))
Declaration(Class(:WorkTime))
Declaration(Class(:WorkedInEducation))
Declaration(Class(:WorkingDay))
Declaration(Class(:YouthHostel))
Declaration(ObjectProperty(:belongsTo))
Declaration(ObjectProperty(:buys))
Declaration(ObjectProperty(:caresAbout))
Declaration(ObjectProperty(:desires))
Declaration(ObjectProperty(:direct))
Declaration(ObjectProperty(:donates))
Declaration(ObjectProperty(:eats))
Declaration(ObjectProperty(:electricity))
Declaration(ObjectProperty(:flies))
Declaration(ObjectProperty(:givenTo))
Declaration(ObjectProperty(:hasAffiliationAspiration))
Declaration(ObjectProperty(:hasAspiration))
Declaration(ObjectProperty(:hasAttittudeToTechnicalInnovation))
Declaration(ObjectProperty(:hasCommunityAspiration))
Declaration(ObjectProperty(:hasCommuteToWork))
Declaration(ObjectProperty(:hasCommuteToWorkPart1))
Declaration(ObjectProperty(:hasCommuteToWorkPart2))
Declaration(ObjectProperty(:hasCommuteToWorkPart3))
Declaration(ObjectProperty(:hasComputer))
Declaration(ObjectProperty(:hasConsumption))
Declaration(ObjectProperty(:hasElectricityBill))
Declaration(ObjectProperty(:hasFinancialAspiration))
Declaration(ObjectProperty(:hasFrequency))
Declaration(ObjectProperty(:hasGarden))
Declaration(ObjectProperty(:hasHeating))
Declaration(ObjectProperty(:hasHedonismAspiration))
Declaration(ObjectProperty(:hasHomeElectricityGeneration))
Declaration(ObjectProperty(:hasHouseHeating))
Declaration(ObjectProperty(:hasInternalAttitude))
Declaration(ObjectProperty(:hasLeisureTime))
Declaration(ObjectProperty(:hasLess))
Declaration(ObjectProperty(:hasLife))
Declaration(ObjectProperty(:hasLocation))
Declaration(ObjectProperty(:hasNeed))
Declaration(ObjectProperty(:hasNeighbour))
Declaration(ObjectProperty(:hasNeighbourhoodQuality))
Declaration(ObjectProperty(:hasOrigin))
Declaration(ObjectProperty(:hasPace))
Declaration(ObjectProperty(:hasPart))
Declaration(ObjectProperty(:hasPopularityAspiration))
Declaration(ObjectProperty(:hasProEnvironmentalIdentity))
Declaration(ObjectProperty(:hasProperty))
Declaration(ObjectProperty(:hasRegularPrivateTravel))
Declaration(ObjectProperty(:hasRegularPrivateTrip1))
Declaration(ObjectProperty(:hasRegularPrivateTrip2))
Declaration(ObjectProperty(:hasRegularPrivateTrip3))
Declaration(ObjectProperty(:hasSatisfaction))
Declaration(ObjectProperty(:hasSchwartzScale))
Declaration(ObjectProperty(:hasSelfAcceptanceAspiration))
Declaration(ObjectProperty(:hasSelfEfficacy))
Declaration(ObjectProperty(:hasSocialNorm))
Declaration(ObjectProperty(:hasSpiritualityAspiration))
Declaration(ObjectProperty(:hasSustainabilityInitiativeService))
Declaration(ObjectProperty(:hasTimeAffluence))
Declaration(ObjectProperty(:hasTimeType))
Declaration(ObjectProperty(:hasUnitOfCurrency))
Declaration(ObjectProperty(:hasUnitOfLength))
Declaration(ObjectProperty(:hasUnitOfMass))
Declaration(ObjectProperty(:hasUnitOfTime))
Declaration(ObjectProperty(:hasUnits))
Declaration(ObjectProperty(:hasVoluntaryWork))
Declaration(ObjectProperty(:hasWaterHeating))
Declaration(ObjectProperty(:hasWellBeing))
Declaration(ObjectProperty(:hasWorkTime))
Declaration(ObjectProperty(:heats))
Declaration(ObjectProperty(:isDesireOf))
Declaration(ObjectProperty(:isEatenBy))
Declaration(ObjectProperty(:isEmploymentStatusFor))
Declaration(ObjectProperty(:isHeatingFor))
Declaration(ObjectProperty(:isHouseHeatingFor))
Declaration(ObjectProperty(:isLocationOf))
Declaration(ObjectProperty(:isModifiedBy))
Declaration(ObjectProperty(:isPartOf))
Declaration(ObjectProperty(:isPerUnit))
Declaration(ObjectProperty(:isPerUnitOfCurrency))
Declaration(ObjectProperty(:isPerUnitOfLength))
Declaration(ObjectProperty(:isPerUnitOfMass))
Declaration(ObjectProperty(:isPerUnitOfTime))
Declaration(ObjectProperty(:isPropertyOf))
Declaration(ObjectProperty(:isRepairedBy))
Declaration(ObjectProperty(:isRepairedOrTransformedBy))
Declaration(ObjectProperty(:isSatisfiedBy))
Declaration(ObjectProperty(:isSharedBy))
Declaration(ObjectProperty(:isSoldBy))
Declaration(ObjectProperty(:isSpentBy))
Declaration(ObjectProperty(:isTheQualificationLevelOf))
Declaration(ObjectProperty(:isTransformedBy))
Declaration(ObjectProperty(:isTransportUsedForTravel))
Declaration(ObjectProperty(:isUsedBy))
Declaration(ObjectProperty(:isUsedOnlyBy))
Declaration(ObjectProperty(:isWaterHeatingFor))
Declaration(ObjectProperty(:less))
Declaration(ObjectProperty(:made))
Declaration(ObjectProperty(:modifies))
Declaration(ObjectProperty(:more))
Declaration(ObjectProperty(:recyles))
Declaration(ObjectProperty(:repairs))
Declaration(ObjectProperty(:repairsOrTransforms))
Declaration(ObjectProperty(:resident))
Declaration(ObjectProperty(:resides))
Declaration(ObjectProperty(:reuse))
Declaration(ObjectProperty(:separates))
Declaration(ObjectProperty(:sharesWith))
Declaration(ObjectProperty(:spends))
Declaration(ObjectProperty(:spendsTime))
Declaration(ObjectProperty(:spendsTimeWith))
Declaration(ObjectProperty(:transforrms))
Declaration(ObjectProperty(:useHomeGeneratedElectricity))
Declaration(ObjectProperty(:usedOnlyBy))
Declaration(ObjectProperty(:uses))
Declaration(ObjectProperty(:usesAccomodation))
Declaration(ObjectProperty(:volunteersTime))
Declaration(DataProperty(:choosesWhatToDoInsteadOfBeingPushedValue))
Declaration(DataProperty(:doesNotHeatHome))
Declaration(DataProperty(:doesNotHeatWater))
Declaration(DataProperty(:doesNotKnowHowHouseIsHeated))
Declaration(DataProperty(:doesNotKnowHowWaterIsHeated))
Declaration(DataProperty(:doesNumberOfHoursVolunteerWorkPerWeek))
Declaration(DataProperty(:doesUnpaidVolunteerWork))
Declaration(DataProperty(:feelsActiveAndVigorousValue))
Declaration(DataProperty(:feelsCalmAndRelaxedValue))
Declaration(DataProperty(:feelsGoodAboutAbilititesValue))
Declaration(DataProperty(:hasAA1Value))
Declaration(DataProperty(:hasAA2Value))
Declaration(DataProperty(:hasAA3Value))
Declaration(DataProperty(:hasAA4Value))
Declaration(DataProperty(:hasAA5Value))
Declaration(DataProperty(:hasAAValue))
Declaration(DataProperty(:hasAC1Value))
Declaration(DataProperty(:hasAC2Value))
Declaration(DataProperty(:hasAC3Value))
Declaration(DataProperty(:hasACValue))
Declaration(DataProperty(:hasAFulfilledDailyLifeValue))
Declaration(DataProperty(:hasAH1value))
Declaration(DataProperty(:hasAH2Value))
Declaration(DataProperty(:hasAH3Value))
Declaration(DataProperty(:hasAHValue))
Declaration(DataProperty(:hasAM1Value))
Declaration(DataProperty(:hasAM2Value))
Declaration(DataProperty(:hasAM3Value))
Declaration(DataProperty(:hasAM4Value))
Declaration(DataProperty(:hasAMValue))
Declaration(DataProperty(:hasAP1Value))
Declaration(DataProperty(:hasAP2Value))
Declaration(DataProperty(:hasAP3Value))
Declaration(DataProperty(:hasAPValue))
Declaration(DataProperty(:hasAS1Value))
Declaration(DataProperty(:hasAS2Value))
Declaration(DataProperty(:hasAS3Value))
Declaration(DataProperty(:hasAS4Value))
Declaration(DataProperty(:hasASA1Value))
Declaration(DataProperty(:hasASA2Value))
Declaration(DataProperty(:hasASA3Value))
Declaration(DataProperty(:hasASA4Value))
Declaration(DataProperty(:hasASA5Value))
Declaration(DataProperty(:hasASA6Value))
Declaration(DataProperty(:hasASA7Value))
Declaration(DataProperty(:hasASAValue))
Declaration(DataProperty(:hasASValue))
Declaration(DataProperty(:hasAbilityToFindMoreTimeForImportantThingsValue))
Declaration(DataProperty(:hasAbilityToFreeUpTimeForSelfValue))
Declaration(DataProperty(:hasAgeOfCarValue))
Declaration(DataProperty(:hasAgeOfDwellingUnknown))
Declaration(DataProperty(:hasAgeValue))
Declaration(DataProperty(:hasAmountOfTimeSpentCookingDailyValue))
Declaration(DataProperty(:hasAmountOfTimeSpentCookingOnFreeDaysValue))
Declaration(DataProperty(:hasAmountOfWasteFoodPerWeekValue))
Declaration(DataProperty(:hasAmountPaidInHotelFeesForLastYearValue))
Declaration(DataProperty(:hasAmountSpentOnClothingDuringLast3MonthsValue))
Declaration(DataProperty(:hasAmountSpentOnElectricityDuringSummerValue))
Declaration(DataProperty(:hasAmountSpentOnElectricityDuringWinterValue))
Declaration(DataProperty(:hasAmountSpentPerWeekPerIndividualEatingOutValue))
Declaration(DataProperty(:hasAmountSpentPerWeekPerIndividualStorePurchasesValue))
Declaration(DataProperty(:hasAmountSpentPerWeekPerIndividualTakeAwayValue))
Declaration(DataProperty(:hasBeenAbleToTakeLifeAtALeisurelyPaceValue))
Declaration(DataProperty(:hasBeenRacingFromHereToThereValue))
Declaration(DataProperty(:hasCL1Value))
Declaration(DataProperty(:hasCarFuelValue))
Declaration(DataProperty(:hasCarTypeValue))
Declaration(DataProperty(:hasCarUseLiterFuelPer100KMUnknown))
Declaration(DataProperty(:hasCarUsesLitresFuelPer100KMValue))
Declaration(DataProperty(:hasChanceValueForFindingReligiousOrSpiritualBeliefsAreGrowthProducing))
Declaration(DataProperty(:hasChanceValueOfExperiencingAGreatDealOfSensualPleasure))
Declaration(DataProperty(:hasChanceValueOfFeelingFree))
Declaration(DataProperty(:hasChanceValueOfSomeoneAcceptingMeNoMatterWhat))
Declaration(DataProperty(:hasChancesValueAboutDealingWithProblemsInMyLife))
Declaration(DataProperty(:hasChancesValueAboutFeellingGoodAboutOwnAbilities))
Declaration(DataProperty(:hasChancesValueForBeingAbleToExpressLoveForSpecialPeople))
Declaration(DataProperty(:hasChancesValueForHavingACommittedIntimateRelationship))
Declaration(DataProperty(:hasChancesValueForInsightIntoWhatIDo))
Declaration(DataProperty(:hasChancesValueForLivingLifeAccordingToSpiritualOrReligiousBeliefs))
Declaration(DataProperty(:hasChancesValueForMakingTheWorldABetterPlace))
Declaration(DataProperty(:hasChancesValueOfAssistingPeopleWithNoReward))
Declaration(DataProperty(:hasChancesValueOfBeingAdmiredByManyPeople))
Declaration(DataProperty(:hasChancesValueOfBeingEfficient))
Declaration(DataProperty(:hasChancesValueOfBeingFamous))
Declaration(DataProperty(:hasChancesValueOfFeelingThatThereAreOthersWhoLoveMe))
Declaration(DataProperty(:hasChancesValueOfFindReligiousOrSpiritualBeliefsThatMakeSenseOfLife))
Declaration(DataProperty(:hasChancesValueOfFindingSatisfyingRelegiousOrSpritualActivities))
Declaration(DataProperty(:hasChancesValueOfHavingAGreatSexLife))
Declaration(DataProperty(:hasChancesValueOfHavingAJobThatPaysWell))
Declaration(DataProperty(:hasChancesValueOfHavingALotOfExcitementInMyLife))
Declaration(DataProperty(:hasChancesValueOfHavingEnoughMoneyToBuyWhatIWant))
Declaration(DataProperty(:hasChancesValueOfHavingManyExpensivePossessions))
Declaration(DataProperty(:hasChancesValueOfHavingMutualAffection))
Declaration(DataProperty(:hasChancesValueOfMakingPeoplesLivesBetter))
Declaration(DataProperty(:hasChancesValuesForChoosingWhatIDoInsteadOfBeingPushed))
Declaration(DataProperty(:hasChancesValuesOfEverybodyKnowingMeLikingMe))
Declaration(DataProperty(:hasCloseToIdealLifeValue))
Declaration(DataProperty(:hasCommunityGardenValue))
Declaration(DataProperty(:hasCurrentEmploymentStatus))
Declaration(DataProperty(:hasCurrentJobWorkingFlexibilityValue))
Declaration(DataProperty(:hasDate))
Declaration(DataProperty(:hasDateWhenDwellingBuiltValue))
Declaration(DataProperty(:hasDistance))
Declaration(DataProperty(:hasDistrictHeating))
Declaration(DataProperty(:hasDistrictWaterHeating))
Declaration(DataProperty(:hasDonatesClothersToOthersValue))
Declaration(DataProperty(:hasDuringColdSeasonHowIsHomeHeated))
Declaration(DataProperty(:hasEU1Value))
Declaration(DataProperty(:hasEU3Value))
Declaration(DataProperty(:hasEU4Value))
Declaration(DataProperty(:hasEU6Value))
Declaration(DataProperty(:hasEU7Value))
Declaration(DataProperty(:hasEU8Value))
Declaration(DataProperty(:hasEU9Value))
Declaration(DataProperty(:hasEUValue))
Declaration(DataProperty(:hasEaseOfDoingClimateChangeReductionActivitiesValue))
Declaration(DataProperty(:hasElectricUnderfloorHeating))
Declaration(DataProperty(:hasElectricWaterHeating))
Declaration(DataProperty(:hasElectricalOrGasHotWaterTank))
Declaration(DataProperty(:hasElectricalOrGasPumpHeating))
Declaration(DataProperty(:hasExcellentConditionsToLifeValue))
Declaration(DataProperty(:hasFC1Value))
Declaration(DataProperty(:hasFC2Value))
Declaration(DataProperty(:hasFC3Value))
Declaration(DataProperty(:hasFC4Value))
Declaration(DataProperty(:hasFC5Value))
Declaration(DataProperty(:hasFCValue))
Declaration(DataProperty(:hasFeelingOfEnvironmentalImpotenceValue))
Declaration(DataProperty(:hasFeltThatThingsHaveBeenReallyHecticValue))
Declaration(DataProperty(:hasFrequencyOfTakingPublicTransportForPrivateTravelValue))
Declaration(DataProperty(:hasFrequencyOfUsingCarPoolForWorkValue))
Declaration(DataProperty(:hasFrequencyOfUsingCarpoolForPrivateReasons))
Declaration(DataProperty(:hasFrequencyOfUsingFoodDirectlyFromProducerValue))
Declaration(DataProperty(:hasFrequencyOfUsingFoodWithLessPackagingValue))
Declaration(DataProperty(:hasFrequencyOfUsingLabelledOrganicFoodValue))
Declaration(DataProperty(:hasFrequencyOfUsingRegionalOrLocalFoodValue))
Declaration(DataProperty(:hasFrequencyOfUsingSeasonalFoodValue))
Declaration(DataProperty(:hasGasHeating))
Declaration(DataProperty(:hasGasHotWaterHeating))
Declaration(DataProperty(:hasGenderValue))
Declaration(DataProperty(:hasGottenAllImportantThingsInLifeValue))
Declaration(DataProperty(:hasHadEnoughMinutesInTheDayValue))
Declaration(DataProperty(:hasHadEnoughTimeToDoTheThingsThatAreImportantValue))
Declaration(DataProperty(:hasHadEnoughTimeToDoWhatIsNeeded))
Declaration(DataProperty(:hasHeightValue))
Declaration(DataProperty(:hasHighestQualficationLevelValue))
Declaration(DataProperty(:hasHowOftenRepairsOrTransformsClothesValue))
Declaration(DataProperty(:hasHowWarmHouseIsKeptOnAverageInWinterValue))
Declaration(DataProperty(:hasIDValue))
Declaration(DataProperty(:hasIEValue))
Declaration(DataProperty(:hasIIValue))
Declaration(DataProperty(:hasIUValue))
Declaration(DataProperty(:hasImportanceOfAuthorityAndTheRightToLeadValue))
Declaration(DataProperty(:hasImportanceOfCorrectionOfInjusticeValue))
Declaration(DataProperty(:hasImportanceOfCuriosityInEverythingValue))
Declaration(DataProperty(:hasImportanceOfEqualityForAllValue))
Declaration(DataProperty(:hasImportanceOfExcitingLifeValue))
Declaration(DataProperty(:hasImportanceOfFamilySecurityValue))
Declaration(DataProperty(:hasImportanceOfHonouringParentsAndEldersValue))
Declaration(DataProperty(:hasImportanceOfInfluencingEventsValue))
Declaration(DataProperty(:hasImportanceOfProtectingAndPreservingEnvironmentValue))
Declaration(DataProperty(:hasImportanceOfRespectingTheEarthValue))
Declaration(DataProperty(:hasImportanceOfSelfDisciplineValue))
Declaration(DataProperty(:hasImportanceOfUnityWithNature))
Declaration(DataProperty(:hasImportanceOfVariedAndChallengingLifeValue))
Declaration(DataProperty(:hasImportanceOfWealthAndMaterialPossessionsValue))
Declaration(DataProperty(:hasImportanceOfWorldPeaceValue))
Declaration(DataProperty(:hasImportanceValueAboutDealingWithProblemsInMyLife))
Declaration(DataProperty(:hasImportanceValueAboutFeellingGoodAboutOwnAbilities))
Declaration(DataProperty(:hasImportanceValueForBeingAbleToExpressLoveForSpecialPeople))
Declaration(DataProperty(:hasImportanceValueForFindingReligiousOrSpiritualBeliefsAreGrowthProducing))
Declaration(DataProperty(:hasImportanceValueForHavingACommittedIntimateRelationship))
Declaration(DataProperty(:hasImportanceValueForInsightIntoWhatIDo))
Declaration(DataProperty(:hasImportanceValueForLivingLifeAccordingToSpiritualOrReligiousBeliefs))
Declaration(DataProperty(:hasImportanceValueForMakingTheWorldABetterPlace))
Declaration(DataProperty(:hasImportanceValueOfAssistingPeopleWithNoReward))
Declaration(DataProperty(:hasImportanceValueOfBeingAdmiredByManyPeople))
Declaration(DataProperty(:hasImportanceValueOfBeingEfficient))
Declaration(DataProperty(:hasImportanceValueOfBeingFamous))
Declaration(DataProperty(:hasImportanceValueOfExperiencingAGreatDealOfSensualPleasure))
Declaration(DataProperty(:hasImportanceValueOfFeelingFree))
Declaration(DataProperty(:hasImportanceValueOfFeelingThatThereAreOthersWhoLoveMe))
Declaration(DataProperty(:hasImportanceValueOfFindReligiousOrSpiritualBeliefsThatMakeSenseOfLife))
Declaration(DataProperty(:hasImportanceValueOfFindingSatisfyingRelegiousOrSpritualActivities))
Declaration(DataProperty(:hasImportanceValueOfHavingAGreatSexLife))
Declaration(DataProperty(:hasImportanceValueOfHavingAJobThatPaysWell))
Declaration(DataProperty(:hasImportanceValueOfHavingALotOfExcitementInMyLife))
Declaration(DataProperty(:hasImportanceValueOfHavingEnoughMoneyToBuyWhatIWant))
Declaration(DataProperty(:hasImportanceValueOfHavingManyExpensivePossessions))
Declaration(DataProperty(:hasImportanceValueOfHavingMutualAffection))
Declaration(DataProperty(:hasImportanceValueOfMakingPeoplesLivesBetter))
Declaration(DataProperty(:hasImportanceValueOfOvercomingLifeChallenges))
Declaration(DataProperty(:hasImportanceValueOfSomeoneAcceptingMeNoMatterWhat))
Declaration(DataProperty(:hasImportanceValuesForChoosingWhatIDoInsteadOfBeingPushed))
Declaration(DataProperty(:hasImportanceValuesOfEverybodyKnowingMeLikingMe))
Declaration(DataProperty(:hasIntimateRelationshipValue))
Declaration(DataProperty(:hasKilometreDistanceCommutePart1Value))
Declaration(DataProperty(:hasKilometreDistanceCommutePart2Value))
Declaration(DataProperty(:hasKindOfCarOwnershipValue))
Declaration(DataProperty(:hasLifeHasBeenTooRushedInTheLastYearValue))
Declaration(DataProperty(:hasLivingAreaValue))
Declaration(DataProperty(:hasMB1Value))
Declaration(DataProperty(:hasMB1aValue))
Declaration(DataProperty(:hasMB1bValue))
Declaration(DataProperty(:hasMB1cValue))
Declaration(DataProperty(:hasMB2Values))
Declaration(DataProperty(:hasMB2aValue))
Declaration(DataProperty(:hasMB2bValue))
Declaration(DataProperty(:hasMB2cValue))
Declaration(DataProperty(:hasMB4Value))
Declaration(DataProperty(:hasMB6Value))
Declaration(DataProperty(:hasMB9Value))
Declaration(DataProperty(:hasMBValue))
Declaration(DataProperty(:hasMaritalStatusValue))
Declaration(DataProperty(:hasMeaningfulDailyLifeValue))
Declaration(DataProperty(:hasMeansOfTransportForCommutePart1Value))
Declaration(DataProperty(:hasMeansOfTransportForCommutePart2Value))
Declaration(DataProperty(:hasMeansOfTransportForCommutePart3Value))
Declaration(DataProperty(:hasMonthlyNetIncomeValue))
Declaration(DataProperty(:hasNQ1Value))
Declaration(DataProperty(:hasNQValue))
Declaration(DataProperty(:hasNoRegretsAboutLife))
Declaration(DataProperty(:hasNumberOfBathroomsValue))
Declaration(DataProperty(:hasNumberOfChildrenBelow18InHouseholdValue))
Declaration(DataProperty(:hasNumberOfCommutesPart1PerWeekValue))
Declaration(DataProperty(:hasNumberOfCommutesPart2PerWeekValue))
Declaration(DataProperty(:hasNumberOfCommutesPart3PerWeekValue))
Declaration(DataProperty(:hasNumberOfComputersValue))
Declaration(DataProperty(:hasNumberOfKMPerYearDrivenInCarValue))
Declaration(DataProperty(:hasNumberOfKilometreDistanceCommutePart3Value))
Declaration(DataProperty(:hasNumberOfLongFlightsValue))
Declaration(DataProperty(:hasNumberOfPeopleLivingInHouseholdValue))
Declaration(DataProperty(:hasNumberOfReturnFlightsForYear2014Value))
Declaration(DataProperty(:hasNumberOfRoomsValue))
Declaration(DataProperty(:hasNumberOfShortFlightsValue))
Declaration(DataProperty(:hasOilHeating))
Declaration(DataProperty(:hasOilHotWaterHeating))
Declaration(DataProperty(:hasOpinionOfCarSharingValue))
Declaration(DataProperty(:hasOpinionOfCollaborativeConsumptionInitiativesValue))
Declaration(DataProperty(:hasOpinionOfEnergyCooperativesValue))
Declaration(DataProperty(:hasOpinionOfSecondHandClothesSellingValue))
Declaration(DataProperty(:hasOpinionOfSecondHandInternetSitesValue))
Declaration(DataProperty(:hasOpinionOfSustainableFoodConsumptionInitiativesValue))
Declaration(DataProperty(:hasOpinionOfSwappingAndTradingClothesValue))
Declaration(DataProperty(:hasPNValue))
Declaration(DataProperty(:hasPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue))
Declaration(DataProperty(:hasPersonalConsumptionReductionWouldMakeNoDifferenceValue))
Declaration(DataProperty(:hasPersonallyImportantPeopleActInAnEnvironmentallyResponsibleWayValue))
Declaration(DataProperty(:hasPersonallyImportantPeopleBelieveIShouldActInEnvironmentallyResponsibleWayValue))
Declaration(DataProperty(:hasPersonallyImportantPeopleBelieveIShouldTryToReduceConsumptionValue))
Declaration(DataProperty(:hasPersonallyImportantPeopleBelieveThatIShouldHaveABusyLifeValue))
Declaration(DataProperty(:hasPersonallyImportantPeopleHaveTooLittleTimeValue))
Declaration(DataProperty(:hasPersonallyImportantPeopleTryToReduceConsumptionValue))
Declaration(DataProperty(:hasPlentyOfSpareTimeInTheLastYearValue))
Declaration(DataProperty(:hasPolitcalSpectrumValue))
Declaration(DataProperty(:hasPrivateTrip1DistanceKilometresValue))
Declaration(DataProperty(:hasPrivateTrip1MeansOfTransportValue))
Declaration(DataProperty(:hasPrivateTrip1NumberOfTripsPerWeekValue))
Declaration(DataProperty(:hasPrivateTrip1PurposeValue))
Declaration(DataProperty(:hasPrivateTrip2DistanceKilometresValue))
Declaration(DataProperty(:hasPrivateTrip2MeansOfTransportValue))
Declaration(DataProperty(:hasPrivateTrip2NumberOfTripsPerWeekValue))
Declaration(DataProperty(:hasPrivateTrip2PurposeValue))
Declaration(DataProperty(:hasPrivateTrip3DistanceKilometresValue))
Declaration(DataProperty(:hasPrivateTrip3MeansOfTransportValue))
Declaration(DataProperty(:hasPrivateTrip3NumberOfTripsPerWeekValue))
Declaration(DataProperty(:hasPrivateTrip3PurposeValue))
Declaration(DataProperty(:hasProducingSolarGeneratedElectricityValue))
Declaration(DataProperty(:hasPurchaseClothesFromSecondhandShopsValue))
Declaration(DataProperty(:hasPurchaseClothesMadeInASustainableMannerValue))
Declaration(DataProperty(:hasQualityOfInsulationInHomeValue))
Declaration(DataProperty(:hasRecycleGlassValue))
Declaration(DataProperty(:hasRecyclesBatteriesValue))
Declaration(DataProperty(:hasReductionOfUnsustainableBehavioursIsEasyValue))
Declaration(DataProperty(:hasRequirementToEngageInSustainabilityDueToPrinciplesValue))
Declaration(DataProperty(:hasReuseShoppingBagsValue))
Declaration(DataProperty(:hasSB2Value))
Declaration(DataProperty(:hasSBValue))
Declaration(DataProperty(:hasSD11Value))
Declaration(DataProperty(:hasSD9Value))
Declaration(DataProperty(:hasSDValue))
Declaration(DataProperty(:hasSEValue))
Declaration(DataProperty(:hasSNValue))
Declaration(DataProperty(:hasSSValue))
Declaration(DataProperty(:hasSatificationWithNeighboursValue))
Declaration(DataProperty(:hasSatisfactionWithHouseValue))
Declaration(DataProperty(:hasSatisfactionWithLeisureTime))
Declaration(DataProperty(:hasSatisfactionWithNeighbourhoodValue))
Declaration(DataProperty(:hasSatisfactionWithWorkLifeBalance))
Declaration(DataProperty(:hasSatisfiedWithLifeValue))
Declaration(DataProperty(:hasSeparateOrganicWasteValue))
Declaration(DataProperty(:hasSeparatesPlasticValue))
Declaration(DataProperty(:hasSimpleThingsThatWillMeaninglyAlleviateGlobalWarmingValue))
Declaration(DataProperty(:hasSizeOfCurrentResidenceInSquareMetresValue))
Declaration(DataProperty(:hasSolarOrThermalHeating))
Declaration(DataProperty(:hasSolarOrThermalHotWaterHeating))
Declaration(DataProperty(:hasSourceOfHomeGenerationOfElectricityValue))
Declaration(DataProperty(:hasSquareMetersOfGardenValue))
Declaration(DataProperty(:hasSustainableLifeDueToPrinciplesValue))
Declaration(DataProperty(:hasTAValue))
Declaration(DataProperty(:hasTIValue))
Declaration(DataProperty(:hasTheAbilityToDoSimpleThingsToReduceConsumptionValue))
Declaration(DataProperty(:hasTime))
Declaration(DataProperty(:hasTurningOffHeatingSystemDuringAverageWeekValue))
Declaration(DataProperty(:hasTypeOfAccommodationForPrivateTravelOtherValue))
Declaration(DataProperty(:hasTypeOfAccommodationForPrivateTravelValue))
Declaration(DataProperty(:hasTypeOfDwellingValue))
Declaration(DataProperty(:hasUseOfWashingMachineForConvenienceValue))
Declaration(DataProperty(:hasViewOfSelfAsEnvironmentallyFriendlyConsumerValue))
Declaration(DataProperty(:hasWB1Value))
Declaration(DataProperty(:hasWB2Value))
Declaration(DataProperty(:hasWBValue))
Declaration(DataProperty(:hasWL1value))
Declaration(DataProperty(:hasWL2Value))
Declaration(DataProperty(:hasWLValue))
Declaration(DataProperty(:hasWeeklyFrequencyOfEatingBeefValue))
Declaration(DataProperty(:hasWeeklyFrequencyOfEatingBottledOrCannedDrinksValue))
Declaration(DataProperty(:hasWeeklyFrequencyOfEatingChickenValue))
Declaration(DataProperty(:hasWeeklyFrequencyOfEatingDiaryProductsValue))
Declaration(DataProperty(:hasWeeklyFrequencyOfEatingPorkValue))
Declaration(DataProperty(:hasWeeklyFrequencyOfEatingPrePreparedFoodValue))
Declaration(DataProperty(:hasWeeklyFrequencyOfEatingVegetablesAndFruitsValue))
Declaration(DataProperty(:hasWeightValue))
Declaration(DataProperty(:hasWoodPelletHeating))
Declaration(DataProperty(:hasWoodPelletHotWaterHeating))
Declaration(DataProperty(:hasWorkEndTimeValue))
Declaration(DataProperty(:hasWorkStartTimeValue))
Declaration(DataProperty(:haveChancesValueOfBeingFinanciallySuccessful))
Declaration(DataProperty(:haveChancesValueOfOvercomingLifeChallenges))
Declaration(DataProperty(:haveImportanceValueOfBeingFinanciallySuccessful))
Declaration(DataProperty(:isCheerfulAndInGoodSpirtsValue))
Declaration(DataProperty(:isInFavourOfTechnologicalInnvoationValue))
Declaration(DataProperty(:isKindOfPersonReallyConcernedAboutEnvironmentValue))
Declaration(DataProperty(:isKindOfPersonThatLikesTechnologyToWorkEffecientlyValue))
Declaration(DataProperty(:isKindOfPersonThatLikesToKnowOfTechnologyValue))
Declaration(DataProperty(:isKindOfPersonWhoConsumesInAnUnsustainableMannerValue))
Declaration(DataProperty(:isUnknownPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue))
Declaration(DataProperty(:journeyHasMeansOfTransportationValue))
Declaration(DataProperty(:numberOfMonthsOfLifeEmployed))
Declaration(DataProperty(:ownsAGardenValue))
Declaration(DataProperty(:thinksAboutBuyingAndConsumingOnlyThoseThingsNeededValue))
Declaration(DataProperty(:thinksAboutConvenienceAndComfortValue))
Declaration(DataProperty(:thinksAboutDoingMoreThingsInMyCommunityValue))
Declaration(DataProperty(:thinksAboutDoingMoreThingsOutdoorsValue))
Declaration(DataProperty(:thinksAboutGettingMoreInvolvedInVolunteerActivitiesValue))
Declaration(DataProperty(:thinksAboutHavingASlowerPaceOfLifeValue))
Declaration(DataProperty(:thinksAboutSpendingMoreTimeTravellingValue))
Declaration(DataProperty(:thinksAboutSpendingTimeWithOthersCaredAboutValue))
Declaration(DataProperty(:usesCarSharingValue))
Declaration(DataProperty(:usesCollaborativeConsumptionInitiativesValue))
Declaration(DataProperty(:usesEnergyCooperativesValue))
Declaration(DataProperty(:usesSecondClothesSellingValue))
Declaration(DataProperty(:usesSecondHandInternetSitesValue))
Declaration(DataProperty(:usesSustainableFoodConsumptionInitiativesValue))
Declaration(DataProperty(:usesSwappingAndTradingClothesValue))
Declaration(DataProperty(:wakesUpRefreshedAndRestedValue))
Declaration(DataProperty(:worksNumberOfHoursPerWeekIncludingOvertimeValue))
Declaration(NamedIndividual(:author:DougSalt))
Declaration(Datatype(xsd:date))
Declaration(Datatype(xsd:time))

############################
#   Object Properties
############################

# Object Property: :belongsTo (:belongsTo)

SubObjectPropertyOf(:belongsTo :isPartOf)
ObjectPropertyDomain(:belongsTo :Person)
ObjectPropertyRange(:belongsTo :Community)

# Object Property: :buys (:buys)

SubObjectPropertyOf(:buys :uses)
InverseObjectProperties(:buys :isSoldBy)

# Object Property: :caresAbout (:caresAbout)

ObjectPropertyDomain(:caresAbout :Person)
ObjectPropertyRange(:caresAbout :Person)

# Object Property: :desires (:desires)

AnnotationAssertion(rdfs:comment :desires "CL1"^^xsd:string)
SubObjectPropertyOf(:desires :hasProperty)
InverseObjectProperties(:desires :isDesireOf)
ObjectPropertyDomain(:desires :Person)
ObjectPropertyRange(:desires ObjectUnionOf(:ComfortableLife :LifeStyleChange))

# Object Property: :donates (:donates)

AnnotationAssertion(rdfs:comment :donates "SB2"^^xsd:string)
SubObjectPropertyOf(:donates :uses)
ObjectPropertyDomain(:donates :Person)
ObjectPropertyRange(:donates :Clothing)

# Object Property: :eats (:eats)

AnnotationAssertion(rdfs:comment :eats "FC3"^^xsd:string)
SubObjectPropertyOf(:eats :modifies)
InverseObjectProperties(:eats :isEatenBy)
ObjectPropertyDomain(:eats ObjectUnionOf(:CollectionOfIndividuals :Person))
ObjectPropertyRange(:eats :Food)

# Object Property: :electricity (:electricity)

SubObjectPropertyOf(:electricity :uses)
ObjectPropertyDomain(:electricity :Household)
ObjectPropertyRange(:electricity :Electricity)

# Object Property: :flies (:flies)

SubObjectPropertyOf(:flies :uses)
ObjectPropertyDomain(:flies :Person)
ObjectPropertyRange(:flies :Flying)

# Object Property: :givenTo (:givenTo)

SubObjectPropertyOf(:givenTo :uses)

# Object Property: :hasAffiliationAspiration (:hasAffiliationAspiration)

AnnotationAssertion(rdfs:comment :hasAffiliationAspiration "AA1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAffiliationAspiration "AA2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAffiliationAspiration "AA3"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAffiliationAspiration "AA4"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAffiliationAspiration "AA5"^^xsd:string)
SubObjectPropertyOf(:hasAffiliationAspiration :hasAspiration)
ObjectPropertyDomain(:hasAffiliationAspiration :Person)
ObjectPropertyRange(:hasAffiliationAspiration :AffiliationAspiration)

# Object Property: :hasAspiration (:hasAspiration)

SubObjectPropertyOf(:hasAspiration :hasProperty)

# Object Property: :hasAttittudeToTechnicalInnovation (:hasAttittudeToTechnicalInnovation)

SubObjectPropertyOf(:hasAttittudeToTechnicalInnovation :hasProperty)
ObjectPropertyDomain(:hasAttittudeToTechnicalInnovation :Person)
ObjectPropertyRange(:hasAttittudeToTechnicalInnovation :AttituteToTechnicalInnovation)

# Object Property: :hasCommunityAspiration (:hasCommunityAspiration)

AnnotationAssertion(rdfs:comment :hasCommunityAspiration "AC1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCommunityAspiration "AC2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCommunityAspiration "AC3"^^xsd:string)
SubObjectPropertyOf(:hasCommunityAspiration :hasAspiration)
ObjectPropertyDomain(:hasCommunityAspiration :Person)
ObjectPropertyRange(:hasCommunityAspiration :CommunityAspiration)

# Object Property: :hasCommuteToWork (:hasCommuteToWork)

AnnotationAssertion(rdfs:comment :hasCommuteToWork "MB1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCommuteToWork "This has confused me so get it down. To link Person, Journey and Transport, we have:

Person -- hasCommuteToWork --> Journey --journeyHasMeansOfTransportValue--> Transport

I have done it this way, so I can assign data values to the Journey class."@en)
SubObjectPropertyOf(:hasCommuteToWork :hasProperty)
ObjectPropertyDomain(:hasCommuteToWork :Person)
ObjectPropertyRange(:hasCommuteToWork :Commute)

# Object Property: :hasCommuteToWorkPart1 (:hasCommuteToWorkPart1)

AnnotationAssertion(rdfs:comment :hasCommuteToWorkPart1 "MB1.a"^^xsd:string)
SubObjectPropertyOf(:hasCommuteToWorkPart1 :hasCommuteToWork)
ObjectPropertyRange(:hasCommuteToWorkPart1 :CommutePart1)

# Object Property: :hasCommuteToWorkPart2 (:hasCommuteToWorkPart2)

AnnotationAssertion(rdfs:comment :hasCommuteToWorkPart2 "MB1.b"^^xsd:string)
SubObjectPropertyOf(:hasCommuteToWorkPart2 :hasCommuteToWork)
ObjectPropertyRange(:hasCommuteToWorkPart2 :CommutePart2)

# Object Property: :hasCommuteToWorkPart3 (:hasCommuteToWorkPart3)

AnnotationAssertion(rdfs:comment :hasCommuteToWorkPart3 "MB1.c"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCommuteToWorkPart3 "Note you can tie a Person to a Household via resident(uses)"@en)
SubObjectPropertyOf(:hasCommuteToWorkPart3 :hasCommuteToWork)
ObjectPropertyRange(:hasCommuteToWorkPart3 :CommutePart3)

# Object Property: :hasComputer (:hasComputer)

AnnotationAssertion(rdfs:comment :hasComputer "EU5"@en)
SubObjectPropertyOf(:hasComputer :hasProperty)
ObjectPropertyRange(:hasComputer :Computer)

# Object Property: :hasConsumption (:hasConsumption)

AnnotationAssertion(rdfs:comment :hasConsumption "CL1b"^^xsd:string)
SubObjectPropertyOf(:hasConsumption :hasProperty)

# Object Property: :hasElectricityBill (:hasElectricityBill)

AnnotationAssertion(rdfs:comment :hasElectricityBill "EU6"^^xsd:string)
SubObjectPropertyOf(:hasElectricityBill :hasProperty)
ObjectPropertyDomain(:hasElectricityBill :ExternallyGeneratedElectricity)
ObjectPropertyRange(:hasElectricityBill :ElectricityBill)

# Object Property: :hasFinancialAspiration (:hasFinancialAspiration)

AnnotationAssertion(rdfs:comment :hasFinancialAspiration "AM1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFinancialAspiration "AM2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFinancialAspiration "AM3"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasFinancialAspiration "AM4"^^xsd:string)
SubObjectPropertyOf(:hasFinancialAspiration :hasAspiration)
ObjectPropertyDomain(:hasFinancialAspiration :Person)

# Object Property: :hasFrequency (:hasFrequency)

SubObjectPropertyOf(:hasFrequency :hasProperty)
ObjectPropertyRange(:hasFrequency :Frequency)

# Object Property: :hasGarden (:hasGarden)

AnnotationAssertion(rdfs:comment :hasGarden "EU4"^^xsd:string)
SubObjectPropertyOf(:hasGarden :hasProperty)
ObjectPropertyDomain(:hasGarden ObjectSomeValuesFrom(:resident DataHasValue(:ownsAGardenValue "1"^^xsd:integer)))
ObjectPropertyRange(:hasGarden :Garden)

# Object Property: :hasHeating (:hasHeating)

SubObjectPropertyOf(:hasHeating :hasProperty)
InverseObjectProperties(:hasHeating :isHeatingFor)
ObjectPropertyDomain(:hasHeating :Household)
ObjectPropertyRange(:hasHeating :Heating)

# Object Property: :hasHedonismAspiration (:hasHedonismAspiration)

AnnotationAssertion(rdfs:comment :hasHedonismAspiration "AH1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHedonismAspiration "AH2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHedonismAspiration "AH3"^^xsd:string)
SubObjectPropertyOf(:hasHedonismAspiration :hasAspiration)
ObjectPropertyDomain(:hasHedonismAspiration :Person)
ObjectPropertyRange(:hasHedonismAspiration :HedonismAspiration)

# Object Property: :hasHomeElectricityGeneration (:hasHomeElectricityGeneration)

SubObjectPropertyOf(:hasHomeElectricityGeneration :hasProperty)
ObjectPropertyDomain(:hasHomeElectricityGeneration :Household)
ObjectPropertyRange(:hasHomeElectricityGeneration :Electricity)

# Object Property: :hasHouseHeating (:hasHouseHeating)

SubObjectPropertyOf(:hasHouseHeating :hasHeating)
InverseObjectProperties(:hasHouseHeating :isHouseHeatingFor)

# Object Property: :hasInternalAttitude (:hasInternalAttitude)

SubObjectPropertyOf(:hasInternalAttitude :hasProperty)
ObjectPropertyDomain(:hasInternalAttitude :Person)
ObjectPropertyRange(:hasInternalAttitude :InternalAttitude)

# Object Property: :hasLeisureTime (:hasLeisureTime)

SubObjectPropertyOf(:hasLeisureTime :hasTimeType)
ObjectPropertyRange(:hasLeisureTime :LeisureTime)

# Object Property: :hasLess (:hasLess)

AnnotationAssertion(rdfs:comment :hasLess "FC4"^^xsd:string)
SubObjectPropertyOf(:hasLess :hasProperty)

# Object Property: :hasLife (:hasLife)

SubObjectPropertyOf(:hasLife :hasProperty)
ObjectPropertyDomain(:hasLife :Person)
ObjectPropertyRange(:hasLife :Life)

# Object Property: :hasLocation (:hasLocation)

SubObjectPropertyOf(:hasLocation :hasProperty)
InverseObjectProperties(:hasLocation :isLocationOf)
ObjectPropertyRange(:hasLocation :Location)

# Object Property: :hasNeed (:hasNeed)

AnnotationAssertion(rdfs:comment :hasNeed "CL1b"^^xsd:string)
SubObjectPropertyOf(:hasNeed :hasProperty)

# Object Property: :hasNeighbour (:hasNeighbour)

AnnotationAssertion(rdfs:comment :hasNeighbour "NQ1b"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasNeighbour "NQ1c"^^xsd:string)
SubObjectPropertyOf(:hasNeighbour :hasProperty)
ObjectPropertyDomain(:hasNeighbour :Person)
ObjectPropertyRange(:hasNeighbour :Person)

# Object Property: :hasNeighbourhoodQuality (:hasNeighbourhoodQuality)

AnnotationAssertion(rdfs:comment :hasNeighbourhoodQuality "NQ1"^^xsd:string)
SubObjectPropertyOf(:hasNeighbourhoodQuality :hasProperty)
ObjectPropertyDomain(:hasNeighbourhoodQuality :Person)
ObjectPropertyRange(:hasNeighbourhoodQuality :NeighbourhoodQuality)

# Object Property: :hasOrigin (:hasOrigin)

SubObjectPropertyOf(:hasOrigin :hasProperty)

# Object Property: :hasPace (:hasPace)

SubObjectPropertyOf(:hasPace :hasProperty)
ObjectPropertyDomain(:hasPace :Life)
ObjectPropertyRange(:hasPace :PaceOfLife)

# Object Property: :hasPart (:hasPart)

InverseObjectProperties(:hasPart :isPartOf)

# Object Property: :hasPopularityAspiration (:hasPopularityAspiration)

AnnotationAssertion(rdfs:comment :hasPopularityAspiration "AP1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPopularityAspiration "AP2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPopularityAspiration "AP3"^^xsd:string)
SubObjectPropertyOf(:hasPopularityAspiration :hasAspiration)
ObjectPropertyDomain(:hasPopularityAspiration :Person)
ObjectPropertyRange(:hasPopularityAspiration :PopularityAspiration)

# Object Property: :hasProEnvironmentalIdentity (:hasProEnvironmentalIdentity)

AnnotationAssertion(rdfs:comment :hasProEnvironmentalIdentity "ID1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasProEnvironmentalIdentity "ID2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasProEnvironmentalIdentity "ID3"^^xsd:string)
SubObjectPropertyOf(:hasProEnvironmentalIdentity :hasProperty)
ObjectPropertyDomain(:hasProEnvironmentalIdentity :Person)
ObjectPropertyRange(:hasProEnvironmentalIdentity :ProEnvironmentalIdentity)

# Object Property: :hasProperty (:hasProperty)

InverseObjectProperties(:hasProperty :isPropertyOf)

# Object Property: :hasRegularPrivateTravel (:hasRegularPrivateTravel)

AnnotationAssertion(rdfs:comment :hasRegularPrivateTravel "MB2"^^xsd:string)
SubObjectPropertyOf(:hasRegularPrivateTravel :hasProperty)
ObjectPropertyDomain(:hasRegularPrivateTravel :Person)
ObjectPropertyRange(:hasRegularPrivateTravel :RegularPrivateTravel)

# Object Property: :hasRegularPrivateTrip1 (:hasRegularPrivateTrip1)

AnnotationAssertion(rdfs:comment :hasRegularPrivateTrip1 "MB2.a"^^xsd:string)
SubObjectPropertyOf(:hasRegularPrivateTrip1 :hasRegularPrivateTravel)
ObjectPropertyRange(:hasRegularPrivateTrip1 :RegularPrivateTravelTrip3)

# Object Property: :hasRegularPrivateTrip2 (:hasRegularPrivateTrip2)

AnnotationAssertion(rdfs:comment :hasRegularPrivateTrip2 "MB2.b"^^xsd:string)
SubObjectPropertyOf(:hasRegularPrivateTrip2 :hasRegularPrivateTravel)
ObjectPropertyRange(:hasRegularPrivateTrip2 :RegularPrivateTravelTrip2)

# Object Property: :hasRegularPrivateTrip3 (:hasRegularPrivateTrip3)

AnnotationAssertion(rdfs:comment :hasRegularPrivateTrip3 "MB2.c"^^xsd:string)
SubObjectPropertyOf(:hasRegularPrivateTrip3 :hasRegularPrivateTravel)
ObjectPropertyRange(:hasRegularPrivateTrip3 :RegularPrivateTravelTrip3)

# Object Property: :hasSatisfaction (:hasSatisfaction)

AnnotationAssertion(rdfs:comment :hasSatisfaction "NQ1"^^xsd:string)
SubObjectPropertyOf(:hasSatisfaction :hasProperty)
InverseObjectProperties(:hasSatisfaction :isSatisfiedBy)

# Object Property: :hasSchwartzScale (:hasSchwartzScale)

AnnotationAssertion(rdfs:comment :hasSchwartzScale "SS"^^xsd:string)
SubObjectPropertyOf(:hasSchwartzScale :hasProperty)

# Object Property: :hasSelfAcceptanceAspiration (:hasSelfAcceptanceAspiration)

AnnotationAssertion(rdfs:comment :hasSelfAcceptanceAspiration "ASA1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSelfAcceptanceAspiration "ASA2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSelfAcceptanceAspiration "ASA3"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSelfAcceptanceAspiration "ASA4"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSelfAcceptanceAspiration "ASA5"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSelfAcceptanceAspiration "ASA6"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSelfAcceptanceAspiration "ASA7"^^xsd:string)
SubObjectPropertyOf(:hasSelfAcceptanceAspiration :hasAspiration)
ObjectPropertyDomain(:hasSelfAcceptanceAspiration :Person)
ObjectPropertyRange(:hasSelfAcceptanceAspiration :SelfAcceptanceAspiration)

# Object Property: :hasSelfEfficacy (:hasSelfEfficacy)

AnnotationAssertion(rdfs:comment :hasSelfEfficacy "SE1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSelfEfficacy "SE2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSelfEfficacy "SE3"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSelfEfficacy "SE4"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSelfEfficacy "SE5"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSelfEfficacy "SE6"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSelfEfficacy "SE7"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSelfEfficacy "SE8"^^xsd:string)
SubObjectPropertyOf(:hasSelfEfficacy :hasProperty)
ObjectPropertyDomain(:hasSelfEfficacy :Person)
ObjectPropertyRange(:hasSelfEfficacy :SelfEfficacy)

# Object Property: :hasSocialNorm (:hasSocialNorm)

AnnotationAssertion(rdfs:comment :hasSocialNorm "SN1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSocialNorm "SN2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSocialNorm "SN3"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSocialNorm "SN4"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSocialNorm "SN5"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSocialNorm "SN6"^^xsd:string)
SubObjectPropertyOf(:hasSocialNorm :hasProperty)
ObjectPropertyDomain(:hasSocialNorm :Person)
ObjectPropertyRange(:hasSocialNorm :SocialNorm)

# Object Property: :hasSpiritualityAspiration (:hasSpiritualityAspiration)

AnnotationAssertion(rdfs:comment :hasSpiritualityAspiration "AS1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSpiritualityAspiration "AS2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSpiritualityAspiration "AS3"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSpiritualityAspiration "AS4"^^xsd:string)
SubObjectPropertyOf(:hasSpiritualityAspiration :hasAspiration)
ObjectPropertyDomain(:hasSpiritualityAspiration :Person)
ObjectPropertyRange(:hasSpiritualityAspiration :SpiritualityAspiration)

# Object Property: :hasSustainabilityInitiativeService (:hasSustainabilityInitiativeService)

AnnotationAssertion(rdfs:comment :hasSustainabilityInitiativeService "IU"^^xsd:string)
SubObjectPropertyOf(:hasSustainabilityInitiativeService :hasProperty)

# Object Property: :hasTimeAffluence (:hasTimeAffluence)

AnnotationAssertion(rdfs:comment :hasTimeAffluence "TA"^^xsd:string)
SubObjectPropertyOf(:hasTimeAffluence :hasProperty)
ObjectPropertyDomain(:hasTimeAffluence :Person)
ObjectPropertyRange(:hasTimeAffluence :TimeAffluence)

# Object Property: :hasTimeType (:hasTimeType)

SubObjectPropertyOf(:hasTimeType :hasProperty)
ObjectPropertyRange(:hasTimeType :Time)

# Object Property: :hasUnitOfCurrency (:hasUnitOfCurrency)

SubObjectPropertyOf(:hasUnitOfCurrency :hasUnits)

# Object Property: :hasUnitOfLength (:hasUnitOfLength)

SubObjectPropertyOf(:hasUnitOfLength :hasUnits)
ObjectPropertyRange(:hasUnitOfLength :UnitsOfMeasurementOfLength)

# Object Property: :hasUnitOfMass (:hasUnitOfMass)

SubObjectPropertyOf(:hasUnitOfMass :hasUnits)
ObjectPropertyRange(:hasUnitOfMass :UnitsOfMeasurementOfMass)

# Object Property: :hasUnitOfTime (:hasUnitOfTime)

SubObjectPropertyOf(:hasUnitOfTime :hasUnits)
ObjectPropertyRange(:hasUnitOfTime :UnitsOfMeasurementOfTime)

# Object Property: :hasUnits (:hasUnits)

FunctionalObjectProperty(:hasUnits)

# Object Property: :hasVoluntaryWork (:hasVoluntaryWork)

AnnotationAssertion(rdfs:comment :hasVoluntaryWork "WL2"^^xsd:string)
SubObjectPropertyOf(:hasVoluntaryWork :hasProperty)
ObjectPropertyDomain(:hasVoluntaryWork :Person)
ObjectPropertyDomain(:hasVoluntaryWork DataHasValue(:doesUnpaidVolunteerWork "1"^^xsd:integer))
ObjectPropertyRange(:hasVoluntaryWork :UnpaidVolunteerWork)

# Object Property: :hasWaterHeating (:hasWaterHeating)

SubObjectPropertyOf(:hasWaterHeating :hasHeating)
InverseObjectProperties(:hasWaterHeating :isWaterHeatingFor)

# Object Property: :hasWellBeing (:hasWellBeing)

AnnotationAssertion(rdfs:comment :hasWellBeing "WB1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasWellBeing "WB2"^^xsd:string)
SubObjectPropertyOf(:hasWellBeing :hasProperty)
ObjectPropertyDomain(:hasWellBeing :Person)
ObjectPropertyRange(:hasWellBeing :WellBeing)

# Object Property: :hasWorkTime (:hasWorkTime)

AnnotationAssertion(rdfs:comment :hasWorkTime "WL1b"^^xsd:string)
SubObjectPropertyOf(:hasWorkTime :hasTimeType)
ObjectPropertyDomain(:hasWorkTime ObjectUnionOf(:EmployedFullTime :EmployedPartTime :EntrepreneurWithStaff :EntrepreneurWithoutStaff :OccasionalTemporaryContracts :WorkedInEducation))
ObjectPropertyRange(:hasWorkTime :WorkTime)

# Object Property: :heats (:heats)

AnnotationAssertion(rdfs:comment :heats "EU9b"^^xsd:string)
SubObjectPropertyOf(:heats :modifies)
ObjectPropertyDomain(:heats :HomeHeating)
ObjectPropertyDomain(:heats ObjectSomeValuesFrom(:hasUnitOfTime :ColdSeason))
ObjectPropertyDomain(:heats ObjectSomeValuesFrom(:isUsedBy :Household))
ObjectPropertyRange(:heats :Room)

# Object Property: :isDesireOf (:isDesireOf)

AnnotationAssertion(rdfs:comment :isDesireOf "CL1"^^xsd:string)
SubObjectPropertyOf(:isDesireOf :isPropertyOf)

# Object Property: :isEatenBy (:isEatenBy)

AnnotationAssertion(rdfs:comment :isEatenBy "FC3"^^xsd:string)
SubObjectPropertyOf(:isEatenBy :isModifiedBy)
ObjectPropertyDomain(:isEatenBy :Food)
ObjectPropertyRange(:isEatenBy :Person)

# Object Property: :isEmploymentStatusFor (:isEmploymentStatusFor)

AnnotationAssertion(rdfs:comment :isEmploymentStatusFor "WL1a"^^xsd:string)
SubObjectPropertyOf(:isEmploymentStatusFor :isPropertyOf)
ObjectPropertyDomain(:isEmploymentStatusFor :Employment)
ObjectPropertyRange(:isEmploymentStatusFor :Person)

# Object Property: :isHeatingFor (:isHeatingFor)

SubObjectPropertyOf(:isHeatingFor :isPropertyOf)

# Object Property: :isHouseHeatingFor (:isHouseHeatingFor)

SubObjectPropertyOf(:isHouseHeatingFor :isHeatingFor)

# Object Property: :isLocationOf (:isLocationOf)

AnnotationAssertion(rdfs:comment :isLocationOf "SD10"^^xsd:string)
SubObjectPropertyOf(:isLocationOf :isUsedBy)

# Object Property: :isModifiedBy (:isModifiedBy)

InverseObjectProperties(:isModifiedBy :modifies)

# Object Property: :isPartOf (:isPartOf)

AnnotationAssertion(rdfs:comment :isPartOf "Should be 

+transitive
+reflexive
+anti-symmetric

Transitive breaks the Pellet reaonser, and reflexive messes with the domains and codamins in the integration ontology."@en)

# Object Property: :isPerUnitOfCurrency (:isPerUnitOfCurrency)

SubObjectPropertyOf(:isPerUnitOfCurrency :isPerUnit)

# Object Property: :isPerUnitOfLength (:isPerUnitOfLength)

SubObjectPropertyOf(:isPerUnitOfLength :isPerUnit)
ObjectPropertyRange(:isPerUnitOfLength :UnitsOfMeasurementOfLength)

# Object Property: :isPerUnitOfMass (:isPerUnitOfMass)

SubObjectPropertyOf(:isPerUnitOfMass :isPerUnit)
ObjectPropertyRange(:isPerUnitOfMass :UnitsOfMeasurementOfMass)

# Object Property: :isPerUnitOfTime (:isPerUnitOfTime)

SubObjectPropertyOf(:isPerUnitOfTime :isPerUnit)
ObjectPropertyRange(:isPerUnitOfTime :UnitsOfMeasurementOfTime)

# Object Property: :isRepairedBy (:isRepairedBy)

SubObjectPropertyOf(:isRepairedBy :isRepairedOrTransformedBy)
InverseObjectProperties(:isRepairedBy :repairs)

# Object Property: :isRepairedOrTransformedBy (:isRepairedOrTransformedBy)

SubObjectPropertyOf(:isRepairedOrTransformedBy :isModifiedBy)
InverseObjectProperties(:isRepairedOrTransformedBy :repairsOrTransforms)

# Object Property: :isSatisfiedBy (:isSatisfiedBy)

AnnotationAssertion(rdfs:comment :isSatisfiedBy "NQ1"^^xsd:string)
SubObjectPropertyOf(:isSatisfiedBy :isPropertyOf)

# Object Property: :isSharedBy (:isSharedBy)

SubObjectPropertyOf(:isSharedBy :isUsedBy)
InverseObjectProperties(:isSharedBy :sharesWith)

# Object Property: :isSoldBy (:isSoldBy)

SubObjectPropertyOf(:isSoldBy :isUsedBy)
ObjectPropertyDomain(:isSoldBy ObjectUnionOf(:Person :SecondHandShop))

# Object Property: :isSpentBy (:isSpentBy)

AnnotationAssertion(rdfs:comment :isSpentBy "FC2"^^xsd:string)
SubObjectPropertyOf(:isSpentBy :isUsedBy)
InverseObjectProperties(:isSpentBy :spends)

# Object Property: :isTheQualificationLevelOf (:isTheQualificationLevelOf)

AnnotationAssertion(rdfs:comment :isTheQualificationLevelOf "SD3"^^xsd:string)
SubObjectPropertyOf(:isTheQualificationLevelOf :isPropertyOf)
ObjectPropertyDomain(:isTheQualificationLevelOf :QualificationLevel)
ObjectPropertyRange(:isTheQualificationLevelOf :Person)

# Object Property: :isTransformedBy (:isTransformedBy)

SubObjectPropertyOf(:isTransformedBy :isRepairedOrTransformedBy)
InverseObjectProperties(:isTransformedBy :transforrms)

# Object Property: :isTransportUsedForTravel (:isTransportUsedForTravel)

AnnotationAssertion(rdfs:comment :isTransportUsedForTravel "MB1"^^xsd:string)
AnnotationAssertion(rdfs:comment :isTransportUsedForTravel "MB2"^^xsd:string)
SubObjectPropertyOf(:isTransportUsedForTravel :isPropertyOf)
ObjectPropertyDomain(:isTransportUsedForTravel :Transport)
ObjectPropertyRange(:isTransportUsedForTravel :Journey)

# Object Property: :isUsedBy (:isUsedBy)

AnnotationAssertion(rdfs:comment :isUsedBy "MB3"^^xsd:string)
InverseObjectProperties(:isUsedBy :uses)

# Object Property: :isUsedOnlyBy (:isUsedOnlyBy)

AnnotationAssertion(rdfs:comment :isUsedOnlyBy "MB3.1"^^xsd:string)
SubObjectPropertyOf(:isUsedOnlyBy :isUsedBy)
InverseObjectProperties(:isUsedOnlyBy :usedOnlyBy)

# Object Property: :isWaterHeatingFor (:isWaterHeatingFor)

SubObjectPropertyOf(:isWaterHeatingFor :isHeatingFor)

# Object Property: :less (:less)

AnnotationAssertion(rdfs:comment :less "CL1f"^^xsd:string)
SubObjectPropertyOf(:less :modifies)
IrreflexiveObjectProperty(:less)

# Object Property: :made (:made)

AnnotationAssertion(rdfs:comment :made "SB2"^^xsd:string)
SubObjectPropertyOf(:made :modifies)

# Object Property: :more (:more)

SubObjectPropertyOf(:more :modifies)
IrreflexiveObjectProperty(:more)

# Object Property: :recyles (:recyles)

AnnotationAssertion(rdfs:comment :recyles "FC5"^^xsd:string)
SubObjectPropertyOf(:recyles :uses)
ObjectPropertyDomain(:recyles ObjectUnionOf(DataSomeValuesFrom(:hasRecycleGlassValue xsd:positiveInteger) DataSomeValuesFrom(:hasRecyclesBatteriesValue xsd:positiveInteger)))
ObjectPropertyRange(:recyles ObjectUnionOf(:Batteries :Glass))

# Object Property: :repairs (:repairs)

AnnotationAssertion(rdfs:comment :repairs "SB2"^^xsd:string)
SubObjectPropertyOf(:repairs :repairsOrTransforms)

# Object Property: :repairsOrTransforms (:repairsOrTransforms)

AnnotationAssertion(rdfs:comment :repairsOrTransforms "SB2"^^xsd:string)
SubObjectPropertyOf(:repairsOrTransforms :modifies)
ObjectPropertyDomain(:repairsOrTransforms ObjectUnionOf(:CollectionOfIndividuals :Person))

# Object Property: :resident (:resident)

AnnotationAssertion(rdfs:comment :resident "EU2"^^xsd:string)
SubObjectPropertyOf(:resident :isUsedBy)
InverseObjectProperties(:resident :resides)
ObjectPropertyDomain(:resident :Household)
ObjectPropertyRange(:resident :Person)

# Object Property: :resides (:resides)

AnnotationAssertion(rdfs:comment :resides "This is a little experiment. I am trying to refine my verbs (object properites) into basic groups. As  a consequence just for the sake of implementing this I am pairing all descendants of these basic types with inverses if they exist."@en)
SubObjectPropertyOf(:resides :uses)

# Object Property: :reuse (:reuse)

AnnotationAssertion(rdfs:comment :reuse "FC5"^^xsd:string)
SubObjectPropertyOf(:reuse :uses)
ObjectPropertyDomain(:reuse DataSomeValuesFrom(:hasReuseShoppingBagsValue xsd:positiveInteger))
ObjectPropertyRange(:reuse :PlasticBags)

# Object Property: :separates (:separates)

AnnotationAssertion(rdfs:comment :separates "FC5"^^xsd:string)
SubObjectPropertyOf(:separates :uses)
ObjectPropertyDomain(:separates ObjectUnionOf(DataSomeValuesFrom(:hasSeparateOrganicWasteValue xsd:positiveInteger) DataSomeValuesFrom(:hasSeparatesPlasticValue xsd:positiveInteger)))
ObjectPropertyRange(:separates ObjectUnionOf(:OrganicWaste :Plastic))

# Object Property: :sharesWith (:sharesWith)

AnnotationAssertion(rdfs:comment :sharesWith "MB3.2"^^xsd:string)
SubObjectPropertyOf(:sharesWith :uses)
ObjectPropertyRange(:sharesWith :Collection)
DisjointObjectProperties(:sharesWith :usedOnlyBy)

# Object Property: :spends (:spends)

AnnotationAssertion(rdfs:comment :spends "FC2"^^xsd:string)
SubObjectPropertyOf(:spends :uses)
ObjectPropertyDomain(:spends :Person)
ObjectPropertyRange(:spends :Money)

# Object Property: :spendsTime (:spendsTime)

SubObjectPropertyOf(:spendsTime :uses)

# Object Property: :spendsTimeWith (:spendsTimeWith)

ObjectPropertyDomain(:spendsTimeWith :Time)
ObjectPropertyRange(:spendsTimeWith :Person)

# Object Property: :transforrms (:transforrms)

AnnotationAssertion(rdfs:comment :transforrms "SB2"^^xsd:string)
SubObjectPropertyOf(:transforrms :repairsOrTransforms)

# Object Property: :useHomeGeneratedElectricity (:useHomeGeneratedElectricity)

SubObjectPropertyOf(:useHomeGeneratedElectricity :electricity)
ObjectPropertyDomain(:useHomeGeneratedElectricity DataHasValue(:hasProducingSolarGeneratedElectricityValue "1"^^xsd:integer))
ObjectPropertyRange(:useHomeGeneratedElectricity :HomeGeneratedElectricity)

# Object Property: :usedOnlyBy (:usedOnlyBy)

AnnotationAssertion(rdfs:comment :usedOnlyBy "MB3.1"^^xsd:string)
SubObjectPropertyOf(:usedOnlyBy :uses)

# Object Property: :usesAccomodation (:usesAccomodation)

SubObjectPropertyOf(:usesAccomodation :uses)
ObjectPropertyDomain(:usesAccomodation :Person)
ObjectPropertyRange(:usesAccomodation :Accomodation)

# Object Property: :volunteersTime (:volunteersTime)

SubObjectPropertyOf(:volunteersTime :spendsTime)


############################
#   Data Properties
############################

# Data Property: :choosesWhatToDoInsteadOfBeingPushedValue (I choose what I do instead of being pushed along by life)

AnnotationAssertion(rdfs:comment :choosesWhatToDoInsteadOfBeingPushedValue "II2"^^xsd:string)
AnnotationAssertion(rdfs:label :choosesWhatToDoInsteadOfBeingPushedValue "I choose what I do instead of being pushed along by life"@en)
SubDataPropertyOf(:choosesWhatToDoInsteadOfBeingPushedValue :hasIIValue)

# Data Property: :doesNotHeatHome (Home is never heated)

AnnotationAssertion(rdfs:comment :doesNotHeatHome "EU7Home_o"^^xsd:string)
AnnotationAssertion(rdfs:label :doesNotHeatHome "Home is never heated"@en)
SubDataPropertyOf(:doesNotHeatHome :hasEU7Value)
DataPropertyDomain(:doesNotHeatHome DataHasValue(:doesNotKnowHowWaterIsHeated "false"^^xsd:boolean))
DataPropertyDomain(:doesNotHeatHome DataHasValue(:hasDistrictHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotHeatHome DataHasValue(:hasElectricUnderfloorHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotHeatHome DataHasValue(:hasElectricalOrGasPumpHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotHeatHome DataHasValue(:hasGasHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotHeatHome DataHasValue(:hasOilHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotHeatHome DataHasValue(:hasSolarOrThermalHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotHeatHome DataHasValue(:hasWoodPelletHeating "false"^^xsd:boolean))

# Data Property: :doesNotHeatWater (Water is never heated)

AnnotationAssertion(rdfs:comment :doesNotHeatWater "EU7Home_p"^^xsd:string)
AnnotationAssertion(rdfs:label :doesNotHeatWater "Water is never heated"@en)
SubDataPropertyOf(:doesNotHeatWater :hasEU7Value)
DataPropertyDomain(:doesNotHeatWater DataHasValue(:doesNotKnowHowWaterIsHeated "false"^^xsd:boolean))
DataPropertyDomain(:doesNotHeatWater DataHasValue(:hasDistrictWaterHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotHeatWater DataHasValue(:hasElectricWaterHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotHeatWater DataHasValue(:hasElectricalOrGasHotWaterTank "false"^^xsd:boolean))
DataPropertyDomain(:doesNotHeatWater DataHasValue(:hasGasHotWaterHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotHeatWater DataHasValue(:hasOilHotWaterHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotHeatWater DataHasValue(:hasSolarOrThermalHotWaterHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotHeatWater DataHasValue(:hasWoodPelletHotWaterHeating "false"^^xsd:boolean))

# Data Property: :doesNotKnowHowHouseIsHeated (Unknown type of home heating)

AnnotationAssertion(rdfs:comment :doesNotKnowHowHouseIsHeated "EU7Home_q"^^xsd:string)
AnnotationAssertion(rdfs:label :doesNotKnowHowHouseIsHeated "Unknown type of home heating"@en)
SubDataPropertyOf(:doesNotKnowHowHouseIsHeated :hasEU7Value)
DataPropertyDomain(:doesNotKnowHowHouseIsHeated DataHasValue(:doesNotHeatHome "false"^^xsd:boolean))
DataPropertyDomain(:doesNotKnowHowHouseIsHeated DataHasValue(:hasDistrictHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotKnowHowHouseIsHeated DataHasValue(:hasElectricUnderfloorHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotKnowHowHouseIsHeated DataHasValue(:hasElectricalOrGasPumpHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotKnowHowHouseIsHeated DataHasValue(:hasGasHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotKnowHowHouseIsHeated DataHasValue(:hasOilHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotKnowHowHouseIsHeated DataHasValue(:hasSolarOrThermalHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotKnowHowHouseIsHeated DataHasValue(:hasWoodPelletHeating "false"^^xsd:boolean))

# Data Property: :doesNotKnowHowWaterIsHeated (Unkonwn type of water heating)

AnnotationAssertion(rdfs:comment :doesNotKnowHowWaterIsHeated "EU7Home_r"^^xsd:string)
AnnotationAssertion(rdfs:label :doesNotKnowHowWaterIsHeated "Unkonwn type of water heating"@en)
SubDataPropertyOf(:doesNotKnowHowWaterIsHeated :hasEU7Value)
DataPropertyDomain(:doesNotKnowHowWaterIsHeated DataHasValue(:doesNotHeatWater "false"^^xsd:boolean))
DataPropertyDomain(:doesNotKnowHowWaterIsHeated DataHasValue(:hasDistrictWaterHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotKnowHowWaterIsHeated DataHasValue(:hasElectricWaterHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotKnowHowWaterIsHeated DataHasValue(:hasElectricalOrGasHotWaterTank "false"^^xsd:boolean))
DataPropertyDomain(:doesNotKnowHowWaterIsHeated DataHasValue(:hasGasHotWaterHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotKnowHowWaterIsHeated DataHasValue(:hasOilHotWaterHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotKnowHowWaterIsHeated DataHasValue(:hasSolarOrThermalHotWaterHeating "false"^^xsd:boolean))
DataPropertyDomain(:doesNotKnowHowWaterIsHeated DataHasValue(:hasWoodPelletHotWaterHeating "false"^^xsd:boolean))

# Data Property: :doesNumberOfHoursVolunteerWorkPerWeek (Please, indicate the number of hours you spend on unpaid volunteer work per week, approximately)

AnnotationAssertion(rdfs:label :doesNumberOfHoursVolunteerWorkPerWeek "Please, indicate the number of hours you spend on unpaid volunteer work per week, approximately"@en)
SubDataPropertyOf(:doesNumberOfHoursVolunteerWorkPerWeek :hasWL2Value)
DataPropertyDomain(:doesNumberOfHoursVolunteerWorkPerWeek :UnpaidVolunteerWork)
DataPropertyRange(:doesNumberOfHoursVolunteerWorkPerWeek xsd:nonNegativeInteger)

# Data Property: :doesUnpaidVolunteerWork (Do you do any unpaid volunteer work)

AnnotationAssertion(rdfs:comment :doesUnpaidVolunteerWork "1 → Yes
2 → No"@en)
AnnotationAssertion(rdfs:comment :doesUnpaidVolunteerWork "WL2"^^xsd:string)
AnnotationAssertion(rdfs:label :doesUnpaidVolunteerWork "Do you do any unpaid volunteer work"@en)
SubDataPropertyOf(:doesUnpaidVolunteerWork :hasWL2Value)
SubDataPropertyOf(:doesUnpaidVolunteerWork :hasWLValue)
DataPropertyDomain(:doesUnpaidVolunteerWork :Person)
DataPropertyRange(:doesUnpaidVolunteerWork DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "2"^^xsd:integer))

# Data Property: :feelsActiveAndVigorousValue (I have felt active and vigorous)

AnnotationAssertion(rdfs:comment :feelsActiveAndVigorousValue "WB2c"^^xsd:string)
AnnotationAssertion(rdfs:label :feelsActiveAndVigorousValue "I have felt active and vigorous"@en)
SubDataPropertyOf(:feelsActiveAndVigorousValue :hasWB2Value)

# Data Property: :feelsCalmAndRelaxedValue (I have felt calm and relaxed)

AnnotationAssertion(rdfs:comment :feelsCalmAndRelaxedValue "WB2b"^^xsd:string)
AnnotationAssertion(rdfs:label :feelsCalmAndRelaxedValue "I have felt calm and relaxed"@en)
SubDataPropertyOf(:feelsCalmAndRelaxedValue :hasWB2Value)

# Data Property: :feelsGoodAboutAbilititesValue (I feel good about my abilities)

AnnotationAssertion(rdfs:comment :feelsGoodAboutAbilititesValue "II3"^^xsd:string)
AnnotationAssertion(rdfs:label :feelsGoodAboutAbilititesValue "I feel good about my abilities"@en)
SubDataPropertyOf(:feelsGoodAboutAbilititesValue :hasIIValue)

# Data Property: :hasAA1Value (People will show affection to me, and I will to them)

AnnotationAssertion(rdfs:comment :hasAA1Value "AA1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAA1Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAA1Value "People will show affection to me, and I will to them"@en)
SubDataPropertyOf(:hasAA1Value :hasAAValue)
DataPropertyRange(:hasAA1Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAA2Value (I will feel that there are people who really love me)

AnnotationAssertion(rdfs:comment :hasAA2Value "AA2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAA2Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAA2Value "I will feel that there are people who really love me"@en)
SubDataPropertyOf(:hasAA2Value :hasAAValue)
DataPropertyRange(:hasAA2Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAA3Value (Someone in my life will accept me as I am, no matter what)

AnnotationAssertion(rdfs:comment :hasAA3Value "AA3"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAA3Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAA3Value "Someone in my life will accept me as I am, no matter what"@en)
SubDataPropertyOf(:hasAA3Value :hasAAValue)
DataPropertyRange(:hasAA3Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAA4Value (I will express my love for special people)

AnnotationAssertion(rdfs:comment :hasAA4Value "AA4"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAA4Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAA4Value "I will express my love for special people"@en)
SubDataPropertyOf(:hasAA4Value :hasAAValue)
DataPropertyRange(:hasAA4Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAA5Value (I will have a committed, intimate relationship)

AnnotationAssertion(rdfs:comment :hasAA5Value "AA5"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAA5Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAA5Value "I will have a committed, intimate relationship"@en)
SubDataPropertyOf(:hasAA5Value :hasAAValue)
DataPropertyRange(:hasAA5Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAAValue (:hasAAValue)

AnnotationAssertion(rdfs:comment :hasAAValue "has affiliation aspriation value"@en)
DataPropertyDomain(:hasAAValue :AffiliationAspiration)

# Data Property: :hasAC1Value (I will assist people who need it, asking nothing in return)

AnnotationAssertion(rdfs:comment :hasAC1Value "AC1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAC1Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAC1Value "I will assist people who need it, asking nothing in return"@en)
SubDataPropertyOf(:hasAC1Value :hasACValue)
DataPropertyRange(:hasAC1Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAC2Value (The things I do will make other people's lives better)

AnnotationAssertion(rdfs:comment :hasAC2Value "AC2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAC2Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAC2Value "The things I do will make other people's lives better"@en)
SubDataPropertyOf(:hasAC2Value :hasACValue)
DataPropertyRange(:hasAC2Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAC3Value (I will help the world become a better place)

AnnotationAssertion(rdfs:comment :hasAC3Value "AC3"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAC3Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAC3Value "I will help the world become a better place"@en)
SubDataPropertyOf(:hasAC3Value :hasACValue)
DataPropertyRange(:hasAC3Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasACValue (:hasACValue)

AnnotationAssertion(rdfs:comment :hasACValue "has community aspriation value"@en)
DataPropertyDomain(:hasACValue :CommunityAspiration)

# Data Property: :hasAFulfilledDailyLifeValue (My daily life has been filled with things that interest me)

AnnotationAssertion(rdfs:comment :hasAFulfilledDailyLifeValue "WB2e"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAFulfilledDailyLifeValue "My daily life has been filled with things that interest me"@en)
SubDataPropertyOf(:hasAFulfilledDailyLifeValue :hasWB2Value)

# Data Property: :hasAH1value (I will have a great sex life)

AnnotationAssertion(rdfs:comment :hasAH1value "AH1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAH1value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAH1value "I will have a great sex life"@en)
SubDataPropertyOf(:hasAH1value :hasAHValue)
DataPropertyRange(:hasAH1value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAH2Value (I will have a lot of excitement in my life)

AnnotationAssertion(rdfs:comment :hasAH2Value "AH2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAH2Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAH2Value "I will have a lot of excitement in my life"@en)
SubDataPropertyOf(:hasAH2Value :hasAHValue)
DataPropertyRange(:hasAH2Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAH3Value (I will experience a great deal of sensual pleasure)

AnnotationAssertion(rdfs:comment :hasAH3Value "AH3"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAH3Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAH3Value "I will experience a great deal of sensual pleasure"@en)
SubDataPropertyOf(:hasAH3Value :hasAHValue)
DataPropertyRange(:hasAH3Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAHValue (:hasAHValue)

AnnotationAssertion(rdfs:comment :hasAHValue "has hedonism aspriation value"@en)
DataPropertyDomain(:hasAHValue :HedonismAspiration)

# Data Property: :hasAM1Value (I will have many expensive possessions)

AnnotationAssertion(rdfs:comment :hasAM1Value "AM1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAM1Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAM1Value "I will have many expensive possessions"@en)
SubDataPropertyOf(:hasAM1Value :hasAMValue)
DataPropertyRange(:hasAM1Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAM2Value (I will be financially successful)

AnnotationAssertion(rdfs:comment :hasAM2Value "AM2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAM2Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAM2Value "I will be financially successful"@en)
SubDataPropertyOf(:hasAM2Value :hasAMValue)
DataPropertyRange(:hasAM2Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAM3Value (I will have enough money to buy everything I want)

AnnotationAssertion(rdfs:comment :hasAM3Value "AM3"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAM3Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAM3Value "I will have enough money to buy everything I want"@en)
SubDataPropertyOf(:hasAM3Value :hasAMValue)
DataPropertyRange(:hasAM3Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAM4Value (I will have a job that pays well)

AnnotationAssertion(rdfs:comment :hasAM4Value "AM4"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAM4Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAM4Value "I will have a job that pays well"@en)
SubDataPropertyOf(:hasAM4Value :hasAMValue)
DataPropertyRange(:hasAM4Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAMValue (:hasAMValue)

AnnotationAssertion(rdfs:comment :hasAMValue "has financial aspiration value"@en)
DataPropertyDomain(:hasAMValue :FinancialAspiration)

# Data Property: :hasAP1Value (I will be admired by many people)

AnnotationAssertion(rdfs:comment :hasAP1Value "AP1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAP1Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAP1Value "I will be admired by many people"@en)
SubDataPropertyOf(:hasAP1Value :hasAPValue)
DataPropertyRange(:hasAP1Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAP2Value (My name will be known by many different people)

AnnotationAssertion(rdfs:comment :hasAP2Value "AP2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAP2Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAP2Value "My name will be known by many different people"@en)
SubDataPropertyOf(:hasAP2Value :hasAPValue)
DataPropertyRange(:hasAP2Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAP3Value (Most everyone who knows me will like me)

AnnotationAssertion(rdfs:comment :hasAP3Value "AP3"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAP3Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAP3Value "Most everyone who knows me will like me"@en)
SubDataPropertyOf(:hasAP3Value :hasAPValue)
DataPropertyRange(:hasAP3Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAPValue (:hasAPValue)

AnnotationAssertion(rdfs:comment :hasAPValue "has popularity aspiration value"@en)
DataPropertyDomain(:hasAPValue :PopularityAspiration)

# Data Property: :hasAS1Value (I will find satisfying religious and/or spiritual activities)

AnnotationAssertion(rdfs:comment :hasAS1Value "AS1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAS1Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAS1Value "I will find satisfying religious and/or spiritual activities"@en)
SubDataPropertyOf(:hasAS1Value :hasASValue)
DataPropertyRange(:hasAS1Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAS2Value (I will find religious or spiritual beliefs that help me make sense of the world)

AnnotationAssertion(rdfs:comment :hasAS2Value "AS2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAS2Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAS2Value "I will find religious or spiritual beliefs that help me make sense of the world"@en)
SubDataPropertyOf(:hasAS2Value :hasASValue)
DataPropertyRange(:hasAS2Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAS3Value (I will find religious and/or spiritual beliefs that are growth-producing)

AnnotationAssertion(rdfs:label :hasAS3Value "AS3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAS3Value "I will find religious and/or spiritual beliefs that are growth-producing"@en)
SubDataPropertyOf(:hasAS3Value :hasASValue)

# Data Property: :hasAS4Value (My life and actions will be in agreement with my religious/spiritual beliefs)

AnnotationAssertion(rdfs:comment :hasAS4Value "AS4"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasAS4Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasAS4Value "My life and actions will be in agreement with my religious/spiritual beliefs"@en)
SubDataPropertyOf(:hasAS4Value :hasASValue)
DataPropertyRange(:hasAS4Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasASA1Value (I will be efficient)

AnnotationAssertion(rdfs:comment :hasASA1Value "ASA1"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasASA1Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasASA1Value "I will be efficient"@en)
SubDataPropertyOf(:hasASA1Value :hasASAValue)
DataPropertyRange(:hasASA1Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasASA2Value (I will choose what I do, instead of being pushed along by life)

AnnotationAssertion(rdfs:comment :hasASA2Value "ASA2"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasASA2Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasASA2Value "I will choose what I do, instead of being pushed along by life"@en)
SubDataPropertyOf(:hasASA2Value :hasASAValue)
DataPropertyRange(:hasASA2Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasASA3Value (I will feel free)

AnnotationAssertion(rdfs:comment :hasASA3Value "ASA3"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasASA3Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasASA3Value "I will feel free"@en)
SubDataPropertyOf(:hasASA3Value :hasASAValue)
DataPropertyRange(:hasASA3Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasASA4Value (I will deal effectively with problems in my life)

AnnotationAssertion(rdfs:comment :hasASA4Value "ASA4"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasASA4Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasASA4Value "I will deal effectively with problems in my life"@en)
SubDataPropertyOf(:hasASA4Value :hasASAValue)
DataPropertyRange(:hasASA4Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasASA5Value (I will feel good about my abilities)

AnnotationAssertion(rdfs:comment :hasASA5Value "ASA5"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasASA5Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasASA5Value "I will feel good about my abilities"@en)
SubDataPropertyOf(:hasASA5Value :hasASAValue)
DataPropertyRange(:hasASA5Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasASA6Value (I will overcome the challenges that life presents me)

AnnotationAssertion(rdfs:comment :hasASA6Value "ASA6"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasASA6Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasASA6Value "I will overcome the challenges that life presents me"@en)
SubDataPropertyOf(:hasASA6Value :hasASAValue)
DataPropertyRange(:hasASA6Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasASA7Value (I will have insight into why I do the things I do)

AnnotationAssertion(rdfs:comment :hasASA7Value "ASA7"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasASA7Value "Ascending: 1 - None → 7 - Very high"@en)
AnnotationAssertion(rdfs:label :hasASA7Value "I will have insight into why I do the things I do"@en)
SubDataPropertyOf(:hasASA7Value :hasASAValue)
DataPropertyRange(:hasASA7Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasASAValue (:hasASAValue)

AnnotationAssertion(rdfs:comment :hasASAValue "has self-acceptance aspiration value"@en)
DataPropertyDomain(:hasASAValue :SelfAcceptanceAspiration)

# Data Property: :hasASValue (:hasASValue)

AnnotationAssertion(rdfs:comment :hasASValue "has spirituality aspriation value"@en)
DataPropertyDomain(:hasASValue :SpiritualityAspiration)

# Data Property: :hasAbilityToFindMoreTimeForImportantThingsValue (There are simple things I can change in my life to have more time for the things that are important to me)

AnnotationAssertion(rdfs:comment :hasAbilityToFindMoreTimeForImportantThingsValue "SE7"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAbilityToFindMoreTimeForImportantThingsValue "There are simple things I can change in my life to have more time for the things that are important to me"@en)
SubDataPropertyOf(:hasAbilityToFindMoreTimeForImportantThingsValue :hasSEValue)

# Data Property: :hasAbilityToFreeUpTimeForSelfValue (In my daily life, freeing up time for  myself is feasible)

AnnotationAssertion(rdfs:comment :hasAbilityToFreeUpTimeForSelfValue "SE8"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAbilityToFreeUpTimeForSelfValue "In my daily life, freeing up time for  myself is feasible"@en)
SubDataPropertyOf(:hasAbilityToFreeUpTimeForSelfValue :hasSEValue)

# Data Property: :hasAgeOfCarValue (How old is the car you own or share with other members of your household)

AnnotationAssertion(rdfs:comment :hasAgeOfCarValue "1 → 0-5 years
2 → 5-10 years
3 → 10-15 years
4 → 15 years or more"@en)
AnnotationAssertion(rdfs:comment :hasAgeOfCarValue "MB5"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAgeOfCarValue "How old is the car you own or share with other members of your household"@en)
SubDataPropertyOf(:hasAgeOfCarValue :hasMBValue)
DataPropertyDomain(:hasAgeOfCarValue ObjectUnionOf(:CarUsedByASingleDriver :CarUsedByHousehold))
DataPropertyRange(:hasAgeOfCarValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "4"^^xsd:integer))

# Data Property: :hasAgeOfDwellingUnknown (Date when dwelling built is unknown)

AnnotationAssertion(rdfs:comment :hasAgeOfDwellingUnknown "EU3a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAgeOfDwellingUnknown "Date when dwelling built is unknown"@en)
SubDataPropertyOf(:hasAgeOfDwellingUnknown :hasEU3Value)
DataPropertyRange(:hasAgeOfDwellingUnknown xsd:boolean)

# Data Property: :hasAgeValue (What is your age)

AnnotationAssertion(rdfs:comment :hasAgeValue "SD2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAgeValue "What is your age"@en)
SubDataPropertyOf(:hasAgeValue :hasSDValue)
DataPropertyDomain(:hasAgeValue :Person)
DataPropertyRange(:hasAgeValue xsd:nonNegativeInteger)

# Data Property: :hasAmountOfTimeSpentCookingDailyValue (Time cooking meals on one day of a typical weekend/free day)

AnnotationAssertion(rdfs:comment :hasAmountOfTimeSpentCookingDailyValue "FC1_1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAmountOfTimeSpentCookingDailyValue "Time cooking meals on one day of a typical weekend/free day"@en)
SubDataPropertyOf(:hasAmountOfTimeSpentCookingDailyValue :hasFC1Value)

# Data Property: :hasAmountOfTimeSpentCookingOnFreeDaysValue (Time cooking meals during a working day)

AnnotationAssertion(rdfs:comment :hasAmountOfTimeSpentCookingOnFreeDaysValue "FC1_2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAmountOfTimeSpentCookingOnFreeDaysValue "Time cooking meals during a working day"@en)
SubDataPropertyOf(:hasAmountOfTimeSpentCookingOnFreeDaysValue :hasFC1Value)

# Data Property: :hasAmountOfWasteFoodPerWeekValue (Of all the food you buy in a week for your household, how much of it do you think goes to waste)

AnnotationAssertion(rdfs:comment :hasAmountOfWasteFoodPerWeekValue "1 → None
2 → <= 10%
3 → 11-20%
4 → 21-30%
5 → 31-40%
6 → 41-50%
7 → >50%"@en)
AnnotationAssertion(rdfs:comment :hasAmountOfWasteFoodPerWeekValue "FC6"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAmountOfWasteFoodPerWeekValue "Of all the food you buy in a week for your household, how much of it do you think goes to waste"@en)
SubDataPropertyOf(:hasAmountOfWasteFoodPerWeekValue :hasFCValue)
DataPropertyDomain(:hasAmountOfWasteFoodPerWeekValue :Person)
DataPropertyRange(:hasAmountOfWasteFoodPerWeekValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasAmountPaidInHotelFeesForLastYearValue (MB11)

AnnotationAssertion(rdfs:label :hasAmountPaidInHotelFeesForLastYearValue "MB11"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAmountPaidInHotelFeesForLastYearValue "When you travelled out of town for private reasons and you stayed in some form of paid accommodation, how much did you pay in total for your accommodation, only for yours, for the last year (2014)"@en)
SubDataPropertyOf(:hasAmountPaidInHotelFeesForLastYearValue :hasMBValue)
DataPropertyDomain(:hasAmountPaidInHotelFeesForLastYearValue :Accomodation)
DataPropertyDomain(:hasAmountPaidInHotelFeesForLastYearValue DataHasValue(:hasDate "2014"^^xsd:date))
DataPropertyRange(:hasAmountPaidInHotelFeesForLastYearValue xsd:decimal)

# Data Property: :hasAmountSpentOnClothingDuringLast3MonthsValue (What is the total sum that you spent on clothing, shoes and/or accessories during the last three months, on things you bought for yourself)

AnnotationAssertion(rdfs:comment :hasAmountSpentOnClothingDuringLast3MonthsValue "SB1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAmountSpentOnClothingDuringLast3MonthsValue "What is the total sum that you spent on clothing, shoes and/or accessories during the last three months, on things you bought for yourself"@en)
SubDataPropertyOf(:hasAmountSpentOnClothingDuringLast3MonthsValue :hasSBValue)
DataPropertyDomain(:hasAmountSpentOnClothingDuringLast3MonthsValue :ClothingOrShoesOrAccessories)
DataPropertyRange(:hasAmountSpentOnClothingDuringLast3MonthsValue xsd:nonNegativeInteger)

# Data Property: :hasAmountSpentOnElectricityDuringSummerValue (Summer bill amount)

AnnotationAssertion(rdfs:comment :hasAmountSpentOnElectricityDuringSummerValue "EU6_b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAmountSpentOnElectricityDuringSummerValue "Summer bill amount"@en)
SubDataPropertyOf(:hasAmountSpentOnElectricityDuringSummerValue :hasEU6Value)

# Data Property: :hasAmountSpentOnElectricityDuringWinterValue (Winter bill amount)

AnnotationAssertion(rdfs:comment :hasAmountSpentOnElectricityDuringWinterValue "EU6_a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAmountSpentOnElectricityDuringWinterValue "Winter bill amount"@en)
SubDataPropertyOf(:hasAmountSpentOnElectricityDuringWinterValue :hasEU6Value)

# Data Property: :hasAmountSpentPerWeekPerIndividualEatingOutValue (Eating out)

AnnotationAssertion(rdfs:comment :hasAmountSpentPerWeekPerIndividualEatingOutValue "FC2b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAmountSpentPerWeekPerIndividualEatingOutValue "Eating out"@en)
SubDataPropertyOf(:hasAmountSpentPerWeekPerIndividualEatingOutValue :hasFC2Value)

# Data Property: :hasAmountSpentPerWeekPerIndividualStorePurchasesValue (In store food purchases)

AnnotationAssertion(rdfs:comment :hasAmountSpentPerWeekPerIndividualStorePurchasesValue "FC2a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAmountSpentPerWeekPerIndividualStorePurchasesValue "In store food purchases"@en)
SubDataPropertyOf(:hasAmountSpentPerWeekPerIndividualStorePurchasesValue :hasFC2Value)

# Data Property: :hasAmountSpentPerWeekPerIndividualTakeAwayValue (Take away)

AnnotationAssertion(rdfs:comment :hasAmountSpentPerWeekPerIndividualTakeAwayValue "FC2c"^^xsd:string)
AnnotationAssertion(rdfs:label :hasAmountSpentPerWeekPerIndividualTakeAwayValue "Take away"@en)
SubDataPropertyOf(:hasAmountSpentPerWeekPerIndividualTakeAwayValue :hasFC2Value)

# Data Property: :hasBeenAbleToTakeLifeAtALeisurelyPaceValue (I have been able to take life at a leisurely pace)

AnnotationAssertion(rdfs:comment :hasBeenAbleToTakeLifeAtALeisurelyPaceValue "TA5"^^xsd:string)
AnnotationAssertion(rdfs:label :hasBeenAbleToTakeLifeAtALeisurelyPaceValue "I have been able to take life at a leisurely pace"@en)
SubDataPropertyOf(:hasBeenAbleToTakeLifeAtALeisurelyPaceValue :hasTAValue)

# Data Property: :hasBeenRacingFromHereToThereValue (I have been racing from here to there)

AnnotationAssertion(rdfs:label :hasBeenRacingFromHereToThereValue "I have been racing from here to there"@en)
SubDataPropertyOf(:hasBeenRacingFromHereToThereValue :hasTAValue)

# Data Property: :hasCL1Value (:hasCL1Value)

AnnotationAssertion(rdfs:comment :hasCL1Value "Ascending: 1 - Not at all → 7 - Very much"@en)
AnnotationAssertion(rdfs:comment :hasCL1Value "has desired lifestyle changes value"@en)
DataPropertyDomain(:hasCL1Value :LifeStyleChange)
DataPropertyRange(:hasCL1Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasCarFuelValue (Fuel type)

AnnotationAssertion(rdfs:comment :hasCarFuelValue "1 → Gasoline 
2 → Diesel  
3 → Gas (GPL/Methane)
4 → Hybrid 
5 → Electrical"@en)
AnnotationAssertion(rdfs:comment :hasCarFuelValue "MB4a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasCarFuelValue "Fuel type"@en)
SubDataPropertyOf(:hasCarFuelValue :hasMB4Value)
DataPropertyRange(:hasCarFuelValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "5"^^xsd:integer))

# Data Property: :hasCarTypeValue (Car type)

AnnotationAssertion(rdfs:comment :hasCarTypeValue "1 → Mini  
2 → Compact  
3 → Large/familiar/station wagon  
4 → SUV/4x4"@en)
AnnotationAssertion(rdfs:comment :hasCarTypeValue "MB4b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasCarTypeValue "Car type"@en)
SubDataPropertyOf(:hasCarTypeValue :hasMB4Value)
DataPropertyRange(:hasCarTypeValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "4"^^xsd:integer))

# Data Property: :hasCarUseLiterFuelPer100KMUnknown (Is how much fuel does your car use per 100 km use unknown)

AnnotationAssertion(rdfs:comment :hasCarUseLiterFuelPer100KMUnknown "MB4c"^^xsd:string)
AnnotationAssertion(rdfs:label :hasCarUseLiterFuelPer100KMUnknown "Is how much fuel does your car use per 100 km use unknown"@en)
SubDataPropertyOf(:hasCarUseLiterFuelPer100KMUnknown :hasMB4Value)
DataPropertyRange(:hasCarUseLiterFuelPer100KMUnknown xsd:boolean)

# Data Property: :hasCarUsesLitresFuelPer100KMValue (How much fuel does your car use per 100 km)

AnnotationAssertion(rdfs:comment :hasCarUsesLitresFuelPer100KMValue "MB4c"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasCarUsesLitresFuelPer100KMValue "MB4c_other"^^xsd:string)
AnnotationAssertion(rdfs:label :hasCarUsesLitresFuelPer100KMValue "How much fuel does your car use per 100 km"@en)
SubDataPropertyOf(:hasCarUsesLitresFuelPer100KMValue :hasMB4Value)
DataPropertyDomain(:hasCarUsesLitresFuelPer100KMValue ObjectComplementOf(DataHasValue(:hasCarUseLiterFuelPer100KMUnknown "true"^^xsd:boolean)))
DataPropertyRange(:hasCarUsesLitresFuelPer100KMValue xsd:decimal)

# Data Property: :hasChanceValueForFindingReligiousOrSpiritualBeliefsAreGrowthProducing (Chances of: I will find religious and/or spiritual beliefs that are growth-producing)

AnnotationAssertion(rdfs:comment :hasChanceValueForFindingReligiousOrSpiritualBeliefsAreGrowthProducing "AS3b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChanceValueForFindingReligiousOrSpiritualBeliefsAreGrowthProducing "Chances of: I will find religious and/or spiritual beliefs that are growth-producing"@en)
SubDataPropertyOf(:hasChanceValueForFindingReligiousOrSpiritualBeliefsAreGrowthProducing :hasAS3Value)

# Data Property: :hasChanceValueOfExperiencingAGreatDealOfSensualPleasure (Chances of: I will experience a great deal of sensual pleasure)

AnnotationAssertion(rdfs:comment :hasChanceValueOfExperiencingAGreatDealOfSensualPleasure "AH3b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChanceValueOfExperiencingAGreatDealOfSensualPleasure "Chances of: I will experience a great deal of sensual pleasure"@en)
SubDataPropertyOf(:hasChanceValueOfExperiencingAGreatDealOfSensualPleasure :hasAH3Value)

# Data Property: :hasChanceValueOfFeelingFree (Chances of: I will feel free)

AnnotationAssertion(rdfs:comment :hasChanceValueOfFeelingFree "ASA3b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChanceValueOfFeelingFree "Chances of: I will feel free"@en)
SubDataPropertyOf(:hasChanceValueOfFeelingFree :hasASA3Value)

# Data Property: :hasChanceValueOfSomeoneAcceptingMeNoMatterWhat (Chances of: Someone in my life will accept me as I am, no matter what)

AnnotationAssertion(rdfs:comment :hasChanceValueOfSomeoneAcceptingMeNoMatterWhat "AA3b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChanceValueOfSomeoneAcceptingMeNoMatterWhat "Chances of: Someone in my life will accept me as I am, no matter what"@en)
SubDataPropertyOf(:hasChanceValueOfSomeoneAcceptingMeNoMatterWhat :hasAA3Value)

# Data Property: :hasChancesValueAboutDealingWithProblemsInMyLife (Chances of:  I will deal effectively with problems in my life)

AnnotationAssertion(rdfs:comment :hasChancesValueAboutDealingWithProblemsInMyLife "ASA4b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueAboutDealingWithProblemsInMyLife "Chances of:  I will deal effectively with problems in my life"@en)
SubDataPropertyOf(:hasChancesValueAboutDealingWithProblemsInMyLife :hasASA4Value)

# Data Property: :hasChancesValueAboutFeellingGoodAboutOwnAbilities (Chances of: I will feel good about my abilities)

AnnotationAssertion(rdfs:comment :hasChancesValueAboutFeellingGoodAboutOwnAbilities "ASA5b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueAboutFeellingGoodAboutOwnAbilities "Chances of: I will feel good about my abilities"@en)
SubDataPropertyOf(:hasChancesValueAboutFeellingGoodAboutOwnAbilities :hasASA5Value)

# Data Property: :hasChancesValueForBeingAbleToExpressLoveForSpecialPeople (Chances of: I will express my love for special people)

AnnotationAssertion(rdfs:comment :hasChancesValueForBeingAbleToExpressLoveForSpecialPeople "AA4b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueForBeingAbleToExpressLoveForSpecialPeople "Chances of: I will express my love for special people"@en)
SubDataPropertyOf(:hasChancesValueForBeingAbleToExpressLoveForSpecialPeople :hasAA4Value)

# Data Property: :hasChancesValueForHavingACommittedIntimateRelationship (Chances of: I will have a committed, intimate relationship)

AnnotationAssertion(rdfs:comment :hasChancesValueForHavingACommittedIntimateRelationship "AA5b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueForHavingACommittedIntimateRelationship "Chances of: I will have a committed, intimate relationship"@en)
SubDataPropertyOf(:hasChancesValueForHavingACommittedIntimateRelationship :hasAA5Value)

# Data Property: :hasChancesValueForInsightIntoWhatIDo (Chances of: I will have insight into why I do the things I do)

AnnotationAssertion(rdfs:comment :hasChancesValueForInsightIntoWhatIDo "ASA7b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueForInsightIntoWhatIDo "Chances of: I will have insight into why I do the things I do"@en)
SubDataPropertyOf(:hasChancesValueForInsightIntoWhatIDo :hasASA7Value)

# Data Property: :hasChancesValueForLivingLifeAccordingToSpiritualOrReligiousBeliefs (Chances of: My life and actions will be in agreement with my religious/spiritual beliefs)

AnnotationAssertion(rdfs:comment :hasChancesValueForLivingLifeAccordingToSpiritualOrReligiousBeliefs "AS4b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueForLivingLifeAccordingToSpiritualOrReligiousBeliefs "Chances of: My life and actions will be in agreement with my religious/spiritual beliefs"@en)
SubDataPropertyOf(:hasChancesValueForLivingLifeAccordingToSpiritualOrReligiousBeliefs :hasAS4Value)

# Data Property: :hasChancesValueForMakingTheWorldABetterPlace (Chances of: I will help the world become a better place)

AnnotationAssertion(rdfs:comment :hasChancesValueForMakingTheWorldABetterPlace "AC3b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueForMakingTheWorldABetterPlace "Chances of: I will help the world become a better place"@en)
SubDataPropertyOf(:hasChancesValueForMakingTheWorldABetterPlace :hasAC3Value)

# Data Property: :hasChancesValueOfAssistingPeopleWithNoReward (Chances of: I will assist people who need it, asking nothing in return)

AnnotationAssertion(rdfs:comment :hasChancesValueOfAssistingPeopleWithNoReward "AC1b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueOfAssistingPeopleWithNoReward "Chances of: I will assist people who need it, asking nothing in return"@en)
SubDataPropertyOf(:hasChancesValueOfAssistingPeopleWithNoReward :hasAC1Value)

# Data Property: :hasChancesValueOfBeingAdmiredByManyPeople (Chances of: I will be admired by many people)

AnnotationAssertion(rdfs:comment :hasChancesValueOfBeingAdmiredByManyPeople "AP1b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueOfBeingAdmiredByManyPeople "Chances of: I will be admired by many people"@en)
SubDataPropertyOf(:hasChancesValueOfBeingAdmiredByManyPeople :hasAP1Value)

# Data Property: :hasChancesValueOfBeingEfficient (Chances of:  I will be efficient)

AnnotationAssertion(rdfs:comment :hasChancesValueOfBeingEfficient "ASA1b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueOfBeingEfficient "Chances of:  I will be efficient"@en)
SubDataPropertyOf(:hasChancesValueOfBeingEfficient :hasASA1Value)

# Data Property: :hasChancesValueOfBeingFamous (Chances of: My name will be known by many different people)

AnnotationAssertion(rdfs:comment :hasChancesValueOfBeingFamous "AP2b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueOfBeingFamous "Chances of: My name will be known by many different people"@en)
SubDataPropertyOf(:hasChancesValueOfBeingFamous :hasAP2Value)

# Data Property: :hasChancesValueOfFeelingThatThereAreOthersWhoLoveMe (Chances of: I will feel that there are people who really love me)

AnnotationAssertion(rdfs:comment :hasChancesValueOfFeelingThatThereAreOthersWhoLoveMe "AA2b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueOfFeelingThatThereAreOthersWhoLoveMe "Chances of: I will feel that there are people who really love me"@en)
SubDataPropertyOf(:hasChancesValueOfFeelingThatThereAreOthersWhoLoveMe :hasAA2Value)

# Data Property: :hasChancesValueOfFindReligiousOrSpiritualBeliefsThatMakeSenseOfLife (Chances of: I will find religious or spiritual beliefs that help me make sense of the world)

AnnotationAssertion(rdfs:comment :hasChancesValueOfFindReligiousOrSpiritualBeliefsThatMakeSenseOfLife "AS2b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueOfFindReligiousOrSpiritualBeliefsThatMakeSenseOfLife "Chances of: I will find religious or spiritual beliefs that help me make sense of the world"@en)
SubDataPropertyOf(:hasChancesValueOfFindReligiousOrSpiritualBeliefsThatMakeSenseOfLife :hasAS2Value)

# Data Property: :hasChancesValueOfFindingSatisfyingRelegiousOrSpritualActivities (Chances of: I will find satisfying religious and/or spiritual activities)

AnnotationAssertion(rdfs:comment :hasChancesValueOfFindingSatisfyingRelegiousOrSpritualActivities "AS1b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueOfFindingSatisfyingRelegiousOrSpritualActivities "Chances of: I will find satisfying religious and/or spiritual activities"@en)
SubDataPropertyOf(:hasChancesValueOfFindingSatisfyingRelegiousOrSpritualActivities :hasAS1Value)

# Data Property: :hasChancesValueOfHavingAGreatSexLife (Chances of: I will have a great sex life)

AnnotationAssertion(rdfs:comment :hasChancesValueOfHavingAGreatSexLife "AH1b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueOfHavingAGreatSexLife "Chances of: I will have a great sex life"@en)
SubDataPropertyOf(:hasChancesValueOfHavingAGreatSexLife :hasAH1value)

# Data Property: :hasChancesValueOfHavingAJobThatPaysWell (Chances of: I will have a job that pays well)

AnnotationAssertion(rdfs:comment :hasChancesValueOfHavingAJobThatPaysWell "AM4b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueOfHavingAJobThatPaysWell "Chances of: I will have a job that pays well"@en)
SubDataPropertyOf(:hasChancesValueOfHavingAJobThatPaysWell :hasAM4Value)

# Data Property: :hasChancesValueOfHavingALotOfExcitementInMyLife (Chances of: I will have a lot of excitement in my life)

AnnotationAssertion(rdfs:comment :hasChancesValueOfHavingALotOfExcitementInMyLife "AH2b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueOfHavingALotOfExcitementInMyLife "Chances of: I will have a lot of excitement in my life"@en)
SubDataPropertyOf(:hasChancesValueOfHavingALotOfExcitementInMyLife :hasAH2Value)

# Data Property: :hasChancesValueOfHavingEnoughMoneyToBuyWhatIWant (Chances of: I will have enough money to buy everything I want)

AnnotationAssertion(rdfs:comment :hasChancesValueOfHavingEnoughMoneyToBuyWhatIWant "AM3b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueOfHavingEnoughMoneyToBuyWhatIWant "Chances of: I will have enough money to buy everything I want"@en)
SubDataPropertyOf(:hasChancesValueOfHavingEnoughMoneyToBuyWhatIWant :hasAM3Value)

# Data Property: :hasChancesValueOfHavingManyExpensivePossessions (Chances of: I will have many expensive possessions)

AnnotationAssertion(rdfs:comment :hasChancesValueOfHavingManyExpensivePossessions "AM1a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueOfHavingManyExpensivePossessions "Chances of: I will have many expensive possessions"@en)
SubDataPropertyOf(:hasChancesValueOfHavingManyExpensivePossessions :hasAM1Value)

# Data Property: :hasChancesValueOfHavingMutualAffection (Chances of: People will show affection to me, and I will to them)

AnnotationAssertion(rdfs:comment :hasChancesValueOfHavingMutualAffection "AA1b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueOfHavingMutualAffection "Chances of: People will show affection to me, and I will to them"@en)
SubDataPropertyOf(:hasChancesValueOfHavingMutualAffection :hasAA1Value)

# Data Property: :hasChancesValueOfMakingPeoplesLivesBetter (Chances of: The things I do will make other people's lives better)

AnnotationAssertion(rdfs:comment :hasChancesValueOfMakingPeoplesLivesBetter "AC2b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValueOfMakingPeoplesLivesBetter "Chances of: The things I do will make other people's lives better"@en)
SubDataPropertyOf(:hasChancesValueOfMakingPeoplesLivesBetter :hasAC2Value)

# Data Property: :hasChancesValuesForChoosingWhatIDoInsteadOfBeingPushed (Chances of: I will choose what I do, instead of being pushed along by life)

AnnotationAssertion(rdfs:comment :hasChancesValuesForChoosingWhatIDoInsteadOfBeingPushed "ASA2b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValuesForChoosingWhatIDoInsteadOfBeingPushed "Chances of: I will choose what I do, instead of being pushed along by life"@en)
SubDataPropertyOf(:hasChancesValuesForChoosingWhatIDoInsteadOfBeingPushed :hasASA2Value)

# Data Property: :hasChancesValuesOfEverybodyKnowingMeLikingMe (Chances of: Most everyone who knows me will like me)

AnnotationAssertion(rdfs:comment :hasChancesValuesOfEverybodyKnowingMeLikingMe "AP3b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasChancesValuesOfEverybodyKnowingMeLikingMe "Chances of: Most everyone who knows me will like me"@en)
SubDataPropertyOf(:hasChancesValuesOfEverybodyKnowingMeLikingMe :hasAP3Value)

# Data Property: :hasCloseToIdealLifeValue (In most ways my life is close to my ideal)

AnnotationAssertion(rdfs:comment :hasCloseToIdealLifeValue "WB1a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasCloseToIdealLifeValue "In most ways my life is close to my ideal"@en)
SubDataPropertyOf(:hasCloseToIdealLifeValue :hasWB1Value)

# Data Property: :hasCommunityGardenValue (Are you involved in any community gardening or do you take care of an allotted garden)

AnnotationAssertion(rdfs:comment :hasCommunityGardenValue "1 → Yes
2 → No"@en)
AnnotationAssertion(rdfs:comment :hasCommunityGardenValue "EU4c"^^xsd:string)
AnnotationAssertion(rdfs:label :hasCommunityGardenValue "Are you involved in any community gardening or do you take care of an allotted garden"@en)
SubDataPropertyOf(:hasCommunityGardenValue :hasEU4Value)
DataPropertyDomain(:hasCommunityGardenValue DataHasValue(:ownsAGardenValue "false"^^xsd:boolean))
DataPropertyRange(:hasCommunityGardenValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "2"^^xsd:integer))

# Data Property: :hasCurrentEmploymentStatus (Please, indicate your current employment status)

AnnotationAssertion(rdfs:comment :hasCurrentEmploymentStatus "1 → Employed full-time     
2 → Employed part-time    
3 → Entrepreneur without staff / self employed 
4 → Entrepreneur with staff
5 → Worker in Education (including apprenticeship)
6 → Occasional temporary contracts 
7 → Housework/housewife 
8 → Maternity leave or other kinds of leaves
9 → Student
10 → Retired
11 → Job seeker
12 → Unemployed"@en)
AnnotationAssertion(rdfs:comment :hasCurrentEmploymentStatus "WL1a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasCurrentEmploymentStatus "Please, indicate your current employment status"@en)
SubDataPropertyOf(:hasCurrentEmploymentStatus :hasWL1value)
SubDataPropertyOf(:hasCurrentEmploymentStatus :hasWLValue)
DataPropertyDomain(:hasCurrentEmploymentStatus :Person)
DataPropertyRange(:hasCurrentEmploymentStatus DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "12"^^xsd:integer))

# Data Property: :hasCurrentJobWorkingFlexibilityValue (In your current job, how much flexibility is there in your working arrangements)

AnnotationAssertion(rdfs:comment :hasCurrentJobWorkingFlexibilityValue "Ascending: 1 - No flexibility at all  → 7 - A lot of flexibility"@en)
AnnotationAssertion(rdfs:comment :hasCurrentJobWorkingFlexibilityValue "WL1c"^^xsd:string)
AnnotationAssertion(rdfs:label :hasCurrentJobWorkingFlexibilityValue "In your current job, how much flexibility is there in your working arrangements"@en)
SubDataPropertyOf(:hasCurrentJobWorkingFlexibilityValue :hasWL1value)
DataPropertyDomain(:hasCurrentJobWorkingFlexibilityValue ObjectUnionOf(:EmployedFullTime :EmployedPartTime :EntrepreneurWithStaff :EntrepreneurWithoutStaff :OccasionalTemporaryContracts :WorkedInEducation))
DataPropertyRange(:hasCurrentJobWorkingFlexibilityValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasDate (:hasDate)

DataPropertyRange(:hasDate xsd:date)

# Data Property: :hasDateWhenDwellingBuiltValue (Date when dwelling built)

AnnotationAssertion(rdfs:comment :hasDateWhenDwellingBuiltValue "EU3_other"^^xsd:string)
AnnotationAssertion(rdfs:label :hasDateWhenDwellingBuiltValue "Date when dwelling built"@en)
SubDataPropertyOf(:hasDateWhenDwellingBuiltValue :hasEU3Value)
DataPropertyDomain(:hasDateWhenDwellingBuiltValue ObjectComplementOf(DataHasValue(:hasAgeOfDwellingUnknown "true"^^xsd:boolean)))
DataPropertyRange(:hasDateWhenDwellingBuiltValue DatatypeRestriction(xsd:positiveInteger xsd:minExclusive "1000"^^xsd:positiveInteger xsd:maxInclusive "2500"^^xsd:positiveInteger))

# Data Property: :hasDistance (:hasDistance)

DataPropertyRange(:hasDistance xsd:decimal)

# Data Property: :hasDistrictHeating (District heating)

AnnotationAssertion(rdfs:comment :hasDistrictHeating "EU7Home_k"^^xsd:string)
AnnotationAssertion(rdfs:label :hasDistrictHeating "District heating"@en)
SubDataPropertyOf(:hasDistrictHeating :hasEU7Value)
DataPropertyDomain(:hasDistrictHeating DataHasValue(:doesNotHeatHome "false"^^xsd:boolean))
DataPropertyDomain(:hasDistrictHeating DataHasValue(:doesNotKnowHowHouseIsHeated "false"^^xsd:boolean))

# Data Property: :hasDistrictWaterHeating (District water heating)

AnnotationAssertion(rdfs:comment :hasDistrictWaterHeating "EU7Home_l"^^xsd:string)
AnnotationAssertion(rdfs:label :hasDistrictWaterHeating "District water heating"@en)
SubDataPropertyOf(:hasDistrictWaterHeating :hasEU7Value)
DataPropertyDomain(:hasDistrictWaterHeating DataHasValue(:doesNotHeatWater "false"^^xsd:boolean))
DataPropertyDomain(:hasDistrictWaterHeating DataHasValue(:doesNotKnowHowWaterIsHeated "false"^^xsd:boolean))

# Data Property: :hasDonatesClothersToOthersValue (Give/donate clothes to others (incl.: charity and second-hand shops))

AnnotationAssertion(rdfs:comment :hasDonatesClothersToOthersValue "SB2b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasDonatesClothersToOthersValue "Give/donate clothes to others (incl.: charity and second-hand shops)"@en)
SubDataPropertyOf(:hasDonatesClothersToOthersValue :hasSB2Value)
DataPropertyDomain(:hasDonatesClothersToOthersValue ObjectSomeValuesFrom(:donates ObjectSomeValuesFrom(:givenTo ObjectUnionOf(:Charity :SecondHandShop))))

# Data Property: :hasDuringColdSeasonHowIsHomeHeated (During cold season, how do you usually heat your home)

AnnotationAssertion(rdfs:comment :hasDuringColdSeasonHowIsHomeHeated "1 → The whole home
2 → On the used rooms"@en)
AnnotationAssertion(rdfs:comment :hasDuringColdSeasonHowIsHomeHeated "EU9b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasDuringColdSeasonHowIsHomeHeated "During cold season, how do you usually heat your home"@en)
SubDataPropertyOf(:hasDuringColdSeasonHowIsHomeHeated :hasEU9Value)
DataPropertyRange(:hasDuringColdSeasonHowIsHomeHeated DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "2"^^xsd:integer))

# Data Property: :hasEU1Value (What is the size of your current residence)

AnnotationAssertion(rdfs:comment :hasEU1Value "EU1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasEU1Value "What is the size of your current residence"@en)
SubDataPropertyOf(:hasEU1Value :hasEUValue)
DataPropertyDomain(:hasEU1Value :Household)
DataPropertyRange(:hasEU1Value xsd:nonNegativeInteger)

# Data Property: :hasEU3Value (How old is the building in which your home is located)

AnnotationAssertion(rdfs:comment :hasEU3Value "EU3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasEU3Value "How old is the building in which your home is located"@en)
SubDataPropertyOf(:hasEU3Value :hasEUValue)
DataPropertyDomain(:hasEU3Value :Household)

# Data Property: :hasEU4Value (Gardening)

AnnotationAssertion(rdfs:comment :hasEU4Value "EU4"^^xsd:string)
AnnotationAssertion(rdfs:label :hasEU4Value "Gardening"@en)
SubDataPropertyOf(:hasEU4Value :hasEUValue)

# Data Property: :hasEU6Value (How much do you pay per month on electricity, on average in your household, during the following seasons)

AnnotationAssertion(rdfs:comment :hasEU6Value "EU6"^^xsd:string)
AnnotationAssertion(rdfs:label :hasEU6Value "How much do you pay per month on electricity, on average in your household, during the following seasons"@en)
SubDataPropertyOf(:hasEU6Value :hasEUValue)
DataPropertyDomain(:hasEU6Value :ElectricityBill)
DataPropertyRange(:hasEU6Value xsd:nonNegativeInteger)

# Data Property: :hasEU7Value (How do you primarily heat your home and water in your home)

AnnotationAssertion(rdfs:comment :hasEU7Value "EU7"^^xsd:string)
AnnotationAssertion(rdfs:label :hasEU7Value "How do you primarily heat your home and water in your home"@en)
SubDataPropertyOf(:hasEU7Value :hasEUValue)
DataPropertyDomain(:hasEU7Value :Household)
DataPropertyRange(:hasEU7Value xsd:boolean)

# Data Property: :hasEU8Value (Home electricity generation value)

AnnotationAssertion(rdfs:label :hasEU8Value "Home electricity generation value"@en)
SubDataPropertyOf(:hasEU8Value :hasEUValue)

# Data Property: :hasEU9Value (Heating the home)

AnnotationAssertion(rdfs:comment :hasEU9Value "EU9"^^xsd:string)
AnnotationAssertion(rdfs:label :hasEU9Value "Heating the home"@en)
SubDataPropertyOf(:hasEU9Value :hasEUValue)
DataPropertyDomain(:hasEU9Value :Household)

# Data Property: :hasEUValue (:hasEUValue)

AnnotationAssertion(rdfs:comment :hasEUValue "DONE"@en)
AnnotationAssertion(rdfs:comment :hasEUValue "has energy use value"@en)

# Data Property: :hasEaseOfDoingClimateChangeReductionActivitiesValue (For me it is easy to do things that would contribute to climate change reduction)

AnnotationAssertion(rdfs:comment :hasEaseOfDoingClimateChangeReductionActivitiesValue "SE3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasEaseOfDoingClimateChangeReductionActivitiesValue "For me it is easy to do things that would contribute to climate change reduction"@en)
SubDataPropertyOf(:hasEaseOfDoingClimateChangeReductionActivitiesValue :hasSEValue)

# Data Property: :hasElectricUnderfloorHeating (Electricity: underfloor heating, accumulators, convectors for heating)

AnnotationAssertion(rdfs:comment :hasElectricUnderfloorHeating "EU7Home_m"^^xsd:string)
AnnotationAssertion(rdfs:label :hasElectricUnderfloorHeating "Electricity: underfloor heating, accumulators, convectors for heating"@en)
SubDataPropertyOf(:hasElectricUnderfloorHeating :hasEU7Value)
DataPropertyDomain(:hasElectricUnderfloorHeating DataHasValue(:doesNotHeatHome "false"^^xsd:boolean))
DataPropertyDomain(:hasElectricUnderfloorHeating DataHasValue(:doesNotKnowHowHouseIsHeated "false"^^xsd:boolean))

# Data Property: :hasElectricWaterHeating (Electricity: water heating)

AnnotationAssertion(rdfs:comment :hasElectricWaterHeating "EU7Home_n"^^xsd:string)
AnnotationAssertion(rdfs:label :hasElectricWaterHeating "Electricity: water heating"@en)
SubDataPropertyOf(:hasElectricWaterHeating :hasEU7Value)
DataPropertyDomain(:hasElectricWaterHeating DataHasValue(:doesNotHeatWater "false"^^xsd:boolean))
DataPropertyDomain(:hasElectricWaterHeating DataHasValue(:doesNotKnowHowWaterIsHeated "false"^^xsd:boolean))

# Data Property: :hasElectricalOrGasHotWaterTank (Electric/gas hot water tank)

AnnotationAssertion(rdfs:comment :hasElectricalOrGasHotWaterTank "EU7Home_j"^^xsd:string)
AnnotationAssertion(rdfs:label :hasElectricalOrGasHotWaterTank "Electric/gas hot water tank"@en)
SubDataPropertyOf(:hasElectricalOrGasHotWaterTank :hasEU7Value)
DataPropertyDomain(:hasElectricalOrGasHotWaterTank DataHasValue(:doesNotHeatWater "false"^^xsd:boolean))
DataPropertyDomain(:hasElectricalOrGasHotWaterTank DataHasValue(:doesNotKnowHowWaterIsHeated "false"^^xsd:boolean))

# Data Property: :hasElectricalOrGasPumpHeating (Eclectric/gas heat pump heating)

AnnotationAssertion(rdfs:comment :hasElectricalOrGasPumpHeating "EU7Home_i"^^xsd:string)
AnnotationAssertion(rdfs:label :hasElectricalOrGasPumpHeating "Eclectric/gas heat pump heating"@en)
SubDataPropertyOf(:hasElectricalOrGasPumpHeating :hasEU7Value)
DataPropertyDomain(:hasElectricalOrGasPumpHeating DataHasValue(:doesNotHeatHome "false"^^xsd:boolean))
DataPropertyDomain(:hasElectricalOrGasPumpHeating DataHasValue(:doesNotKnowHowHouseIsHeated "false"^^xsd:boolean))

# Data Property: :hasExcellentConditionsToLifeValue (The conditions of my life are excellent)

AnnotationAssertion(rdfs:comment :hasExcellentConditionsToLifeValue "WB1b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasExcellentConditionsToLifeValue "The conditions of my life are excellent"@en)
SubDataPropertyOf(:hasExcellentConditionsToLifeValue :hasWB1Value)

# Data Property: :hasFC1Value (On average, how much time do you spend cooking/fixing a meal)

AnnotationAssertion(rdfs:comment :hasFC1Value "FC1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasFC1Value "On average, how much time do you spend cooking/fixing a meal"@en)
SubDataPropertyOf(:hasFC1Value :hasFCValue)
DataPropertyDomain(:hasFC1Value :Person)
DataPropertyRange(:hasFC1Value xsd:decimal)

# Data Property: :hasFC2Value (Of the budget you spend on food during a week, please indicate how much you spend on food purchases in stores (supermarket, local market, neighborhood stores etc.), on eating out, and on take away, respectively (please, provide approximate or average quantities). Please, answer thinking only your own expense (if you know the total cost of your home, please divide the total by the number of people living in your home))

AnnotationAssertion(rdfs:comment :hasFC2Value "FC2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasFC2Value "Of the budget you spend on food during a week, please indicate how much you spend on food purchases in stores (supermarket, local market, neighborhood stores etc.), on eating out, and on take away, respectively (please, provide approximate or average quantities). Please, answer thinking only your own expense (if you know the total cost of your home, please divide the total by the number of people living in your home)"@en)
SubDataPropertyOf(:hasFC2Value :hasFCValue)
DataPropertyDomain(:hasFC2Value :Person)
DataPropertyRange(:hasFC2Value xsd:nonNegativeInteger)

# Data Property: :hasFC3Value (How often do you consume the following products on average)

AnnotationAssertion(rdfs:comment :hasFC3Value "1 → Never 
2 → 1 day a week 
3 → 2 days a week
4 → 3 days a week
5 → 4 days a week
6 → 5 days a week
7 → 6 or 7 days a week"@en)
AnnotationAssertion(rdfs:comment :hasFC3Value "FC3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasFC3Value "How often do you consume the following products on average"@en)
SubDataPropertyOf(:hasFC3Value :hasFCValue)
DataPropertyRange(:hasFC3Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasFC4Value (How often do you buy the following types of food products)

AnnotationAssertion(rdfs:comment :hasFC4Value "Ascending: 1 - Never → 7 - Always"@en)
AnnotationAssertion(rdfs:comment :hasFC4Value "FC4"^^xsd:string)
AnnotationAssertion(rdfs:label :hasFC4Value "How often do you buy the following types of food products"@en)
SubDataPropertyOf(:hasFC4Value :hasFCValue)
DataPropertyDomain(:hasFC4Value :Person)
DataPropertyRange(:hasFC4Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasFC5Value (How often do you do the following things in your daily life)

AnnotationAssertion(rdfs:comment :hasFC5Value "Ascending: 1 - Never → 7 - Always"@en)
AnnotationAssertion(rdfs:comment :hasFC5Value "FC5"^^xsd:string)
AnnotationAssertion(rdfs:label :hasFC5Value "How often do you do the following things in your daily life"@en)
SubDataPropertyOf(:hasFC5Value :hasFCValue)
DataPropertyDomain(:hasFC5Value :Person)
DataPropertyRange(:hasFC5Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasFCValue (:hasFCValue)

AnnotationAssertion(rdfs:comment :hasFCValue "Done"@en)
AnnotationAssertion(rdfs:comment :hasFCValue "has food and  consumption value"@en)

# Data Property: :hasFeelingOfEnvironmentalImpotenceValue (Even if I try to do something about climate change, I doubt it will make any difference)

AnnotationAssertion(rdfs:comment :hasFeelingOfEnvironmentalImpotenceValue "SE2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasFeelingOfEnvironmentalImpotenceValue "Even if I try to do something about climate change, I doubt it will make any difference"@en)
SubDataPropertyOf(:hasFeelingOfEnvironmentalImpotenceValue :hasSEValue)

# Data Property: :hasFeltThatThingsHaveBeenReallyHecticValue (I have felt like things have been really hectic)

AnnotationAssertion(rdfs:comment :hasFeltThatThingsHaveBeenReallyHecticValue "TA8"^^xsd:string)
AnnotationAssertion(rdfs:label :hasFeltThatThingsHaveBeenReallyHecticValue "I have felt like things have been really hectic"@en)
SubDataPropertyOf(:hasFeltThatThingsHaveBeenReallyHecticValue :hasTAValue)

# Data Property: :hasFrequencyOfTakingPublicTransportForPrivateTravelValue (When you travel for private reasons and need to make a trip of less than 5 kilometers, how often do you use public transportation, a bicycle, or walk rather than drive by car)

AnnotationAssertion(rdfs:comment :hasFrequencyOfTakingPublicTransportForPrivateTravelValue "Ascending: 1 - Never → 7 - Always"@en)
AnnotationAssertion(rdfs:comment :hasFrequencyOfTakingPublicTransportForPrivateTravelValue "MB7"^^xsd:string)
AnnotationAssertion(rdfs:label :hasFrequencyOfTakingPublicTransportForPrivateTravelValue "When you travel for private reasons and need to make a trip of less than 5 kilometers, how often do you use public transportation, a bicycle, or walk rather than drive by car"@en)
SubDataPropertyOf(:hasFrequencyOfTakingPublicTransportForPrivateTravelValue :hasMBValue)
DataPropertyDomain(:hasFrequencyOfTakingPublicTransportForPrivateTravelValue ObjectIntersectionOf(ObjectSomeValuesFrom(:uses ObjectUnionOf(:Bicycle :PublicTransport :Walking)) DataSomeValuesFrom(:hasDistance DatatypeRestriction(owl:real xsd:maxInclusive "5.0"^^owl:real))))
DataPropertyRange(:hasFrequencyOfTakingPublicTransportForPrivateTravelValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasFrequencyOfUsingCarPoolForWorkValue (Carpool for travelling to work)

AnnotationAssertion(rdfs:comment :hasFrequencyOfUsingCarPoolForWorkValue "MB6a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasFrequencyOfUsingCarPoolForWorkValue "Carpool for travelling to work"@en)
SubDataPropertyOf(:hasFrequencyOfUsingCarPoolForWorkValue :hasMB6Value)

# Data Property: :hasFrequencyOfUsingCarpoolForPrivateReasons (Carpool for travelling for private reasons)

AnnotationAssertion(rdfs:comment :hasFrequencyOfUsingCarpoolForPrivateReasons "MB6b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasFrequencyOfUsingCarpoolForPrivateReasons "Carpool for travelling for private reasons"@en)
SubDataPropertyOf(:hasFrequencyOfUsingCarpoolForPrivateReasons :hasMB6Value)

# Data Property: :hasFrequencyOfUsingFoodDirectlyFromProducerValue (Directly from producers)

AnnotationAssertion(rdfs:comment :hasFrequencyOfUsingFoodDirectlyFromProducerValue "FC4d"^^xsd:string)
AnnotationAssertion(rdfs:label :hasFrequencyOfUsingFoodDirectlyFromProducerValue "Directly from producers"@en)
SubDataPropertyOf(:hasFrequencyOfUsingFoodDirectlyFromProducerValue :hasFC4Value)
DataPropertyDomain(:hasFrequencyOfUsingFoodDirectlyFromProducerValue :FoodDirectlyFromProducer)

# Data Property: :hasFrequencyOfUsingFoodWithLessPackagingValue (Food with less plastic packaging)

AnnotationAssertion(rdfs:comment :hasFrequencyOfUsingFoodWithLessPackagingValue "FC4e"^^xsd:string)
AnnotationAssertion(rdfs:label :hasFrequencyOfUsingFoodWithLessPackagingValue "Food with less plastic packaging"@en)
SubDataPropertyOf(:hasFrequencyOfUsingFoodWithLessPackagingValue :hasFC4Value)
DataPropertyDomain(:hasFrequencyOfUsingFoodWithLessPackagingValue :WithLessPlasticPackaging)

# Data Property: :hasFrequencyOfUsingLabelledOrganicFoodValue (Labeled organic/ecological food)

AnnotationAssertion(rdfs:comment :hasFrequencyOfUsingLabelledOrganicFoodValue "FC4c"^^xsd:string)
AnnotationAssertion(rdfs:label :hasFrequencyOfUsingLabelledOrganicFoodValue "Labeled organic/ecological food"@en)
SubDataPropertyOf(:hasFrequencyOfUsingLabelledOrganicFoodValue :hasFC4Value)
DataPropertyDomain(:hasFrequencyOfUsingLabelledOrganicFoodValue :LabelledOrganicOrEcological)

# Data Property: :hasFrequencyOfUsingRegionalOrLocalFoodValue (Regional or local products)

AnnotationAssertion(rdfs:comment :hasFrequencyOfUsingRegionalOrLocalFoodValue "FC4a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasFrequencyOfUsingRegionalOrLocalFoodValue "Regional or local products"@en)
SubDataPropertyOf(:hasFrequencyOfUsingRegionalOrLocalFoodValue :hasFC4Value)
DataPropertyDomain(:hasFrequencyOfUsingRegionalOrLocalFoodValue :RegionalOrLocalProducts)

# Data Property: :hasFrequencyOfUsingSeasonalFoodValue (Seasonal products)

AnnotationAssertion(rdfs:comment :hasFrequencyOfUsingSeasonalFoodValue "FC4b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasFrequencyOfUsingSeasonalFoodValue "Seasonal products"@en)
SubDataPropertyOf(:hasFrequencyOfUsingSeasonalFoodValue :hasFC4Value)
DataPropertyDomain(:hasFrequencyOfUsingSeasonalFoodValue :Seasonal)

# Data Property: :hasGasHeating (Gas (natural gas, central heating oil, propane) for heating)

AnnotationAssertion(rdfs:comment :hasGasHeating "EU7Home_c"^^xsd:string)
AnnotationAssertion(rdfs:label :hasGasHeating "Gas (natural gas, central heating oil, propane) for heating"@en)
SubDataPropertyOf(:hasGasHeating :hasEU7Value)
DataPropertyDomain(:hasGasHeating DataHasValue(:doesNotHeatHome "false"^^xsd:boolean))
DataPropertyDomain(:hasGasHeating DataHasValue(:doesNotKnowHowHouseIsHeated "false"^^xsd:boolean))

# Data Property: :hasGasHotWaterHeating (Gas (natural gas, central heating oil, propane) for water heating)

AnnotationAssertion(rdfs:comment :hasGasHotWaterHeating "EU7Home_d"^^xsd:string)
AnnotationAssertion(rdfs:label :hasGasHotWaterHeating "Gas (natural gas, central heating oil, propane) for water heating"@en)
SubDataPropertyOf(:hasGasHotWaterHeating :hasEU7Value)
DataPropertyDomain(:hasGasHotWaterHeating DataHasValue(:doesNotHeatWater "false"^^xsd:boolean))
DataPropertyDomain(:hasGasHotWaterHeating DataHasValue(:doesNotKnowHowWaterIsHeated "false"^^xsd:boolean))

# Data Property: :hasGenderValue (What is your gender)

AnnotationAssertion(rdfs:comment :hasGenderValue "1 → Male
2 → Female"@en)
AnnotationAssertion(rdfs:comment :hasGenderValue "SD1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasGenderValue "What is your gender"@en)
SubDataPropertyOf(:hasGenderValue :hasSDValue)
DataPropertyDomain(:hasGenderValue :Person)
DataPropertyRange(:hasGenderValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "2"^^xsd:integer))

# Data Property: :hasGottenAllImportantThingsInLifeValue (So far I have gotten the important things I want in life)

AnnotationAssertion(rdfs:comment :hasGottenAllImportantThingsInLifeValue "WB5d"^^xsd:string)
AnnotationAssertion(rdfs:label :hasGottenAllImportantThingsInLifeValue "So far I have gotten the important things I want in life"@en)
SubDataPropertyOf(:hasGottenAllImportantThingsInLifeValue :hasWB1Value)

# Data Property: :hasHadEnoughMinutesInTheDayValue (There have not been enough minutes in the day)

AnnotationAssertion(rdfs:comment :hasHadEnoughMinutesInTheDayValue "TA6"^^xsd:string)
AnnotationAssertion(rdfs:label :hasHadEnoughMinutesInTheDayValue "There have not been enough minutes in the day"@en)
SubDataPropertyOf(:hasHadEnoughMinutesInTheDayValue :hasTAValue)

# Data Property: :hasHadEnoughTimeToDoTheThingsThatAreImportantValue (I have had enough time to do the things that are important to me)

AnnotationAssertion(rdfs:comment :hasHadEnoughTimeToDoTheThingsThatAreImportantValue "TA7"^^xsd:string)
AnnotationAssertion(rdfs:label :hasHadEnoughTimeToDoTheThingsThatAreImportantValue "I have had enough time to do the things that are important to me"@en)
SubDataPropertyOf(:hasHadEnoughTimeToDoTheThingsThatAreImportantValue :hasTAValue)

# Data Property: :hasHadEnoughTimeToDoWhatIsNeeded (I have had enough time to do what I need to do)

AnnotationAssertion(rdfs:comment :hasHadEnoughTimeToDoWhatIsNeeded "TA4"^^xsd:string)
AnnotationAssertion(rdfs:label :hasHadEnoughTimeToDoWhatIsNeeded "I have had enough time to do what I need to do"@en)
SubDataPropertyOf(:hasHadEnoughTimeToDoWhatIsNeeded :hasTAValue)

# Data Property: :hasHeightValue (Would you indicate your height)

AnnotationAssertion(rdfs:comment :hasHeightValue "SD11b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasHeightValue "Would you indicate your height"@en)
SubDataPropertyOf(:hasHeightValue :hasSD11Value)

# Data Property: :hasHighestQualficationLevelValue (What is your highest level of education)

AnnotationAssertion(rdfs:comment :hasHighestQualficationLevelValue "1 →  No education / preschool
2 →  Primary school
3 →  Secondary school
4 →  High school
5 →  Vocational school
6 →  College degree
7 →  Master degree
8 →  Doctorate level degree"@en)
AnnotationAssertion(rdfs:comment :hasHighestQualficationLevelValue "SD3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasHighestQualficationLevelValue "What is your highest level of education"@en)
SubDataPropertyOf(:hasHighestQualficationLevelValue :hasSDValue)
DataPropertyDomain(:hasHighestQualficationLevelValue :Person)
DataPropertyRange(:hasHighestQualficationLevelValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "8"^^xsd:integer))

# Data Property: :hasHowOftenRepairsOrTransformsClothesValue (Repair or transform clothes (mend stockings, shorten or tighten trousers, transform a dress into a blouse, etc))

AnnotationAssertion(rdfs:comment :hasHowOftenRepairsOrTransformsClothesValue "SB2a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasHowOftenRepairsOrTransformsClothesValue "Repair or transform clothes (mend stockings, shorten or tighten trousers, transform a dress into a blouse, etc)"@en)
SubDataPropertyOf(:hasHowOftenRepairsOrTransformsClothesValue :hasSB2Value)
DataPropertyDomain(:hasHowOftenRepairsOrTransformsClothesValue ObjectSomeValuesFrom(:repairsOrTransforms :Clothing))

# Data Property: :hasHowWarmHouseIsKeptOnAverageInWinterValue (How warm do you keep your house in winter on average, when you are at home)

AnnotationAssertion(rdfs:comment :hasHowWarmHouseIsKeptOnAverageInWinterValue "1 → I never heat my home
2 → 16°
3 → 17°
4 → 18°
5 → 19°
6 → 20°
7 → 21°
8 → 22°
9 → 23°
10 → 24°
11 → More than 24°"@en)
AnnotationAssertion(rdfs:comment :hasHowWarmHouseIsKeptOnAverageInWinterValue "EU10"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasHowWarmHouseIsKeptOnAverageInWinterValue "I've implemented this on the assumption that both answers to this look roughly the same in the map. There is a Collection of CollectionOfRooms which is equivalent to Household, if each of these has a link from the class HomeHeating then the whole house is heated if not, then only some of the house in the dwelling are. This will be interesting to implement."@en)
AnnotationAssertion(rdfs:label :hasHowWarmHouseIsKeptOnAverageInWinterValue "How warm do you keep your house in winter on average, when you are at home"@en)
SubDataPropertyOf(:hasHowWarmHouseIsKeptOnAverageInWinterValue :hasEUValue)
DataPropertyDomain(:hasHowWarmHouseIsKeptOnAverageInWinterValue ObjectUnionOf(:Household :Room))
DataPropertyRange(:hasHowWarmHouseIsKeptOnAverageInWinterValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "11"^^xsd:integer))

# Data Property: :hasIDValue (:hasIDValue)

AnnotationAssertion(rdfs:comment :hasIDValue "Ascending: 1 -Totally agree → 7 - Totally disagree"@en)
AnnotationAssertion(rdfs:comment :hasIDValue "ID"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasIDValue "has pro-environmental self-identity value"@en)
DataPropertyDomain(:hasIDValue :ProEnvironmentalIdentity)
DataPropertyRange(:hasIDValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasIEValue (:hasIEValue)

AnnotationAssertion(rdfs:comment :hasIEValue "Ascending: 1 -Very negative → 7 - Very positive"@en)
AnnotationAssertion(rdfs:comment :hasIEValue "IE"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasIEValue "has use of sustainability initiative services value"@en)
DataPropertyDomain(:hasIEValue :Person)
DataPropertyRange(:hasIEValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasIIValue (:hasIIValue)

AnnotationAssertion(rdfs:comment :hasIIValue "Ascending: 1 -Totally agree → 7 - Totally disagree"@en)
AnnotationAssertion(rdfs:comment :hasIIValue "II"^^xsd:string)
DataPropertyDomain(:hasIIValue :InternalAttitude)
DataPropertyRange(:hasIIValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasIUValue (:hasIUValue)

AnnotationAssertion(rdfs:comment :hasIUValue "Ascending: 1 -Never → 7 - Always"@en)
AnnotationAssertion(rdfs:comment :hasIUValue "IU"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasIUValue "has use of sustainability initiative services value"@en)
DataPropertyDomain(:hasIUValue :SustainabilityInitiativeService)
DataPropertyRange(:hasIUValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasImportanceOfAuthorityAndTheRightToLeadValue (Authority, the right to lead or command)

AnnotationAssertion(rdfs:comment :hasImportanceOfAuthorityAndTheRightToLeadValue "SS13"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceOfAuthorityAndTheRightToLeadValue "Authority, the right to lead or command"@en)
SubDataPropertyOf(:hasImportanceOfAuthorityAndTheRightToLeadValue :hasSSValue)

# Data Property: :hasImportanceOfCorrectionOfInjusticeValue (Social justice, correcting injustice, care for the weak)

AnnotationAssertion(rdfs:comment :hasImportanceOfCorrectionOfInjusticeValue "SS3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceOfCorrectionOfInjusticeValue "Social justice, correcting injustice, care for the weak"@en)
SubDataPropertyOf(:hasImportanceOfCorrectionOfInjusticeValue :hasSSValue)

# Data Property: :hasImportanceOfCuriosityInEverythingValue (Curious, interested in everything, exploring)

AnnotationAssertion(rdfs:comment :hasImportanceOfCuriosityInEverythingValue "SS12"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceOfCuriosityInEverythingValue "Curious, interested in everything, exploring"@en)
SubDataPropertyOf(:hasImportanceOfCuriosityInEverythingValue :hasSSValue)

# Data Property: :hasImportanceOfEqualityForAllValue (Equality, equal justice for all)

AnnotationAssertion(rdfs:comment :hasImportanceOfEqualityForAllValue "SS11"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceOfEqualityForAllValue "Equality, equal justice for all"@en)
SubDataPropertyOf(:hasImportanceOfEqualityForAllValue :hasSSValue)

# Data Property: :hasImportanceOfExcitingLifeValue (An exciting life, stimulating experiences)

AnnotationAssertion(rdfs:comment :hasImportanceOfExcitingLifeValue "SS8"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceOfExcitingLifeValue "An exciting life, stimulating experiences"@en)
SubDataPropertyOf(:hasImportanceOfExcitingLifeValue :hasSSValue)

# Data Property: :hasImportanceOfFamilySecurityValue (Family security, safety for loved ones)

AnnotationAssertion(rdfs:comment :hasImportanceOfFamilySecurityValue "SS4"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceOfFamilySecurityValue "Family security, safety for loved ones"@en)
SubDataPropertyOf(:hasImportanceOfFamilySecurityValue :hasSSValue)

# Data Property: :hasImportanceOfHonouringParentsAndEldersValue (Honoring parents and elders, showing respect)

AnnotationAssertion(rdfs:comment :hasImportanceOfHonouringParentsAndEldersValue "SS2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceOfHonouringParentsAndEldersValue "Honoring parents and elders, showing respect"@en)
SubDataPropertyOf(:hasImportanceOfHonouringParentsAndEldersValue :hasSSValue)

# Data Property: :hasImportanceOfInfluencingEventsValue (Influential, having an impact on people and events)

AnnotationAssertion(rdfs:comment :hasImportanceOfInfluencingEventsValue "SS5"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceOfInfluencingEventsValue "Influential, having an impact on people and events"@en)
SubDataPropertyOf(:hasImportanceOfInfluencingEventsValue :hasSSValue)

# Data Property: :hasImportanceOfProtectingAndPreservingEnvironmentValue (Protecting the environment, preserving nature)

AnnotationAssertion(rdfs:comment :hasImportanceOfProtectingAndPreservingEnvironmentValue "SS1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceOfProtectingAndPreservingEnvironmentValue "Protecting the environment, preserving nature"@en)
SubDataPropertyOf(:hasImportanceOfProtectingAndPreservingEnvironmentValue :hasSSValue)

# Data Property: :hasImportanceOfRespectingTheEarthValue (Respecting the earth, harmony with other species)

AnnotationAssertion(rdfs:comment :hasImportanceOfRespectingTheEarthValue "SS15"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceOfRespectingTheEarthValue "Respecting the earth, harmony with other species"@en)
SubDataPropertyOf(:hasImportanceOfRespectingTheEarthValue :hasSSValue)

# Data Property: :hasImportanceOfSelfDisciplineValue (Self-discipline, self-restraint, resistance to temptation)

AnnotationAssertion(rdfs:comment :hasImportanceOfSelfDisciplineValue "SS9"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceOfSelfDisciplineValue "Self-discipline, self-restraint, resistance to temptation"@en)
SubDataPropertyOf(:hasImportanceOfSelfDisciplineValue :hasSSValue)

# Data Property: :hasImportanceOfUnityWithNature (Unity with nature, fitting into nature)

AnnotationAssertion(rdfs:comment :hasImportanceOfUnityWithNature "SS10"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceOfUnityWithNature "Unity with nature, fitting into nature"@en)
SubDataPropertyOf(:hasImportanceOfUnityWithNature :hasSSValue)

# Data Property: :hasImportanceOfVariedAndChallengingLifeValue (A varied life, filled with challenge, novelty, and change)

AnnotationAssertion(rdfs:comment :hasImportanceOfVariedAndChallengingLifeValue "SS14"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceOfVariedAndChallengingLifeValue "A varied life, filled with challenge, novelty, and change"@en)
SubDataPropertyOf(:hasImportanceOfVariedAndChallengingLifeValue :hasSSValue)

# Data Property: :hasImportanceOfWealthAndMaterialPossessionsValue (Wealth, material possessions, money)

AnnotationAssertion(rdfs:comment :hasImportanceOfWealthAndMaterialPossessionsValue "SS7"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceOfWealthAndMaterialPossessionsValue "Wealth, material possessions, money"@en)
SubDataPropertyOf(:hasImportanceOfWealthAndMaterialPossessionsValue :hasSSValue)

# Data Property: :hasImportanceOfWorldPeaceValue (A world at peace, free of war and conflict)

AnnotationAssertion(rdfs:comment :hasImportanceOfWorldPeaceValue "SS6"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceOfWorldPeaceValue "A world at peace, free of war and conflict"@en)
SubDataPropertyOf(:hasImportanceOfWorldPeaceValue :hasSSValue)

# Data Property: :hasImportanceValueAboutDealingWithProblemsInMyLife (Importance of:  I will deal effectively with problems in my life)

AnnotationAssertion(rdfs:comment :hasImportanceValueAboutDealingWithProblemsInMyLife "ASA4a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueAboutDealingWithProblemsInMyLife "Importance of:  I will deal effectively with problems in my life"@en)
SubDataPropertyOf(:hasImportanceValueAboutDealingWithProblemsInMyLife :hasASA4Value)

# Data Property: :hasImportanceValueAboutFeellingGoodAboutOwnAbilities (Importance of: I will feel good about my abilities)

AnnotationAssertion(rdfs:comment :hasImportanceValueAboutFeellingGoodAboutOwnAbilities "ASA5a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueAboutFeellingGoodAboutOwnAbilities "Importance of: I will feel good about my abilities"@en)
SubDataPropertyOf(:hasImportanceValueAboutFeellingGoodAboutOwnAbilities :hasASA5Value)

# Data Property: :hasImportanceValueForBeingAbleToExpressLoveForSpecialPeople (Importance of: I will express my love for special people)

AnnotationAssertion(rdfs:comment :hasImportanceValueForBeingAbleToExpressLoveForSpecialPeople "AA4a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueForBeingAbleToExpressLoveForSpecialPeople "Importance of: I will express my love for special people"@en)
SubDataPropertyOf(:hasImportanceValueForBeingAbleToExpressLoveForSpecialPeople :hasAA4Value)

# Data Property: :hasImportanceValueForFindingReligiousOrSpiritualBeliefsAreGrowthProducing (Importance of: I will find religious and/or spiritual beliefs that are growth-producing)

AnnotationAssertion(rdfs:comment :hasImportanceValueForFindingReligiousOrSpiritualBeliefsAreGrowthProducing "AS3a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueForFindingReligiousOrSpiritualBeliefsAreGrowthProducing "Importance of: I will find religious and/or spiritual beliefs that are growth-producing"@en)
SubDataPropertyOf(:hasImportanceValueForFindingReligiousOrSpiritualBeliefsAreGrowthProducing :hasAS3Value)

# Data Property: :hasImportanceValueForHavingACommittedIntimateRelationship (Importance of: I will have a committed, intimate relationship)

AnnotationAssertion(rdfs:comment :hasImportanceValueForHavingACommittedIntimateRelationship "AA5a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueForHavingACommittedIntimateRelationship "Importance of: I will have a committed, intimate relationship"@en)
SubDataPropertyOf(:hasImportanceValueForHavingACommittedIntimateRelationship :hasAA5Value)

# Data Property: :hasImportanceValueForInsightIntoWhatIDo (Importance of: I will have insight into why I do the things I do)

AnnotationAssertion(rdfs:comment :hasImportanceValueForInsightIntoWhatIDo "ASA7a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueForInsightIntoWhatIDo "Importance of: I will have insight into why I do the things I do"@en)
SubDataPropertyOf(:hasImportanceValueForInsightIntoWhatIDo :hasASA7Value)

# Data Property: :hasImportanceValueForLivingLifeAccordingToSpiritualOrReligiousBeliefs (Importance of: My life and actions will be in agreement with my religious/spiritual beliefs)

AnnotationAssertion(rdfs:comment :hasImportanceValueForLivingLifeAccordingToSpiritualOrReligiousBeliefs "AS4a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueForLivingLifeAccordingToSpiritualOrReligiousBeliefs "Importance of: My life and actions will be in agreement with my religious/spiritual beliefs"@en)
SubDataPropertyOf(:hasImportanceValueForLivingLifeAccordingToSpiritualOrReligiousBeliefs :hasAS4Value)

# Data Property: :hasImportanceValueForMakingTheWorldABetterPlace (Importance of: I will help the world become a better place)

AnnotationAssertion(rdfs:comment :hasImportanceValueForMakingTheWorldABetterPlace "AC3a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueForMakingTheWorldABetterPlace "Importance of: I will help the world become a better place"@en)
SubDataPropertyOf(:hasImportanceValueForMakingTheWorldABetterPlace :hasAC3Value)

# Data Property: :hasImportanceValueOfAssistingPeopleWithNoReward (Importance of: I will assist people who need it, asking nothing in return)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfAssistingPeopleWithNoReward "AC1a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfAssistingPeopleWithNoReward "Importance of: I will assist people who need it, asking nothing in return"@en)
SubDataPropertyOf(:hasImportanceValueOfAssistingPeopleWithNoReward :hasAC1Value)

# Data Property: :hasImportanceValueOfBeingAdmiredByManyPeople (Importance of: I will be admired by many people)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfBeingAdmiredByManyPeople "AP1a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfBeingAdmiredByManyPeople "Importance of: I will be admired by many people"@en)
SubDataPropertyOf(:hasImportanceValueOfBeingAdmiredByManyPeople :hasAP1Value)

# Data Property: :hasImportanceValueOfBeingEfficient (Importance of:  I will be efficient)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfBeingEfficient "ASA1a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfBeingEfficient "Importance of:  I will be efficient"@en)
SubDataPropertyOf(:hasImportanceValueOfBeingEfficient :hasASA1Value)

# Data Property: :hasImportanceValueOfBeingFamous (Importance of: My name will be known by many different people)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfBeingFamous "AP2a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfBeingFamous "Importance of: My name will be known by many different people"@en)
SubDataPropertyOf(:hasImportanceValueOfBeingFamous :hasAP2Value)

# Data Property: :hasImportanceValueOfExperiencingAGreatDealOfSensualPleasure (Importance of: I will experience a great deal of sensual pleasure)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfExperiencingAGreatDealOfSensualPleasure "AH3a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfExperiencingAGreatDealOfSensualPleasure "Importance of: I will experience a great deal of sensual pleasure"@en)
SubDataPropertyOf(:hasImportanceValueOfExperiencingAGreatDealOfSensualPleasure :hasAH3Value)

# Data Property: :hasImportanceValueOfFeelingFree (Importance of: I will feel free)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfFeelingFree "ASA3a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfFeelingFree "Importance of: I will feel free"@en)
SubDataPropertyOf(:hasImportanceValueOfFeelingFree :hasASA3Value)

# Data Property: :hasImportanceValueOfFeelingThatThereAreOthersWhoLoveMe (Importance of: I will feel that there are people who really love me)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfFeelingThatThereAreOthersWhoLoveMe "AA2a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfFeelingThatThereAreOthersWhoLoveMe "Importance of: I will feel that there are people who really love me"@en)
SubDataPropertyOf(:hasImportanceValueOfFeelingThatThereAreOthersWhoLoveMe :hasAA2Value)

# Data Property: :hasImportanceValueOfFindReligiousOrSpiritualBeliefsThatMakeSenseOfLife (Importance of: I will find religious or spiritual beliefs that help me make sense of the world)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfFindReligiousOrSpiritualBeliefsThatMakeSenseOfLife "AS2a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfFindReligiousOrSpiritualBeliefsThatMakeSenseOfLife "Importance of: I will find religious or spiritual beliefs that help me make sense of the world"@en)
SubDataPropertyOf(:hasImportanceValueOfFindReligiousOrSpiritualBeliefsThatMakeSenseOfLife :hasAS2Value)

# Data Property: :hasImportanceValueOfFindingSatisfyingRelegiousOrSpritualActivities (Importance of: I will find satisfying religious and/or spiritual activities)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfFindingSatisfyingRelegiousOrSpritualActivities "AS1a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfFindingSatisfyingRelegiousOrSpritualActivities "Importance of: I will find satisfying religious and/or spiritual activities"@en)
SubDataPropertyOf(:hasImportanceValueOfFindingSatisfyingRelegiousOrSpritualActivities :hasAS1Value)

# Data Property: :hasImportanceValueOfHavingAGreatSexLife (Importance of: I will have a great sex life)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfHavingAGreatSexLife "AH1a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfHavingAGreatSexLife "Importance of: I will have a great sex life"@en)
SubDataPropertyOf(:hasImportanceValueOfHavingAGreatSexLife :hasAH1value)

# Data Property: :hasImportanceValueOfHavingAJobThatPaysWell (Importance of: I will have a job that pays well)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfHavingAJobThatPaysWell "AM4a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfHavingAJobThatPaysWell "Importance of: I will have a job that pays well"@en)
SubDataPropertyOf(:hasImportanceValueOfHavingAJobThatPaysWell :hasAM4Value)

# Data Property: :hasImportanceValueOfHavingALotOfExcitementInMyLife (Importance of: I will have a lot of excitement in my life)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfHavingALotOfExcitementInMyLife "AH2a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfHavingALotOfExcitementInMyLife "Importance of: I will have a lot of excitement in my life"@en)
SubDataPropertyOf(:hasImportanceValueOfHavingALotOfExcitementInMyLife :hasAH2Value)

# Data Property: :hasImportanceValueOfHavingEnoughMoneyToBuyWhatIWant (Importance of: I will have enough money to buy everything I want)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfHavingEnoughMoneyToBuyWhatIWant "AM3a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfHavingEnoughMoneyToBuyWhatIWant "Importance of: I will have enough money to buy everything I want"@en)
SubDataPropertyOf(:hasImportanceValueOfHavingEnoughMoneyToBuyWhatIWant :hasAM3Value)

# Data Property: :hasImportanceValueOfHavingManyExpensivePossessions (Importance of: I will have many expensive possessions)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfHavingManyExpensivePossessions "AM1b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfHavingManyExpensivePossessions "Importance of: I will have many expensive possessions"@en)
SubDataPropertyOf(:hasImportanceValueOfHavingManyExpensivePossessions :hasAM1Value)

# Data Property: :hasImportanceValueOfHavingMutualAffection (Importance of: People will show affection to me, and I will to them)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfHavingMutualAffection "AA1a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfHavingMutualAffection "Importance of: People will show affection to me, and I will to them"@en)
SubDataPropertyOf(:hasImportanceValueOfHavingMutualAffection :hasAA1Value)

# Data Property: :hasImportanceValueOfMakingPeoplesLivesBetter (Importance of: The things I do will make other people's lives better)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfMakingPeoplesLivesBetter "AC2a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfMakingPeoplesLivesBetter "Importance of: The things I do will make other people's lives better"@en)
SubDataPropertyOf(:hasImportanceValueOfMakingPeoplesLivesBetter :hasAC2Value)

# Data Property: :hasImportanceValueOfOvercomingLifeChallenges (Importance of: I will overcome the challenges that life presents me)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfOvercomingLifeChallenges "ASA6a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfOvercomingLifeChallenges "Importance of: I will overcome the challenges that life presents me"@en)
SubDataPropertyOf(:hasImportanceValueOfOvercomingLifeChallenges :hasASA6Value)

# Data Property: :hasImportanceValueOfSomeoneAcceptingMeNoMatterWhat (Importance of: Someone in my life will accept me as I am, no matter what)

AnnotationAssertion(rdfs:comment :hasImportanceValueOfSomeoneAcceptingMeNoMatterWhat "AA3a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValueOfSomeoneAcceptingMeNoMatterWhat "Importance of: Someone in my life will accept me as I am, no matter what"@en)
SubDataPropertyOf(:hasImportanceValueOfSomeoneAcceptingMeNoMatterWhat :hasAA3Value)

# Data Property: :hasImportanceValuesForChoosingWhatIDoInsteadOfBeingPushed (Importance of: I will choose what I do, instead of being pushed along by life)

AnnotationAssertion(rdfs:comment :hasImportanceValuesForChoosingWhatIDoInsteadOfBeingPushed "ASA2a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValuesForChoosingWhatIDoInsteadOfBeingPushed "Importance of: I will choose what I do, instead of being pushed along by life"@en)
SubDataPropertyOf(:hasImportanceValuesForChoosingWhatIDoInsteadOfBeingPushed :hasASA2Value)

# Data Property: :hasImportanceValuesOfEverybodyKnowingMeLikingMe (Importance of: Most everyone who knows me will like me)

AnnotationAssertion(rdfs:comment :hasImportanceValuesOfEverybodyKnowingMeLikingMe "AP3a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasImportanceValuesOfEverybodyKnowingMeLikingMe "Importance of: Most everyone who knows me will like me"@en)
SubDataPropertyOf(:hasImportanceValuesOfEverybodyKnowingMeLikingMe :hasAP3Value)

# Data Property: :hasIntimateRelationshipValue (Generally I have a committed, intimate  relationship)

AnnotationAssertion(rdfs:comment :hasIntimateRelationshipValue "II1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasIntimateRelationshipValue "Generally I have a committed, intimate  relationship"@en)
SubDataPropertyOf(:hasIntimateRelationshipValue :hasIIValue)

# Data Property: :hasKilometreDistanceCommutePart1Value (Distance covered approximately per return trip for commute part 1)

AnnotationAssertion(rdfs:comment :hasKilometreDistanceCommutePart1Value "MB1.a3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasKilometreDistanceCommutePart1Value "Distance covered approximately per return trip for commute part 1"@en)
SubDataPropertyOf(:hasKilometreDistanceCommutePart1Value :hasMB1aValue)
DataPropertyRange(:hasKilometreDistanceCommutePart1Value xsd:decimal)

# Data Property: :hasKilometreDistanceCommutePart2Value (Distance covered approximately per return trip for commute part 3)

AnnotationAssertion(rdfs:comment :hasKilometreDistanceCommutePart2Value "MB1.c3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasKilometreDistanceCommutePart2Value "Distance covered approximately per return trip for commute part 3"@en)
SubDataPropertyOf(:hasKilometreDistanceCommutePart2Value :hasMB1cValue)
DataPropertyRange(:hasKilometreDistanceCommutePart2Value xsd:decimal)

# Data Property: :hasKindOfCarOwnershipValue (Which of the following options best describes your situation)

AnnotationAssertion(rdfs:comment :hasKindOfCarOwnershipValue "1 → I own a car and I am the only one who uses it.
2 → I share the car with other members of my household.
3 → When I need a car, I use a carpooling service."@en)
AnnotationAssertion(rdfs:comment :hasKindOfCarOwnershipValue "MB3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasKindOfCarOwnershipValue "Which of the following options best describes your situation"@en)
SubDataPropertyOf(:hasKindOfCarOwnershipValue :hasMBValue)
DataPropertyDomain(:hasKindOfCarOwnershipValue :Person)
DataPropertyRange(:hasKindOfCarOwnershipValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "3"^^xsd:integer))

# Data Property: :hasLifeHasBeenTooRushedInTheLastYearValue (My life has been too rushed)

AnnotationAssertion(rdfs:comment :hasLifeHasBeenTooRushedInTheLastYearValue "TA1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasLifeHasBeenTooRushedInTheLastYearValue "My life has been too rushed"@en)
SubDataPropertyOf(:hasLifeHasBeenTooRushedInTheLastYearValue :hasTAValue)

# Data Property: :hasLivingAreaValue (How would you describe your living area)

AnnotationAssertion(rdfs:comment :hasLivingAreaValue "1 → Urban
2 → Rural
3 → Suburban (neighborhoods or communities outside of central urban areas)"@en)
AnnotationAssertion(rdfs:comment :hasLivingAreaValue "SD10"^^xsd:string)
AnnotationAssertion(rdfs:label :hasLivingAreaValue "How would you describe your living area"@en)
SubDataPropertyOf(:hasLivingAreaValue :hasSDValue)
DataPropertyDomain(:hasLivingAreaValue :Dwelling)
DataPropertyRange(:hasLivingAreaValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "3"^^xsd:integer))

# Data Property: :hasMB1Value (Commute value)

AnnotationAssertion(rdfs:comment :hasMB1Value "MB1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMB1Value "Commute value"@en)
SubDataPropertyOf(:hasMB1Value :hasMBValue)
DataPropertyDomain(:hasMB1Value :Commute)

# Data Property: :hasMB1aValue (Commute part 1)

AnnotationAssertion(rdfs:comment :hasMB1aValue "MB1.a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMB1aValue "Commute part 1"@en)
SubDataPropertyOf(:hasMB1aValue :hasMB1Value)
DataPropertyDomain(:hasMB1aValue :CommutePart1)

# Data Property: :hasMB1bValue (Commute part 2)

AnnotationAssertion(rdfs:comment :hasMB1bValue "MB1.b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMB1bValue "Commute part 2"@en)
SubDataPropertyOf(:hasMB1bValue :hasMB1Value)
DataPropertyDomain(:hasMB1bValue :CommutePart2)

# Data Property: :hasMB1cValue (Commute part 3)

AnnotationAssertion(rdfs:comment :hasMB1cValue "MB1.c"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMB1cValue "Commute part 3"@en)
SubDataPropertyOf(:hasMB1cValue :hasMB1Value)
DataPropertyDomain(:hasMB1cValue :CommutePart3)

# Data Property: :hasMB2Values (Regular private travel)

AnnotationAssertion(rdfs:comment :hasMB2Values "MB2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMB2Values "Regular private travel"@en)
SubDataPropertyOf(:hasMB2Values :hasMBValue)
DataPropertyDomain(:hasMB2Values :RegularPrivateTravel)

# Data Property: :hasMB2aValue (Private trip 1)

AnnotationAssertion(rdfs:comment :hasMB2aValue "MB2.a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMB2aValue "Private trip 1"@en)
SubDataPropertyOf(:hasMB2aValue :hasMB2Values)
DataPropertyDomain(:hasMB2aValue :RegularPrivateTravelTrip1)

# Data Property: :hasMB2bValue (Private trip 2)

AnnotationAssertion(rdfs:comment :hasMB2bValue "MB2.b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMB2bValue "Private trip 2"@en)
SubDataPropertyOf(:hasMB2bValue :hasMB2Values)
DataPropertyDomain(:hasMB2bValue :RegularPrivateTravelTrip2)

# Data Property: :hasMB2cValue (Private trip 3)

AnnotationAssertion(rdfs:comment :hasMB2cValue "MB2.c"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMB2cValue "Private trip 3"@en)
SubDataPropertyOf(:hasMB2cValue :hasMB2Values)
DataPropertyDomain(:hasMB2cValue :RegularPrivateTravelTrip3)

# Data Property: :hasMB4Value (Private car value)

AnnotationAssertion(rdfs:comment :hasMB4Value "MB4"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMB4Value "Private car value"@en)
SubDataPropertyOf(:hasMB4Value :hasMBValue)
DataPropertyDomain(:hasMB4Value ObjectSomeValuesFrom(:isUsedBy :Person))

# Data Property: :hasMB6Value (When you travel, how often do you carpool rather than drive alone, in the following situations)

AnnotationAssertion(rdfs:comment :hasMB6Value "Ascending: 1 - Never → 7 - Always"@en)
AnnotationAssertion(rdfs:comment :hasMB6Value "MB6"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMB6Value "When you travel, how often do you carpool rather than drive alone, in the following situations"@en)
SubDataPropertyOf(:hasMB6Value :hasMBValue)
DataPropertyDomain(:hasMB6Value :Carpool)
DataPropertyRange(:hasMB6Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasMB9Value (How many of your flights were)

AnnotationAssertion(rdfs:comment :hasMB9Value "MB9"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMB9Value "How many of your flights were"@en)
SubDataPropertyOf(:hasMB9Value :hasMBValue)
DataPropertyDomain(:hasMB9Value :Flying)
DataPropertyDomain(:hasMB9Value DataHasValue(:hasDate "2014"^^xsd:date))
DataPropertyRange(:hasMB9Value xsd:nonNegativeInteger)

# Data Property: :hasMBValue (:hasMBValue)

AnnotationAssertion(rdfs:comment :hasMBValue "DONE"@en)
AnnotationAssertion(rdfs:comment :hasMBValue "has mobility value"@en)

# Data Property: :hasMaritalStatusValue (What is your marital status)

AnnotationAssertion(rdfs:comment :hasMaritalStatusValue "1 →  Single living alone
2 →  Single living with others.
3 →  Married/in a stable relationship.
4 →  Divorced / separated
5 →  Widow/widower"@en)
AnnotationAssertion(rdfs:comment :hasMaritalStatusValue "SD4"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMaritalStatusValue "What is your marital status"@en)
SubDataPropertyOf(:hasMaritalStatusValue :hasSDValue)
DataPropertyDomain(:hasMaritalStatusValue :Person)
DataPropertyRange(:hasMaritalStatusValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "5"^^xsd:integer))

# Data Property: :hasMeaningfulDailyLifeValue (My daily life has been filled with meaningful activities)

AnnotationAssertion(rdfs:comment :hasMeaningfulDailyLifeValue "WB2f"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMeaningfulDailyLifeValue "My daily life has been filled with meaningful activities"@en)
SubDataPropertyOf(:hasMeaningfulDailyLifeValue :hasWB2Value)

# Data Property: :hasMeansOfTransportForCommutePart1Value (Means of transportation for commute part 1)

AnnotationAssertion(rdfs:comment :hasMeansOfTransportForCommutePart1Value "1 → Walking
2 → Bicycle
3 → Electric bicycle
4 → Motorbike
5 → Car
6 → Bus
7 → Tram/Underground
8 → Commuter train/short distance
9 → Other"@en)
AnnotationAssertion(rdfs:comment :hasMeansOfTransportForCommutePart1Value "MB1.a1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMeansOfTransportForCommutePart1Value "Means of transportation for commute part 1"@en)
SubDataPropertyOf(:hasMeansOfTransportForCommutePart1Value :hasMB1aValue)
SubDataPropertyOf(:hasMeansOfTransportForCommutePart1Value :journeyHasMeansOfTransportationValue)

# Data Property: :hasMeansOfTransportForCommutePart2Value (Means of transportation for commute part 2)

AnnotationAssertion(rdfs:comment :hasMeansOfTransportForCommutePart2Value "1 → Walking
2 → Bicycle
3 → Electric bicycle
4 → Motorbike
5 → Car
6 → Bus
7 → Tram/Underground
8 → Commuter train/short distance
9 → Other"@en)
AnnotationAssertion(rdfs:comment :hasMeansOfTransportForCommutePart2Value "MB1.b1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMeansOfTransportForCommutePart2Value "Means of transportation for commute part 2"@en)
SubDataPropertyOf(:hasMeansOfTransportForCommutePart2Value :hasMB1bValue)
SubDataPropertyOf(:hasMeansOfTransportForCommutePart2Value :journeyHasMeansOfTransportationValue)

# Data Property: :hasMeansOfTransportForCommutePart3Value (Means of transportation for commute part 3)

AnnotationAssertion(rdfs:comment :hasMeansOfTransportForCommutePart3Value "1 → Walking
2 → Bicycle
3 → Electric bicycle
4 → Motorbike
5 → Car
6 → Bus
7 → Tram/Underground
8 → Commuter train/short distance
9 → Other"@en)
AnnotationAssertion(rdfs:comment :hasMeansOfTransportForCommutePart3Value "MB1.c1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMeansOfTransportForCommutePart3Value "Means of transportation for commute part 3"@en)
SubDataPropertyOf(:hasMeansOfTransportForCommutePart3Value :hasMB1cValue)
SubDataPropertyOf(:hasMeansOfTransportForCommutePart3Value :journeyHasMeansOfTransportationValue)

# Data Property: :hasMonthlyNetIncomeValue (Monthly Net Income in your household (total monthly amount for all members of your household after deduction of all taxes))

AnnotationAssertion(rdfs:comment :hasMonthlyNetIncomeValue "1 → Under 600 net Euros
2 → Between 601-1500 net Euros
3 → Between 1501-3000 net Euros
4 → Between 3001-4500 net Euros
5 → Between 4501-6000 net Euros 
6 → More than 6000 net Euros"@en)
AnnotationAssertion(rdfs:comment :hasMonthlyNetIncomeValue "SD6"^^xsd:string)
AnnotationAssertion(rdfs:label :hasMonthlyNetIncomeValue "Monthly Net Income in your household (total monthly amount for all members of your household after deduction of all taxes)"@en)
SubDataPropertyOf(:hasMonthlyNetIncomeValue :hasSDValue)
DataPropertyDomain(:hasMonthlyNetIncomeValue :Household)
DataPropertyRange(:hasMonthlyNetIncomeValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "6"^^xsd:integer))

# Data Property: :hasNQ1Value (Household satisfaction value)

AnnotationAssertion(rdfs:comment :hasNQ1Value "Ascending: 1 - Totally disagree → 7 - Totally agree"@en)
AnnotationAssertion(rdfs:comment :hasNQ1Value "NQ1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasNQ1Value "Household satisfaction value"@en)
SubDataPropertyOf(:hasNQ1Value :hasNQValue)
DataPropertyRange(:hasNQ1Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasNQValue (:hasNQValue)

AnnotationAssertion(rdfs:comment :hasNQValue "has neighbourhood quality"@en)
DataPropertyDomain(:hasNQValue :NeighbourhoodQuality)

# Data Property: :hasNoRegretsAboutLife (If I could live my life over, I would change almost nothing)

AnnotationAssertion(rdfs:comment :hasNoRegretsAboutLife "WB1e"^^xsd:string)
AnnotationAssertion(rdfs:label :hasNoRegretsAboutLife "If I could live my life over, I would change almost nothing"@en)
SubDataPropertyOf(:hasNoRegretsAboutLife :hasWB1Value)

# Data Property: :hasNumberOfBathroomsValue (Number of bathrooms)

AnnotationAssertion(rdfs:comment :hasNumberOfBathroomsValue "EU1_c"^^xsd:string)
AnnotationAssertion(rdfs:label :hasNumberOfBathroomsValue "Number of bathrooms"@en)
SubDataPropertyOf(:hasNumberOfBathroomsValue :hasEU1Value)

# Data Property: :hasNumberOfChildrenBelow18InHouseholdValue (Number of children under 18 years of age living in your household)

AnnotationAssertion(rdfs:comment :hasNumberOfChildrenBelow18InHouseholdValue "SD7"^^xsd:string)
AnnotationAssertion(rdfs:label :hasNumberOfChildrenBelow18InHouseholdValue "Number of children under 18 years of age living in your household"@en)
SubDataPropertyOf(:hasNumberOfChildrenBelow18InHouseholdValue :hasSDValue)
DataPropertyDomain(:hasNumberOfChildrenBelow18InHouseholdValue :Household)
DataPropertyRange(:hasNumberOfChildrenBelow18InHouseholdValue xsd:nonNegativeInteger)

# Data Property: :hasNumberOfCommutesPart1PerWeekValue (Number of return trips for commute part 1)

AnnotationAssertion(rdfs:comment :hasNumberOfCommutesPart1PerWeekValue "MB1.a2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasNumberOfCommutesPart1PerWeekValue "Number of return trips for commute part 1"@en)
SubDataPropertyOf(:hasNumberOfCommutesPart1PerWeekValue :hasMB1aValue)
DataPropertyRange(:hasNumberOfCommutesPart1PerWeekValue xsd:nonNegativeInteger)

# Data Property: :hasNumberOfCommutesPart2PerWeekValue (Number of return trips for commute part 3)

AnnotationAssertion(rdfs:comment :hasNumberOfCommutesPart2PerWeekValue "MB1.c2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasNumberOfCommutesPart2PerWeekValue "Number of return trips for commute part 3"@en)
SubDataPropertyOf(:hasNumberOfCommutesPart2PerWeekValue :hasMB1cValue)
DataPropertyRange(:hasNumberOfCommutesPart2PerWeekValue xsd:nonNegativeInteger)

# Data Property: :hasNumberOfCommutesPart3PerWeekValue (Number of return trips for commute part 2)

AnnotationAssertion(rdfs:comment :hasNumberOfCommutesPart3PerWeekValue "MB1.b2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasNumberOfCommutesPart3PerWeekValue "Number of return trips for commute part 2"@en)
SubDataPropertyOf(:hasNumberOfCommutesPart3PerWeekValue :hasMB1bValue)
DataPropertyRange(:hasNumberOfCommutesPart3PerWeekValue xsd:nonNegativeInteger)

# Data Property: :hasNumberOfComputersValue (How many computers are there in your household? (including tablets and laptop computers))

AnnotationAssertion(rdfs:comment :hasNumberOfComputersValue "EU5"^^xsd:string)
AnnotationAssertion(rdfs:label :hasNumberOfComputersValue "How many computers are there in your household? (including tablets and laptop computers)"@en)
SubDataPropertyOf(:hasNumberOfComputersValue :hasEUValue)
DataPropertyDomain(:hasNumberOfComputersValue :Household)
DataPropertyRange(:hasNumberOfComputersValue xsd:nonPositiveInteger)

# Data Property: :hasNumberOfKMPerYearDrivenInCarValue (How many km do you drive per year with your car, approximately (please refer only to the km you drove))

AnnotationAssertion(rdfs:comment :hasNumberOfKMPerYearDrivenInCarValue "1 → Less than 5.000 km     
2 → Between 5.000 and 10.000 km
3 → Between 10.000 and 15.000 km
4 → Between 15.000 and 20.000 km  
5 → Between 20.000 and 40.000 km
6 → Between 40.000 and 60.000 km        
7 → Over 60.000 km
8 → Don´t know"@en)
AnnotationAssertion(rdfs:comment :hasNumberOfKMPerYearDrivenInCarValue "MB4d"^^xsd:string)
AnnotationAssertion(rdfs:label :hasNumberOfKMPerYearDrivenInCarValue "How many km do you drive per year with your car, approximately (please refer only to the km you drove)"@en)
SubDataPropertyOf(:hasNumberOfKMPerYearDrivenInCarValue :hasMB4Value)
DataPropertyRange(:hasNumberOfKMPerYearDrivenInCarValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "8"^^xsd:integer))

# Data Property: :hasNumberOfKilometreDistanceCommutePart3Value (Distance covered approximately per return trip for commute part 2)

AnnotationAssertion(rdfs:comment :hasNumberOfKilometreDistanceCommutePart3Value "MB1.b3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasNumberOfKilometreDistanceCommutePart3Value "Distance covered approximately per return trip for commute part 2"@en)
SubDataPropertyOf(:hasNumberOfKilometreDistanceCommutePart3Value :hasMB1bValue)
DataPropertyRange(:hasNumberOfKilometreDistanceCommutePart3Value xsd:decimal)

# Data Property: :hasNumberOfLongFlightsValue (Long (more than 4.000 km or 4 ½ hours))

AnnotationAssertion(rdfs:comment :hasNumberOfLongFlightsValue "MB9b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasNumberOfLongFlightsValue "Long (more than 4.000 km or 4 ½ hours)"@en)
SubDataPropertyOf(:hasNumberOfLongFlightsValue :hasMB9Value)

# Data Property: :hasNumberOfPeopleLivingInHouseholdValue (Please indicate the total number of people living in your household (including those under 18 and including yourself))

AnnotationAssertion(rdfs:comment :hasNumberOfPeopleLivingInHouseholdValue "SD5"^^xsd:string)
AnnotationAssertion(rdfs:label :hasNumberOfPeopleLivingInHouseholdValue "Please indicate the total number of people living in your household (including those under 18 and including yourself)"@en)
SubDataPropertyOf(:hasNumberOfPeopleLivingInHouseholdValue :hasSDValue)
DataPropertyDomain(:hasNumberOfPeopleLivingInHouseholdValue :Household)
DataPropertyRange(:hasNumberOfPeopleLivingInHouseholdValue xsd:nonNegativeInteger)

# Data Property: :hasNumberOfReturnFlightsForYear2014Value (How many return flights did you take for private trips in total in the last year (2014))

AnnotationAssertion(rdfs:comment :hasNumberOfReturnFlightsForYear2014Value "MB8"^^xsd:string)
AnnotationAssertion(rdfs:label :hasNumberOfReturnFlightsForYear2014Value "How many return flights did you take for private trips in total in the last year (2014)"@en)
SubDataPropertyOf(:hasNumberOfReturnFlightsForYear2014Value :hasMBValue)
DataPropertyDomain(:hasNumberOfReturnFlightsForYear2014Value :Flying)
DataPropertyDomain(:hasNumberOfReturnFlightsForYear2014Value DataHasValue(:hasDate "2014"^^xsd:date))
DataPropertyRange(:hasNumberOfReturnFlightsForYear2014Value xsd:nonNegativeInteger)

# Data Property: :hasNumberOfRoomsValue (Number of rooms)

AnnotationAssertion(rdfs:comment :hasNumberOfRoomsValue "EU1_b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasNumberOfRoomsValue "Number of rooms"@en)
SubDataPropertyOf(:hasNumberOfRoomsValue :hasEU1Value)

# Data Property: :hasNumberOfShortFlightsValue (Short (Less than 4.000 km or less than 4 ½ hours))

AnnotationAssertion(rdfs:comment :hasNumberOfShortFlightsValue "MB9a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasNumberOfShortFlightsValue "Short (Less than 4.000 km or less than 4 ½ hours)"@en)
SubDataPropertyOf(:hasNumberOfShortFlightsValue :hasMB9Value)

# Data Property: :hasOilHeating (Oil for heating)

AnnotationAssertion(rdfs:comment :hasOilHeating "EU7Home_a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasOilHeating "Oil for heating"@en)
SubDataPropertyOf(:hasOilHeating :hasEU7Value)
DataPropertyDomain(:hasOilHeating DataHasValue(:doesNotHeatHome "false"^^xsd:boolean))
DataPropertyDomain(:hasOilHeating DataHasValue(:doesNotKnowHowHouseIsHeated "false"^^xsd:boolean))

# Data Property: :hasOilHotWaterHeating (Oil for water heating)

AnnotationAssertion(rdfs:comment :hasOilHotWaterHeating "EU7Home_b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasOilHotWaterHeating "Oil for water heating"@en)
SubDataPropertyOf(:hasOilHotWaterHeating :hasEU7Value)
DataPropertyDomain(:hasOilHotWaterHeating DataHasValue(:doesNotHeatWater "false"^^xsd:boolean))
DataPropertyDomain(:hasOilHotWaterHeating DataHasValue(:doesNotKnowHowWaterIsHeated "false"^^xsd:boolean))

# Data Property: :hasOpinionOfCarSharingValue (Opinion of ride sharing, car sharing initiatives/platforms (e.g.: Blablacar, Amovens, Carpooling, etc.))

AnnotationAssertion(rdfs:comment :hasOpinionOfCarSharingValue "IE1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasOpinionOfCarSharingValue "Opinion of ride sharing, car sharing initiatives/platforms (e.g.: Blablacar, Amovens, Carpooling, etc.)"@en)
SubDataPropertyOf(:hasOpinionOfCarSharingValue :hasIEValue)

# Data Property: :hasOpinionOfCollaborativeConsumptionInitiativesValue (Opinion of collaborative consumption initiatives (e.g. peerby, etc.))

AnnotationAssertion(rdfs:comment :hasOpinionOfCollaborativeConsumptionInitiativesValue "IE2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasOpinionOfCollaborativeConsumptionInitiativesValue "Opinion of collaborative consumption initiatives (e.g. peerby, etc.)"@en)
SubDataPropertyOf(:hasOpinionOfCollaborativeConsumptionInitiativesValue :hasIEValue)

# Data Property: :hasOpinionOfEnergyCooperativesValue (Opinion of energy cooperatives (e.g. Som Energía etc.))

AnnotationAssertion(rdfs:comment :hasOpinionOfEnergyCooperativesValue "IE4"^^xsd:string)
AnnotationAssertion(rdfs:label :hasOpinionOfEnergyCooperativesValue "Opinion of energy cooperatives (e.g. Som Energía etc.)"@en)
SubDataPropertyOf(:hasOpinionOfEnergyCooperativesValue :hasIEValue)

# Data Property: :hasOpinionOfSecondHandClothesSellingValue (Opinion of second hand shops for clothes)

AnnotationAssertion(rdfs:comment :hasOpinionOfSecondHandClothesSellingValue "IE5"^^xsd:string)
AnnotationAssertion(rdfs:label :hasOpinionOfSecondHandClothesSellingValue "Opinion of second hand shops for clothes"@en)
SubDataPropertyOf(:hasOpinionOfSecondHandClothesSellingValue :hasIEValue)

# Data Property: :hasOpinionOfSecondHandInternetSitesValue (Opinion of second hand internet sites)

AnnotationAssertion(rdfs:comment :hasOpinionOfSecondHandInternetSitesValue "IE6"^^xsd:string)
AnnotationAssertion(rdfs:label :hasOpinionOfSecondHandInternetSitesValue "Opinion of second hand internet sites"@en)
SubDataPropertyOf(:hasOpinionOfSecondHandInternetSitesValue :hasIEValue)

# Data Property: :hasOpinionOfSustainableFoodConsumptionInitiativesValue (Opinion of sustainable food consumption initiatives/cooperatives (e.g. Zocamiñoca etc))

AnnotationAssertion(rdfs:comment :hasOpinionOfSustainableFoodConsumptionInitiativesValue "IE3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasOpinionOfSustainableFoodConsumptionInitiativesValue "Opinion of sustainable food consumption initiatives/cooperatives (e.g. Zocamiñoca etc)"@en)
SubDataPropertyOf(:hasOpinionOfSustainableFoodConsumptionInitiativesValue :hasIEValue)

# Data Property: :hasOpinionOfSwappingAndTradingClothesValue (Opinon of swapping and trading clothesinitiatives (e.g. Vinted))

AnnotationAssertion(rdfs:comment :hasOpinionOfSwappingAndTradingClothesValue "IE7"^^xsd:string)
AnnotationAssertion(rdfs:label :hasOpinionOfSwappingAndTradingClothesValue "Opinon of swapping and trading clothesinitiatives (e.g. Vinted)"@en)
SubDataPropertyOf(:hasOpinionOfSwappingAndTradingClothesValue :hasIEValue)

# Data Property: :hasPNValue (:hasPNValue)

AnnotationAssertion(rdfs:comment :hasPNValue "Ascending: 1 -Totally agree → 7 - Totally disagree"@en)
AnnotationAssertion(rdfs:comment :hasPNValue "PN"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasPNValue "has personal norms value"@en)
DataPropertyDomain(:hasPNValue :Person)
DataPropertyRange(:hasPNValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue (Percentage of produced electricity)

AnnotationAssertion(rdfs:comment :hasPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue "EU8b_other"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue "Percentage of produced electricity"@en)
SubDataPropertyOf(:hasPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue :hasEU8Value)
DataPropertyDomain(:hasPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue :HomeGeneratedElectricity)
DataPropertyDomain(:hasPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue ObjectSomeValuesFrom(:isUsedBy DataHasValue(:hasProducingSolarGeneratedElectricityValue "1"^^xsd:integer)))
DataPropertyRange(:hasPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue DatatypeRestriction(xsd:nonNegativeInteger xsd:maxInclusive "100"^^xsd:nonNegativeInteger))

# Data Property: :hasPersonalConsumptionReductionWouldMakeNoDifferenceValue (Even if I reduce unsustainable consumption in my life, I doubt it will make a difference)

AnnotationAssertion(rdfs:comment :hasPersonalConsumptionReductionWouldMakeNoDifferenceValue "SE5"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPersonalConsumptionReductionWouldMakeNoDifferenceValue "Even if I reduce unsustainable consumption in my life, I doubt it will make a difference"@en)
SubDataPropertyOf(:hasPersonalConsumptionReductionWouldMakeNoDifferenceValue :hasSEValue)

# Data Property: :hasPersonallyImportantPeopleActInAnEnvironmentallyResponsibleWayValue (Most people who are important to me act in an ecologically-responsible way in their everyday life)

AnnotationAssertion(rdfs:comment :hasPersonallyImportantPeopleActInAnEnvironmentallyResponsibleWayValue "SN5"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPersonallyImportantPeopleActInAnEnvironmentallyResponsibleWayValue "Most people who are important to me act in an ecologically-responsible way in their everyday life"@en)
SubDataPropertyOf(:hasPersonallyImportantPeopleActInAnEnvironmentallyResponsibleWayValue :hasSNValue)

# Data Property: :hasPersonallyImportantPeopleBelieveIShouldActInEnvironmentallyResponsibleWayValue (Most people who are important to me  think I should act in an ecologically responsible way in my everyday life)

AnnotationAssertion(rdfs:comment :hasPersonallyImportantPeopleBelieveIShouldActInEnvironmentallyResponsibleWayValue "SN6"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPersonallyImportantPeopleBelieveIShouldActInEnvironmentallyResponsibleWayValue "Most people who are important to me  think I should act in an ecologically responsible way in my everyday life"@en)
SubDataPropertyOf(:hasPersonallyImportantPeopleBelieveIShouldActInEnvironmentallyResponsibleWayValue :hasSNValue)

# Data Property: :hasPersonallyImportantPeopleBelieveIShouldTryToReduceConsumptionValue (Most people who are important to me think I should actively try to reduce consumption in my life)

AnnotationAssertion(rdfs:comment :hasPersonallyImportantPeopleBelieveIShouldTryToReduceConsumptionValue "SN4"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPersonallyImportantPeopleBelieveIShouldTryToReduceConsumptionValue "Most people who are important to me think I should actively try to reduce consumption in my life"@en)
SubDataPropertyOf(:hasPersonallyImportantPeopleBelieveIShouldTryToReduceConsumptionValue :hasSNValue)

# Data Property: :hasPersonallyImportantPeopleBelieveThatIShouldHaveABusyLifeValue (Most people who are important to me think I should have a busy life and little free time)

AnnotationAssertion(rdfs:comment :hasPersonallyImportantPeopleBelieveThatIShouldHaveABusyLifeValue "SN2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPersonallyImportantPeopleBelieveThatIShouldHaveABusyLifeValue "Most people who are important to me think I should have a busy life and little free time"@en)
SubDataPropertyOf(:hasPersonallyImportantPeopleBelieveThatIShouldHaveABusyLifeValue :hasSNValue)

# Data Property: :hasPersonallyImportantPeopleHaveTooLittleTimeValue (Most people who are important to me have very busy lives and little free time)

AnnotationAssertion(rdfs:comment :hasPersonallyImportantPeopleHaveTooLittleTimeValue "SN1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPersonallyImportantPeopleHaveTooLittleTimeValue "Most people who are important to me have very busy lives and little free time"@en)
SubDataPropertyOf(:hasPersonallyImportantPeopleHaveTooLittleTimeValue :hasSNValue)

# Data Property: :hasPersonallyImportantPeopleTryToReduceConsumptionValue (Most people who are important to me actively try to reduce consumption in their lives)

AnnotationAssertion(rdfs:comment :hasPersonallyImportantPeopleTryToReduceConsumptionValue "SN3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPersonallyImportantPeopleTryToReduceConsumptionValue "Most people who are important to me actively try to reduce consumption in their lives"@en)
SubDataPropertyOf(:hasPersonallyImportantPeopleTryToReduceConsumptionValue :hasSNValue)

# Data Property: :hasPlentyOfSpareTimeInTheLastYearValue (I have had plenty of spare time)

AnnotationAssertion(rdfs:comment :hasPlentyOfSpareTimeInTheLastYearValue "TA2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPlentyOfSpareTimeInTheLastYearValue "I have had plenty of spare time"@en)
SubDataPropertyOf(:hasPlentyOfSpareTimeInTheLastYearValue :hasTAValue)

# Data Property: :hasPolitcalSpectrumValue (Where would you place yourself on the political spectrum)

AnnotationAssertion(rdfs:comment :hasPolitcalSpectrumValue "Ascending: 1 - Rather to the left → 7 - Rather to the right"@en)
AnnotationAssertion(rdfs:comment :hasPolitcalSpectrumValue "SD8"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPolitcalSpectrumValue "Where would you place yourself on the political spectrum"@en)
SubDataPropertyOf(:hasPolitcalSpectrumValue :hasSDValue)
DataPropertyDomain(:hasPolitcalSpectrumValue :Person)
DataPropertyRange(:hasPolitcalSpectrumValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasPrivateTrip1DistanceKilometresValue (Distance covered approximately per return trip  for private trip 1)

AnnotationAssertion(rdfs:comment :hasPrivateTrip1DistanceKilometresValue "MB2.a4"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPrivateTrip1DistanceKilometresValue "Distance covered approximately per return trip  for private trip 1"@en)
SubDataPropertyOf(:hasPrivateTrip1DistanceKilometresValue :hasMB2aValue)
DataPropertyRange(:hasPrivateTrip1DistanceKilometresValue xsd:decimal)

# Data Property: :hasPrivateTrip1MeansOfTransportValue (Means of transportation for private trip 1)

AnnotationAssertion(rdfs:comment :hasPrivateTrip1MeansOfTransportValue "1 → Walking
2 → Bicycle
3 → Electric bicycle
4 → Motorbike
5 → Car
6 → Bus
7 → Tram/Underground
8 → Commuter train/short distance
9 → Other"@en)
AnnotationAssertion(rdfs:comment :hasPrivateTrip1MeansOfTransportValue "MB2.a2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPrivateTrip1MeansOfTransportValue "Means of transportation for private trip 1"@en)
SubDataPropertyOf(:hasPrivateTrip1MeansOfTransportValue :hasMB2aValue)
SubDataPropertyOf(:hasPrivateTrip1MeansOfTransportValue :journeyHasMeansOfTransportationValue)

# Data Property: :hasPrivateTrip1NumberOfTripsPerWeekValue (Number of return trips for private trip 1)

AnnotationAssertion(rdfs:comment :hasPrivateTrip1NumberOfTripsPerWeekValue "MB2.a3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPrivateTrip1NumberOfTripsPerWeekValue "Number of return trips for private trip 1"@en)
SubDataPropertyOf(:hasPrivateTrip1NumberOfTripsPerWeekValue :hasMB2aValue)
DataPropertyRange(:hasPrivateTrip1NumberOfTripsPerWeekValue xsd:nonNegativeInteger)

# Data Property: :hasPrivateTrip1PurposeValue (Purpose of the private trip 1)

AnnotationAssertion(rdfs:comment :hasPrivateTrip1PurposeValue "MB2.a1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPrivateTrip1PurposeValue "Purpose of the private trip 1"@en)
SubDataPropertyOf(:hasPrivateTrip1PurposeValue :hasMB2aValue)
DataPropertyRange(:hasPrivateTrip1PurposeValue xsd:string)

# Data Property: :hasPrivateTrip2DistanceKilometresValue (Distance covered approximately per return trip  for private trip 2)

AnnotationAssertion(rdfs:comment :hasPrivateTrip2DistanceKilometresValue "MB2.b4"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPrivateTrip2DistanceKilometresValue "Distance covered approximately per return trip  for private trip 2"@en)
SubDataPropertyOf(:hasPrivateTrip2DistanceKilometresValue :hasMB2bValue)
DataPropertyRange(:hasPrivateTrip2DistanceKilometresValue xsd:decimal)

# Data Property: :hasPrivateTrip2MeansOfTransportValue (Means of transportation for private trip 2)

AnnotationAssertion(rdfs:comment :hasPrivateTrip2MeansOfTransportValue "1 → Walking
2 → Bicycle
3 → Electric bicycle
4 → Motorbike
5 → Car
6 → Bus
7 → Tram/Underground
8 → Commuter train/short distance
9 → Other"@en)
AnnotationAssertion(rdfs:comment :hasPrivateTrip2MeansOfTransportValue "MB2.b2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPrivateTrip2MeansOfTransportValue "Means of transportation for private trip 2"@en)
SubDataPropertyOf(:hasPrivateTrip2MeansOfTransportValue :hasMB2bValue)
SubDataPropertyOf(:hasPrivateTrip2MeansOfTransportValue :journeyHasMeansOfTransportationValue)

# Data Property: :hasPrivateTrip2NumberOfTripsPerWeekValue (Number of return trips for private trip 2)

AnnotationAssertion(rdfs:comment :hasPrivateTrip2NumberOfTripsPerWeekValue "MB2.b3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPrivateTrip2NumberOfTripsPerWeekValue "Number of return trips for private trip 2"@en)
SubDataPropertyOf(:hasPrivateTrip2NumberOfTripsPerWeekValue :hasMB2bValue)
DataPropertyRange(:hasPrivateTrip2NumberOfTripsPerWeekValue xsd:nonNegativeInteger)

# Data Property: :hasPrivateTrip2PurposeValue (Purpose of the private trip 2)

AnnotationAssertion(rdfs:comment :hasPrivateTrip2PurposeValue "MB2.b1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPrivateTrip2PurposeValue "Purpose of the private trip 2"@en)
SubDataPropertyOf(:hasPrivateTrip2PurposeValue :hasMB2bValue)
DataPropertyRange(:hasPrivateTrip2PurposeValue xsd:string)

# Data Property: :hasPrivateTrip3DistanceKilometresValue (Distance covered approximately per return trip  for private trip 3)

AnnotationAssertion(rdfs:comment :hasPrivateTrip3DistanceKilometresValue "MB2.c4"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPrivateTrip3DistanceKilometresValue "Distance covered approximately per return trip  for private trip 3"@en)
SubDataPropertyOf(:hasPrivateTrip3DistanceKilometresValue :hasMB2cValue)
DataPropertyRange(:hasPrivateTrip3DistanceKilometresValue xsd:decimal)

# Data Property: :hasPrivateTrip3MeansOfTransportValue (Means of transportation for private trip 3)

AnnotationAssertion(rdfs:comment :hasPrivateTrip3MeansOfTransportValue "1 → Walking
2 → Bicycle
3 → Electric bicycle
4 → Motorbike
5 → Car
6 → Bus
7 → Tram/Underground
8 → Commuter train/short distance
9 → Other"@en)
AnnotationAssertion(rdfs:comment :hasPrivateTrip3MeansOfTransportValue "MB2c.2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPrivateTrip3MeansOfTransportValue "Means of transportation for private trip 3"@en)
SubDataPropertyOf(:hasPrivateTrip3MeansOfTransportValue :hasMB2cValue)
SubDataPropertyOf(:hasPrivateTrip3MeansOfTransportValue :journeyHasMeansOfTransportationValue)

# Data Property: :hasPrivateTrip3NumberOfTripsPerWeekValue (Number of return trips for private trip 3)

AnnotationAssertion(rdfs:comment :hasPrivateTrip3NumberOfTripsPerWeekValue "MB2.c3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPrivateTrip3NumberOfTripsPerWeekValue "Number of return trips for private trip 3"@en)
SubDataPropertyOf(:hasPrivateTrip3NumberOfTripsPerWeekValue :hasMB2cValue)
DataPropertyRange(:hasPrivateTrip3NumberOfTripsPerWeekValue xsd:nonNegativeInteger)

# Data Property: :hasPrivateTrip3PurposeValue (Purpose of the private trip 3)

AnnotationAssertion(rdfs:comment :hasPrivateTrip3PurposeValue "MB2.c1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPrivateTrip3PurposeValue "Purpose of the private trip 3"@en)
SubDataPropertyOf(:hasPrivateTrip3PurposeValue :hasMB2cValue)
DataPropertyRange(:hasPrivateTrip3PurposeValue xsd:string)

# Data Property: :hasProducingSolarGeneratedElectricityValue (Do you produce any electricity yourself (e.g. with a solar panel on your roof))

AnnotationAssertion(rdfs:comment :hasProducingSolarGeneratedElectricityValue "1 → Yes
2 → No"@en)
AnnotationAssertion(rdfs:comment :hasProducingSolarGeneratedElectricityValue "EU8"^^xsd:string)
AnnotationAssertion(rdfs:label :hasProducingSolarGeneratedElectricityValue "Do you produce any electricity yourself (e.g. with a solar panel on your roof)"@en)
SubDataPropertyOf(:hasProducingSolarGeneratedElectricityValue :hasEU8Value)
DataPropertyDomain(:hasProducingSolarGeneratedElectricityValue :Household)
DataPropertyRange(:hasProducingSolarGeneratedElectricityValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "2"^^xsd:integer))

# Data Property: :hasPurchaseClothesFromSecondhandShopsValue (Purchase clothes from second-hand shops)

AnnotationAssertion(rdfs:comment :hasPurchaseClothesFromSecondhandShopsValue "SB2c"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPurchaseClothesFromSecondhandShopsValue "Purchase clothes from second-hand shops"@en)
SubDataPropertyOf(:hasPurchaseClothesFromSecondhandShopsValue :hasSB2Value)
DataPropertyDomain(:hasPurchaseClothesFromSecondhandShopsValue ObjectSomeValuesFrom(:buys ObjectSomeValuesFrom(:isSoldBy :SecondHandShop)))

# Data Property: :hasPurchaseClothesMadeInASustainableMannerValue (Purchase clothes that are produced in a sustainable way)

AnnotationAssertion(rdfs:comment :hasPurchaseClothesMadeInASustainableMannerValue "SB2d"^^xsd:string)
AnnotationAssertion(rdfs:label :hasPurchaseClothesMadeInASustainableMannerValue "Purchase clothes that are produced in a sustainable way"@en)
SubDataPropertyOf(:hasPurchaseClothesMadeInASustainableMannerValue :hasSB2Value)
DataPropertyDomain(:hasPurchaseClothesMadeInASustainableMannerValue ObjectSomeValuesFrom(:buys :SustainableClothing))

# Data Property: :hasQualityOfInsulationInHomeValue (Thinking about the quality of the thermal insulation of your home, would you say)

AnnotationAssertion(rdfs:comment :hasQualityOfInsulationInHomeValue "Ascending: 1 - Very bad → 7 - Very good"@en)
AnnotationAssertion(rdfs:comment :hasQualityOfInsulationInHomeValue "EU11"^^xsd:string)
AnnotationAssertion(rdfs:label :hasQualityOfInsulationInHomeValue "Thinking about the quality of the thermal insulation of your home, would you say"@en)
SubDataPropertyOf(:hasQualityOfInsulationInHomeValue :hasEUValue)
DataPropertyDomain(:hasQualityOfInsulationInHomeValue :HomeInsulation)
DataPropertyRange(:hasQualityOfInsulationInHomeValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasRecycleGlassValue (Recycle glass)

AnnotationAssertion(rdfs:comment :hasRecycleGlassValue "FC5a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasRecycleGlassValue "Recycle glass"@en)
SubDataPropertyOf(:hasRecycleGlassValue :hasFC5Value)
DataPropertyDomain(:hasRecycleGlassValue :Glass)

# Data Property: :hasRecyclesBatteriesValue (Recycle batteries)

AnnotationAssertion(rdfs:comment :hasRecyclesBatteriesValue "FC5e"^^xsd:string)
AnnotationAssertion(rdfs:label :hasRecyclesBatteriesValue "Recycle batteries"@en)
SubDataPropertyOf(:hasRecyclesBatteriesValue :hasFC5Value)
DataPropertyDomain(:hasRecyclesBatteriesValue :Batteries)

# Data Property: :hasReductionOfUnsustainableBehavioursIsEasyValue (Reducing unsustainable consumption in my life is easy)

AnnotationAssertion(rdfs:comment :hasReductionOfUnsustainableBehavioursIsEasyValue "SE6"^^xsd:string)
AnnotationAssertion(rdfs:label :hasReductionOfUnsustainableBehavioursIsEasyValue "Reducing unsustainable consumption in my life is easy"@en)
SubDataPropertyOf(:hasReductionOfUnsustainableBehavioursIsEasyValue :hasSEValue)

# Data Property: :hasRequirementToEngageInSustainabilityDueToPrinciplesValue (Based on my personal values I feel obliged to engage in a sustainable society)

AnnotationAssertion(rdfs:comment :hasRequirementToEngageInSustainabilityDueToPrinciplesValue "PN2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasRequirementToEngageInSustainabilityDueToPrinciplesValue "Based on my personal values I feel obliged to engage in a sustainable society"@en)
SubDataPropertyOf(:hasRequirementToEngageInSustainabilityDueToPrinciplesValue :hasPNValue)

# Data Property: :hasReuseShoppingBagsValue (Refuse plastic bags in supermarket or take your own bag from home)

AnnotationAssertion(rdfs:comment :hasReuseShoppingBagsValue "FC5d"^^xsd:string)
AnnotationAssertion(rdfs:label :hasReuseShoppingBagsValue "Refuse plastic bags in supermarket or take your own bag from home"@en)
SubDataPropertyOf(:hasReuseShoppingBagsValue :hasFC5Value)
DataPropertyDomain(:hasReuseShoppingBagsValue :PlasticBags)

# Data Property: :hasSB2Value (How often do you do the following things)

AnnotationAssertion(rdfs:comment :hasSB2Value "Ascending: 1 - Never → 7 - Always"@en)
AnnotationAssertion(rdfs:comment :hasSB2Value "SB2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSB2Value "How often do you do the following things"@en)
SubDataPropertyOf(:hasSB2Value :hasSBValue)
DataPropertyDomain(:hasSB2Value :Person)
DataPropertyRange(:hasSB2Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasSBValue (:hasSBValue)

AnnotationAssertion(rdfs:comment :hasSBValue "DONE"@en)
AnnotationAssertion(rdfs:comment :hasSBValue "has clothing value"@en)

# Data Property: :hasSD11Value (:hasSD11Value)

AnnotationAssertion(rdfs:comment :hasSD11Value "Personal dimension"@en)
AnnotationAssertion(rdfs:comment :hasSD11Value "SD11"^^xsd:string)
SubDataPropertyOf(:hasSD11Value :hasSDValue)
DataPropertyDomain(:hasSD11Value :Person)
DataPropertyRange(:hasSD11Value xsd:nonNegativeInteger)

# Data Property: :hasSD9Value (:hasSD9Value)

AnnotationAssertion(rdfs:comment :hasSD9Value "SD9"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSD9Value "Work time value"@en)
SubDataPropertyOf(:hasSD9Value :hasSDValue)
DataPropertyRange(:hasSD9Value xsd:time)

# Data Property: :hasSDValue (:hasSDValue)

AnnotationAssertion(rdfs:comment :hasSDValue "DONE"@en)
AnnotationAssertion(rdfs:comment :hasSDValue "has demographic value"@en)

# Data Property: :hasSEValue (:hasSEValue)

AnnotationAssertion(rdfs:comment :hasSEValue "Ascending: 1 -Totally agree → 7 - Totally disagree")
AnnotationAssertion(rdfs:comment :hasSEValue "SE"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSEValue "has self-efficacy value"@en)
DataPropertyDomain(:hasSEValue :SelfEfficacy)
DataPropertyRange(:hasSEValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasSNValue (:hasSNValue)

AnnotationAssertion(rdfs:comment :hasSNValue "Ascending: 1 -Totally agree → 7 - Totally disagree"@en)
AnnotationAssertion(rdfs:comment :hasSNValue "SN"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSNValue "has social norms value"@en)
DataPropertyDomain(:hasSNValue :SocialNorm)
DataPropertyRange(:hasSNValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasSSValue (:hasSSValue)

AnnotationAssertion(rdfs:comment :hasSSValue "Ascending: 1 -No importance → 7 - Guiding principle"@en)
AnnotationAssertion(rdfs:comment :hasSSValue "SS"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasSSValue "has Schwarz scale value"@en)
DataPropertyDomain(:hasSSValue :SchwarzScale)
DataPropertyRange(:hasSSValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasSatificationWithNeighboursValue (For the most part, I feel satisfied with my neighbours)

AnnotationAssertion(rdfs:comment :hasSatificationWithNeighboursValue "NQ1c"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSatificationWithNeighboursValue "For the most part, I feel satisfied with my neighbours"@en)
SubDataPropertyOf(:hasSatificationWithNeighboursValue :hasNQ1Value)
DataPropertyDomain(:hasSatificationWithNeighboursValue ObjectSomeValuesFrom(:isSatisfiedBy :Neighbour))

# Data Property: :hasSatisfactionWithHouseValue (For the most part, I feel satisfied with the house I live in)

AnnotationAssertion(rdfs:comment :hasSatisfactionWithHouseValue "NQ1a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSatisfactionWithHouseValue "For the most part, I feel satisfied with the house I live in"@en)
SubDataPropertyOf(:hasSatisfactionWithHouseValue :hasNQ1Value)
DataPropertyDomain(:hasSatisfactionWithHouseValue ObjectSomeValuesFrom(:isSatisfiedBy :Dwelling))

# Data Property: :hasSatisfactionWithLeisureTime (How satisfied are you with the amount of time you spend on leisure activities)

AnnotationAssertion(rdfs:comment :hasSatisfactionWithLeisureTime "Ascending: 1 - Not satisfied at all  → 7 - Completely satisfied"@en)
AnnotationAssertion(rdfs:comment :hasSatisfactionWithLeisureTime "WL4"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSatisfactionWithLeisureTime "How satisfied are you with the amount of time you spend on leisure activities"@en)
SubDataPropertyOf(:hasSatisfactionWithLeisureTime :hasWLValue)
DataPropertyDomain(:hasSatisfactionWithLeisureTime :LeisureTime)
DataPropertyRange(:hasSatisfactionWithLeisureTime DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasSatisfactionWithNeighbourhoodValue (For the most part, I feel satisfied with my neighbourhood)

AnnotationAssertion(rdfs:comment :hasSatisfactionWithNeighbourhoodValue "NQ1b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSatisfactionWithNeighbourhoodValue "For the most part, I feel satisfied with my neighbourhood"@en)
SubDataPropertyOf(:hasSatisfactionWithNeighbourhoodValue :hasNQ1Value)
DataPropertyDomain(:hasSatisfactionWithNeighbourhoodValue ObjectSomeValuesFrom(:isSatisfiedBy :Neighbourhood))

# Data Property: :hasSatisfactionWithWorkLifeBalance (How satisfied are you with the balance between time you spend on your paid work and the time you spend on other aspects of your life)

AnnotationAssertion(rdfs:comment :hasSatisfactionWithWorkLifeBalance "Ascending: 1 - Not satisfied at all  → 7 - Completely satisfied"@en)
AnnotationAssertion(rdfs:comment :hasSatisfactionWithWorkLifeBalance "WL3"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSatisfactionWithWorkLifeBalance "How satisfied are you with the balance between time you spend on your paid work and the time you spend on other aspects of your life"@en)
SubDataPropertyOf(:hasSatisfactionWithWorkLifeBalance :hasWLValue)
DataPropertyDomain(:hasSatisfactionWithWorkLifeBalance :Times)
DataPropertyRange(:hasSatisfactionWithWorkLifeBalance DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasSatisfiedWithLifeValue (I am satisfied with my life)

AnnotationAssertion(rdfs:comment :hasSatisfiedWithLifeValue "WB1c"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSatisfiedWithLifeValue "I am satisfied with my life"@en)
SubDataPropertyOf(:hasSatisfiedWithLifeValue :hasWB1Value)

# Data Property: :hasSeparateOrganicWasteValue (Separate organic waste)

AnnotationAssertion(rdfs:comment :hasSeparateOrganicWasteValue "FC5c"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSeparateOrganicWasteValue "Separate organic waste"@en)
SubDataPropertyOf(:hasSeparateOrganicWasteValue :hasFC5Value)
DataPropertyDomain(:hasSeparateOrganicWasteValue :OrganicWaste)

# Data Property: :hasSeparatesPlasticValue (Separate plastic)

AnnotationAssertion(rdfs:comment :hasSeparatesPlasticValue "FC5b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSeparatesPlasticValue "Separate plastic"@en)
SubDataPropertyOf(:hasSeparatesPlasticValue :hasFC5Value)
DataPropertyDomain(:hasSeparatesPlasticValue :Plastic)

# Data Property: :hasSimpleThingsThatWillMeaninglyAlleviateGlobalWarmingValue (There are simple things I can do that will have a meaningful effect to alleviate global warming)

AnnotationAssertion(rdfs:comment :hasSimpleThingsThatWillMeaninglyAlleviateGlobalWarmingValue "SE1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSimpleThingsThatWillMeaninglyAlleviateGlobalWarmingValue "There are simple things I can do that will have a meaningful effect to alleviate global warming"@en)
SubDataPropertyOf(:hasSimpleThingsThatWillMeaninglyAlleviateGlobalWarmingValue :hasSEValue)

# Data Property: :hasSizeOfCurrentResidenceInSquareMetresValue (House size in square meters)

AnnotationAssertion(rdfs:comment :hasSizeOfCurrentResidenceInSquareMetresValue "EU1_a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSizeOfCurrentResidenceInSquareMetresValue "House size in square meters"@en)
SubDataPropertyOf(:hasSizeOfCurrentResidenceInSquareMetresValue :hasEU1Value)

# Data Property: :hasSolarOrThermalHeating (Solar/thermal for heating)

AnnotationAssertion(rdfs:comment :hasSolarOrThermalHeating "EU7Home_g"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSolarOrThermalHeating "Solar/thermal for heating"@en)
SubDataPropertyOf(:hasSolarOrThermalHeating :hasEU7Value)
DataPropertyDomain(:hasSolarOrThermalHeating DataHasValue(:doesNotHeatHome "false"^^xsd:boolean))
DataPropertyDomain(:hasSolarOrThermalHeating DataHasValue(:doesNotKnowHowHouseIsHeated "false"^^xsd:boolean))

# Data Property: :hasSolarOrThermalHotWaterHeating (Solar/thermal heating for water heating)

AnnotationAssertion(rdfs:comment :hasSolarOrThermalHotWaterHeating "EU7Home_h"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSolarOrThermalHotWaterHeating "Solar/thermal heating for water heating"@en)
SubDataPropertyOf(:hasSolarOrThermalHotWaterHeating :hasEU7Value)
DataPropertyDomain(:hasSolarOrThermalHotWaterHeating DataHasValue(:doesNotHeatWater "false"^^xsd:boolean))
DataPropertyDomain(:hasSolarOrThermalHotWaterHeating DataHasValue(:doesNotKnowHowWaterIsHeated "false"^^xsd:boolean))

# Data Property: :hasSourceOfHomeGenerationOfElectricityValue (Please indicate the source of your electricity production and the total percentage of electricity you produce)

AnnotationAssertion(rdfs:comment :hasSourceOfHomeGenerationOfElectricityValue "1 → Solar cell panel
2 → Wind turbine
3 → Gas turbine
4 → Diesel generator
5 → Other"@en)
AnnotationAssertion(rdfs:comment :hasSourceOfHomeGenerationOfElectricityValue "EU8a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSourceOfHomeGenerationOfElectricityValue "Please indicate the source of your electricity production and the total percentage of electricity you produce"@en)
SubDataPropertyOf(:hasSourceOfHomeGenerationOfElectricityValue :hasEU8Value)
DataPropertyDomain(:hasSourceOfHomeGenerationOfElectricityValue :HomeGeneratedElectricity)
DataPropertyDomain(:hasSourceOfHomeGenerationOfElectricityValue ObjectSomeValuesFrom(:isUsedBy DataHasValue(:hasProducingSolarGeneratedElectricityValue "1"^^xsd:integer)))
DataPropertyRange(:hasSourceOfHomeGenerationOfElectricityValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "5"^^xsd:integer))

# Data Property: :hasSquareMetersOfGardenValue (How many square meters does your garden have)

AnnotationAssertion(rdfs:comment :hasSquareMetersOfGardenValue "EU4b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSquareMetersOfGardenValue "How many square meters does your garden have"@en)
SubDataPropertyOf(:hasSquareMetersOfGardenValue :hasEU4Value)
DataPropertyDomain(:hasSquareMetersOfGardenValue :Garden)
DataPropertyDomain(:hasSquareMetersOfGardenValue DataHasValue(:ownsAGardenValue "true"^^xsd:boolean))
DataPropertyRange(:hasSquareMetersOfGardenValue xsd:positiveInteger)

# Data Property: :hasSustainableLifeDueToPrinciplesValue (Due to my personal values, I feel obliged to lead a sustainable lifestyle)

AnnotationAssertion(rdfs:comment :hasSustainableLifeDueToPrinciplesValue "PN1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasSustainableLifeDueToPrinciplesValue "Due to my personal values, I feel obliged to lead a sustainable lifestyle"@en)
SubDataPropertyOf(:hasSustainableLifeDueToPrinciplesValue :hasPNValue)

# Data Property: :hasTAValue (:hasTAValue)

AnnotationAssertion(rdfs:comment :hasTAValue "Ascending: 1 -Totally agree → 7 - Totally disagree"@en)
AnnotationAssertion(rdfs:comment :hasTAValue "TA"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTAValue "Time pressure in the last year"@en)
AnnotationAssertion(rdfs:comment :hasTAValue "has time affluence value"@en)
DataPropertyDomain(:hasTAValue :TimeAffluence)
DataPropertyRange(:hasTAValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasTIValue (:hasTIValue)

AnnotationAssertion(rdfs:comment :hasTIValue "Ascending: 1 -Totally agree → 7 - Totally disagree"@en)
AnnotationAssertion(rdfs:comment :hasTIValue "TI"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasTIValue "has attitudes towards technological innovations value"@en)
DataPropertyDomain(:hasTIValue :AttituteToTechnicalInnovation)
DataPropertyRange(:hasTIValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasTheAbilityToDoSimpleThingsToReduceConsumptionValue (There are simple things I can do to reduce unsustainable consumption in my life)

AnnotationAssertion(rdfs:comment :hasTheAbilityToDoSimpleThingsToReduceConsumptionValue "SE4"^^xsd:string)
AnnotationAssertion(rdfs:label :hasTheAbilityToDoSimpleThingsToReduceConsumptionValue "There are simple things I can do to reduce unsustainable consumption in my life"@en)
SubDataPropertyOf(:hasTheAbilityToDoSimpleThingsToReduceConsumptionValue :hasSEValue)

# Data Property: :hasTime (:hasTime)

DataPropertyRange(:hasTime xsd:decimal)

# Data Property: :hasTurningOffHeatingSystemDuringAverageWeekValue (During the cold season, how often do you turn on the heating system, during an average week)

AnnotationAssertion(rdfs:comment :hasTurningOffHeatingSystemDuringAverageWeekValue "1 → Never
2 → Only cold days
3 → Everyday, but only when staying at home
4 → It is always on"@en)
AnnotationAssertion(rdfs:comment :hasTurningOffHeatingSystemDuringAverageWeekValue "EU9a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasTurningOffHeatingSystemDuringAverageWeekValue "During the cold season, how often do you turn on the heating system, during an average week"@en)
SubDataPropertyOf(:hasTurningOffHeatingSystemDuringAverageWeekValue :hasEU9Value)
DataPropertyRange(:hasTurningOffHeatingSystemDuringAverageWeekValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "4"^^xsd:integer))

# Data Property: :hasTypeOfAccommodationForPrivateTravelOtherValue (Value for other is selected for   travel out of town for private reasons, then what type of accommodation do you normally stay in)

AnnotationAssertion(rdfs:comment :hasTypeOfAccommodationForPrivateTravelOtherValue "MB10a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasTypeOfAccommodationForPrivateTravelOtherValue "Value for other is selected for   travel out of town for private reasons, then what type of accommodation do you normally stay in"@en)
SubDataPropertyOf(:hasTypeOfAccommodationForPrivateTravelOtherValue :hasMBValue)
DataPropertyDomain(:hasTypeOfAccommodationForPrivateTravelOtherValue :OtherTypeOfAccomodation)
DataPropertyDomain(:hasTypeOfAccommodationForPrivateTravelOtherValue DataHasValue(:hasTypeOfAccommodationForPrivateTravelValue "9"^^xsd:integer))
DataPropertyRange(:hasTypeOfAccommodationForPrivateTravelOtherValue xsd:string)

# Data Property: :hasTypeOfAccommodationForPrivateTravelValue (When you travel out of town for private reasons, in what type of accommodation do you normally stay in? (indicate your most frequent choice))

AnnotationAssertion(rdfs:comment :hasTypeOfAccommodationForPrivateTravelValue "1 → Hotel  
2 → Aparthotel  
3 → Airbnb apartment (or similar scheme of accommodation)  
4 → Ecotourism  
5 → Bed and Breakfast 
6 → Youth hostels / hostels 
7 → Camping site
8 → Staying in friends’ home 
9 → Other"@en)
AnnotationAssertion(rdfs:comment :hasTypeOfAccommodationForPrivateTravelValue "MB10"^^xsd:string)
AnnotationAssertion(rdfs:label :hasTypeOfAccommodationForPrivateTravelValue "When you travel out of town for private reasons, in what type of accommodation do you normally stay in? (indicate your most frequent choice)"@en)
SubDataPropertyOf(:hasTypeOfAccommodationForPrivateTravelValue :hasMBValue)
DataPropertyDomain(:hasTypeOfAccommodationForPrivateTravelValue :Person)
DataPropertyRange(:hasTypeOfAccommodationForPrivateTravelValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "9"^^xsd:integer))

# Data Property: :hasTypeOfDwellingValue (Please indicate the type of dwelling)

AnnotationAssertion(rdfs:comment :hasTypeOfDwellingValue "1 → Single family house
2 → Terraced house (identical houses in a row)
3 → Multi-family house (less than 10 families in one complex)
4 → Apartment block (more than 10 dwellings)"@en)
AnnotationAssertion(rdfs:comment :hasTypeOfDwellingValue "EU2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasTypeOfDwellingValue "Please indicate the type of dwelling"@en)
SubDataPropertyOf(:hasTypeOfDwellingValue :hasEUValue)
DataPropertyDomain(:hasTypeOfDwellingValue :Person)
DataPropertyRange(:hasTypeOfDwellingValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "4"^^xsd:integer))

# Data Property: :hasUseOfWashingMachineForConvenienceValue (How often do you use the washing machine for clothes because it fits your schedule or because you are in a hurry, even though you do not have a full load)

AnnotationAssertion(rdfs:comment :hasUseOfWashingMachineForConvenienceValue "Ascending: 1 - Never → 7 - Always"@en)
AnnotationAssertion(rdfs:comment :hasUseOfWashingMachineForConvenienceValue "EU12"^^xsd:string)
AnnotationAssertion(rdfs:label :hasUseOfWashingMachineForConvenienceValue "How often do you use the washing machine for clothes because it fits your schedule or because you are in a hurry, even though you do not have a full load"@en)
SubDataPropertyOf(:hasUseOfWashingMachineForConvenienceValue :hasEUValue)
DataPropertyDomain(:hasUseOfWashingMachineForConvenienceValue :WashingMachine)
DataPropertyRange(:hasUseOfWashingMachineForConvenienceValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasViewOfSelfAsEnvironmentallyFriendlyConsumerValue (I see myself as an environmentally friendly consumer)

AnnotationAssertion(rdfs:comment :hasViewOfSelfAsEnvironmentallyFriendlyConsumerValue "ID2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasViewOfSelfAsEnvironmentallyFriendlyConsumerValue "I see myself as an environmentally friendly consumer"@en)
SubDataPropertyOf(:hasViewOfSelfAsEnvironmentallyFriendlyConsumerValue :hasIDValue)

# Data Property: :hasWB1Value (Life satisfaction)

AnnotationAssertion(rdfs:comment :hasWB1Value "Ascending: 1 - Totally disagree → 7 - Totally agree"@en)
AnnotationAssertion(rdfs:comment :hasWB1Value "WB1"^^xsd:string)
AnnotationAssertion(rdfs:label :hasWB1Value "Life satisfaction"@en)
SubDataPropertyOf(:hasWB1Value :hasWBValue)
DataPropertyRange(:hasWB1Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasWB2Value (Mental outllook)

AnnotationAssertion(rdfs:comment :hasWB2Value "Ascending: 1 - Totally disagree → 7 - Totally agree"@en)
AnnotationAssertion(rdfs:label :hasWB2Value "Mental outllook"@en)
AnnotationAssertion(rdfs:label :hasWB2Value "WB2"^^xsd:string)
SubDataPropertyOf(:hasWB2Value :hasWBValue)
DataPropertyRange(:hasWB2Value DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "7"^^xsd:integer))

# Data Property: :hasWBValue (:hasWBValue)

AnnotationAssertion(rdfs:comment :hasWBValue "WB"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasWBValue "has satisfaction with life/WHO-5 well-being index value"@en)
DataPropertyDomain(:hasWBValue :WellBeing)

# Data Property: :hasWL1value (Current employment status)

AnnotationAssertion(rdfs:label :hasWL1value "Current employment status"@en)
SubDataPropertyOf(:hasWL1value :hasWLValue)

# Data Property: :hasWL2Value (Volunteer work)

AnnotationAssertion(rdfs:comment :hasWL2Value "WL2"^^xsd:string)
AnnotationAssertion(rdfs:label :hasWL2Value "Volunteer work"@en)
SubDataPropertyOf(:hasWL2Value :hasWLValue)

# Data Property: :hasWLValue (:hasWLValue)

AnnotationAssertion(rdfs:comment :hasWLValue "DONE"@en)
AnnotationAssertion(rdfs:comment :hasWLValue "WL"^^xsd:string)
AnnotationAssertion(rdfs:comment :hasWLValue "has work time, work flexibility and work-life value"@en)

# Data Property: :hasWeeklyFrequencyOfEatingBeefValue (Frequency of consuming beef)

AnnotationAssertion(rdfs:comment :hasWeeklyFrequencyOfEatingBeefValue "FC3a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasWeeklyFrequencyOfEatingBeefValue "Frequency of consuming beef"@en)
SubDataPropertyOf(:hasWeeklyFrequencyOfEatingBeefValue :hasFC3Value)
DataPropertyDomain(:hasWeeklyFrequencyOfEatingBeefValue :Beef)

# Data Property: :hasWeeklyFrequencyOfEatingBottledOrCannedDrinksValue (Frequency of consuming drinks (bottled and canned))

AnnotationAssertion(rdfs:comment :hasWeeklyFrequencyOfEatingBottledOrCannedDrinksValue "FC3g"^^xsd:string)
AnnotationAssertion(rdfs:label :hasWeeklyFrequencyOfEatingBottledOrCannedDrinksValue "Frequency of consuming drinks (bottled and canned)"@en)
SubDataPropertyOf(:hasWeeklyFrequencyOfEatingBottledOrCannedDrinksValue :hasFC3Value)
DataPropertyDomain(:hasWeeklyFrequencyOfEatingBottledOrCannedDrinksValue :CannedOrBottled)

# Data Property: :hasWeeklyFrequencyOfEatingChickenValue (Frequency of consuming chicken)

AnnotationAssertion(rdfs:comment :hasWeeklyFrequencyOfEatingChickenValue "FC3c"^^xsd:string)
AnnotationAssertion(rdfs:label :hasWeeklyFrequencyOfEatingChickenValue "Frequency of consuming chicken"@en)
SubDataPropertyOf(:hasWeeklyFrequencyOfEatingChickenValue :hasFC3Value)
DataPropertyDomain(:hasWeeklyFrequencyOfEatingChickenValue :Chicken)

# Data Property: :hasWeeklyFrequencyOfEatingDiaryProductsValue (Frequency of consuming dairy products)

AnnotationAssertion(rdfs:comment :hasWeeklyFrequencyOfEatingDiaryProductsValue "FC3d"^^xsd:string)
AnnotationAssertion(rdfs:label :hasWeeklyFrequencyOfEatingDiaryProductsValue "Frequency of consuming dairy products"@en)
SubDataPropertyOf(:hasWeeklyFrequencyOfEatingDiaryProductsValue :hasFC3Value)
DataPropertyDomain(:hasWeeklyFrequencyOfEatingDiaryProductsValue :Dairy)

# Data Property: :hasWeeklyFrequencyOfEatingPorkValue (Frequency of eating pork)

AnnotationAssertion(rdfs:comment :hasWeeklyFrequencyOfEatingPorkValue "FC3b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasWeeklyFrequencyOfEatingPorkValue "Frequency of eating pork"@en)
SubDataPropertyOf(:hasWeeklyFrequencyOfEatingPorkValue :hasFC3Value)
DataPropertyDomain(:hasWeeklyFrequencyOfEatingPorkValue :Pork)

# Data Property: :hasWeeklyFrequencyOfEatingPrePreparedFoodValue (Frequency of consuming pre-prepared food)

AnnotationAssertion(rdfs:comment :hasWeeklyFrequencyOfEatingPrePreparedFoodValue "FC3e"^^xsd:string)
AnnotationAssertion(rdfs:label :hasWeeklyFrequencyOfEatingPrePreparedFoodValue "Frequency of consuming pre-prepared food"@en)
SubDataPropertyOf(:hasWeeklyFrequencyOfEatingPrePreparedFoodValue :hasFC3Value)
DataPropertyDomain(:hasWeeklyFrequencyOfEatingPrePreparedFoodValue :Preprepared)

# Data Property: :hasWeeklyFrequencyOfEatingVegetablesAndFruitsValue (Frequency of consuming vegetables and fruits)

AnnotationAssertion(rdfs:comment :hasWeeklyFrequencyOfEatingVegetablesAndFruitsValue "FC3f"^^xsd:string)
AnnotationAssertion(rdfs:label :hasWeeklyFrequencyOfEatingVegetablesAndFruitsValue "Frequency of consuming vegetables and fruits"@en)
SubDataPropertyOf(:hasWeeklyFrequencyOfEatingVegetablesAndFruitsValue :hasFC3Value)
DataPropertyDomain(:hasWeeklyFrequencyOfEatingVegetablesAndFruitsValue :VegetablesAndFruit)

# Data Property: :hasWeightValue (Would you indicate your weight)

AnnotationAssertion(rdfs:comment :hasWeightValue "SD11a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasWeightValue "Would you indicate your weight"@en)
SubDataPropertyOf(:hasWeightValue :hasSD11Value)

# Data Property: :hasWoodPelletHeating (Pellets/(fire)wood for heating)

AnnotationAssertion(rdfs:comment :hasWoodPelletHeating "EU7Home_e"^^xsd:string)
AnnotationAssertion(rdfs:label :hasWoodPelletHeating "Pellets/(fire)wood for heating"@en)
SubDataPropertyOf(:hasWoodPelletHeating :hasEU7Value)
DataPropertyDomain(:hasWoodPelletHeating DataHasValue(:doesNotHeatHome "false"^^xsd:boolean))
DataPropertyDomain(:hasWoodPelletHeating DataHasValue(:doesNotKnowHowHouseIsHeated "false"^^xsd:boolean))

# Data Property: :hasWoodPelletHotWaterHeating (Pellets/(fire)wood for water heating)

AnnotationAssertion(rdfs:comment :hasWoodPelletHotWaterHeating "EU7Home_f"^^xsd:string)
AnnotationAssertion(rdfs:label :hasWoodPelletHotWaterHeating "Pellets/(fire)wood for water heating"@en)
SubDataPropertyOf(:hasWoodPelletHotWaterHeating :hasEU7Value)
DataPropertyDomain(:hasWoodPelletHotWaterHeating DataHasValue(:doesNotHeatWater "false"^^xsd:boolean))
DataPropertyDomain(:hasWoodPelletHotWaterHeating DataHasValue(:doesNotKnowHowWaterIsHeated "false"^^xsd:boolean))

# Data Property: :hasWorkEndTimeValue (Thinking about an average working day, could you please indicate the time at which it ends)

AnnotationAssertion(rdfs:comment :hasWorkEndTimeValue "SD9b"^^xsd:string)
AnnotationAssertion(rdfs:label :hasWorkEndTimeValue "Thinking about an average working day, could you please indicate the time at which it ends"@en)
SubDataPropertyOf(:hasWorkEndTimeValue :hasSD9Value)
DataPropertyDomain(:hasWorkEndTimeValue :Employment)

# Data Property: :hasWorkStartTimeValue (Thinking about an average working day, could you please indicate the time at which it starts)

AnnotationAssertion(rdfs:comment :hasWorkStartTimeValue "SD9a"^^xsd:string)
AnnotationAssertion(rdfs:label :hasWorkStartTimeValue "Thinking about an average working day, could you please indicate the time at which it starts"@en)
SubDataPropertyOf(:hasWorkStartTimeValue :hasSD9Value)
DataPropertyDomain(:hasWorkStartTimeValue :Employment)

# Data Property: :haveChancesValueOfBeingFinanciallySuccessful (Chances of: I will be financially successful)

AnnotationAssertion(rdfs:comment :haveChancesValueOfBeingFinanciallySuccessful "AM2b"^^xsd:string)
AnnotationAssertion(rdfs:label :haveChancesValueOfBeingFinanciallySuccessful "Chances of: I will be financially successful"@en)
SubDataPropertyOf(:haveChancesValueOfBeingFinanciallySuccessful :hasAM2Value)

# Data Property: :haveChancesValueOfOvercomingLifeChallenges (Chances of: I will overcome the challenges that life presents me)

AnnotationAssertion(rdfs:comment :haveChancesValueOfOvercomingLifeChallenges "ASA6b"^^xsd:string)
AnnotationAssertion(rdfs:label :haveChancesValueOfOvercomingLifeChallenges "Chances of: I will overcome the challenges that life presents me"@en)
SubDataPropertyOf(:haveChancesValueOfOvercomingLifeChallenges :hasASA6Value)

# Data Property: :haveImportanceValueOfBeingFinanciallySuccessful (Importance of: I will be financially successful)

AnnotationAssertion(rdfs:comment :haveImportanceValueOfBeingFinanciallySuccessful "AM2a"^^xsd:string)
AnnotationAssertion(rdfs:label :haveImportanceValueOfBeingFinanciallySuccessful "Importance of: I will be financially successful"@en)
SubDataPropertyOf(:haveImportanceValueOfBeingFinanciallySuccessful :hasAM2Value)

# Data Property: :isCheerfulAndInGoodSpirtsValue (I have felt cheerful and in good spirit)

AnnotationAssertion(rdfs:comment :isCheerfulAndInGoodSpirtsValue "WB2a"^^xsd:string)
AnnotationAssertion(rdfs:label :isCheerfulAndInGoodSpirtsValue "I have felt cheerful and in good spirit"@en)
SubDataPropertyOf(:isCheerfulAndInGoodSpirtsValue :hasWB2Value)

# Data Property: :isInFavourOfTechnologicalInnvoationValue (I am in favour of technical innovations)

AnnotationAssertion(rdfs:comment :isInFavourOfTechnologicalInnvoationValue "TI1"^^xsd:string)
AnnotationAssertion(rdfs:label :isInFavourOfTechnologicalInnvoationValue "I am in favour of technical innovations"@en)
SubDataPropertyOf(:isInFavourOfTechnologicalInnvoationValue :hasTIValue)

# Data Property: :isKindOfPersonReallyConcernedAboutEnvironmentValue (I am the kind of person who is very concerned about the environment)

AnnotationAssertion(rdfs:comment :isKindOfPersonReallyConcernedAboutEnvironmentValue "ID1"^^xsd:string)
AnnotationAssertion(rdfs:label :isKindOfPersonReallyConcernedAboutEnvironmentValue "I am the kind of person who is very concerned about the environment"@en)
SubDataPropertyOf(:isKindOfPersonReallyConcernedAboutEnvironmentValue :hasIDValue)

# Data Property: :isKindOfPersonThatLikesTechnologyToWorkEffecientlyValue (I am the person who likes if technology works efficiently)

AnnotationAssertion(rdfs:label :isKindOfPersonThatLikesTechnologyToWorkEffecientlyValue "I am the person who likes if technology works efficiently"@en)
AnnotationAssertion(rdfs:label :isKindOfPersonThatLikesTechnologyToWorkEffecientlyValue "TI3"^^xsd:string)
SubDataPropertyOf(:isKindOfPersonThatLikesTechnologyToWorkEffecientlyValue :hasTIValue)

# Data Property: :isKindOfPersonThatLikesToKnowOfTechnologyValue (I am the kind of person who likes to know about the latest technical developments)

AnnotationAssertion(rdfs:comment :isKindOfPersonThatLikesToKnowOfTechnologyValue "TI2"^^xsd:string)
AnnotationAssertion(rdfs:label :isKindOfPersonThatLikesToKnowOfTechnologyValue "I am the kind of person who likes to know about the latest technical developments"@en)
SubDataPropertyOf(:isKindOfPersonThatLikesToKnowOfTechnologyValue :hasTIValue)

# Data Property: :isKindOfPersonWhoConsumesInAnUnsustainableMannerValue (I am the type of person who consumes in a relatively unsustainable way)

AnnotationAssertion(rdfs:comment :isKindOfPersonWhoConsumesInAnUnsustainableMannerValue "ID3"^^xsd:string)
AnnotationAssertion(rdfs:label :isKindOfPersonWhoConsumesInAnUnsustainableMannerValue "I am the type of person who consumes in a relatively unsustainable way"@en)
SubDataPropertyOf(:isKindOfPersonWhoConsumesInAnUnsustainableMannerValue :hasIDValue)

# Data Property: :isUnknownPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue (Percentage of produced electricity is unknown)

AnnotationAssertion(rdfs:comment :isUnknownPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue "1 → Yes
2 → No"@en)
AnnotationAssertion(rdfs:comment :isUnknownPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue "EU8b"^^xsd:string)
AnnotationAssertion(rdfs:label :isUnknownPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue "Percentage of produced electricity is unknown"@en)
SubDataPropertyOf(:isUnknownPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue :hasEU8Value)
DataPropertyDomain(:isUnknownPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue :HomeGeneratedElectricity)
DataPropertyDomain(:isUnknownPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue ObjectSomeValuesFrom(:isUsedBy DataHasValue(:hasProducingSolarGeneratedElectricityValue "1"^^xsd:integer)))
DataPropertyRange(:isUnknownPercentageOfTotalElectricalConsumptionIsHomeGeneratedValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "2"^^xsd:integer))

# Data Property: :journeyHasMeansOfTransportationValue (:journeyHasMeansOfTransportationValue)

AnnotationAssertion(rdfs:comment :journeyHasMeansOfTransportationValue "1 → Walking
2 → Bicycle
3 → Electric bicycle
4 → Motorbike
5 → Car
6 → Bus
7 → Tram/Underground
8 → Commuter train/short distance
9 → Other"@en)
AnnotationAssertion(rdfs:comment :journeyHasMeansOfTransportationValue "Summary property"@en)
SubDataPropertyOf(:journeyHasMeansOfTransportationValue :hasMBValue)
DataPropertyRange(:journeyHasMeansOfTransportationValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "9"^^xsd:integer))

# Data Property: :numberOfMonthsOfLifeEmployed (For how long have you been unemployed? (in months))

AnnotationAssertion(rdfs:comment :numberOfMonthsOfLifeEmployed "WL1d"^^xsd:string)
AnnotationAssertion(rdfs:label :numberOfMonthsOfLifeEmployed "For how long have you been unemployed? (in months)"@en)
SubDataPropertyOf(:numberOfMonthsOfLifeEmployed :hasWL1value)
DataPropertyDomain(:numberOfMonthsOfLifeEmployed :Unemployed)
DataPropertyRange(:numberOfMonthsOfLifeEmployed xsd:nonNegativeInteger)

# Data Property: :ownsAGardenValue (Do you own a garden)

AnnotationAssertion(rdfs:comment :ownsAGardenValue "1 → Yes
2 → No"@en)
AnnotationAssertion(rdfs:comment :ownsAGardenValue "EU4a"^^xsd:string)
AnnotationAssertion(rdfs:label :ownsAGardenValue "Do you own a garden"@en)
SubDataPropertyOf(:ownsAGardenValue :hasEU4Value)
DataPropertyDomain(:ownsAGardenValue :Person)
DataPropertyRange(:ownsAGardenValue DatatypeRestriction(xsd:integer xsd:minInclusive "1"^^xsd:integer xsd:maxInclusive "2"^^xsd:integer))

# Data Property: :thinksAboutBuyingAndConsumingOnlyThoseThingsNeededValue (Buying and consuming only those things that I need)

AnnotationAssertion(rdfs:comment :thinksAboutBuyingAndConsumingOnlyThoseThingsNeededValue "CL1b"^^xsd:string)
AnnotationAssertion(rdfs:label :thinksAboutBuyingAndConsumingOnlyThoseThingsNeededValue "Buying and consuming only those things that I need"@en)
SubDataPropertyOf(:thinksAboutBuyingAndConsumingOnlyThoseThingsNeededValue :hasCL1Value)
DataPropertyDomain(:thinksAboutBuyingAndConsumingOnlyThoseThingsNeededValue ObjectSomeValuesFrom(:isDesireOf ObjectAllValuesFrom(:buys ObjectSomeValuesFrom(:hasNeed owl:Thing))))

# Data Property: :thinksAboutConvenienceAndComfortValue (A life of convenience and comfort (having enough money to buy and do everything I want even if it means working long hours))

AnnotationAssertion(rdfs:comment :thinksAboutConvenienceAndComfortValue "CL1g"^^xsd:string)
AnnotationAssertion(rdfs:label :thinksAboutConvenienceAndComfortValue "A life of convenience and comfort (having enough money to buy and do everything I want even if it means working long hours)"@en)
SubDataPropertyOf(:thinksAboutConvenienceAndComfortValue :hasCL1Value)
DataPropertyDomain(:thinksAboutConvenienceAndComfortValue ObjectSomeValuesFrom(:isDesireOf ObjectSomeValuesFrom(:desires :ComfortableLife)))

# Data Property: :thinksAboutDoingMoreThingsInMyCommunityValue (Spending more time doing things in my local community)

AnnotationAssertion(rdfs:label :thinksAboutDoingMoreThingsInMyCommunityValue "CL1a"^^xsd:string)
AnnotationAssertion(rdfs:label :thinksAboutDoingMoreThingsInMyCommunityValue "Spending more time doing things in my local community"@en)
SubDataPropertyOf(:thinksAboutDoingMoreThingsInMyCommunityValue :hasCL1Value)
DataPropertyDomain(:thinksAboutDoingMoreThingsInMyCommunityValue ObjectSomeValuesFrom(:isDesireOf ObjectSomeValuesFrom(:more ObjectSomeValuesFrom(:spendsTime :LocalCommunity))))

# Data Property: :thinksAboutDoingMoreThingsOutdoorsValue (Spending more time doing things outside (e.g. gardening, taking walks in nature, etc))

AnnotationAssertion(rdfs:comment :thinksAboutDoingMoreThingsOutdoorsValue "CL1c"^^xsd:string)
AnnotationAssertion(rdfs:label :thinksAboutDoingMoreThingsOutdoorsValue "Spending more time doing things outside (e.g. gardening, taking walks in nature, etc)"@en)
SubDataPropertyOf(:thinksAboutDoingMoreThingsOutdoorsValue :hasCL1Value)
DataPropertyDomain(:thinksAboutDoingMoreThingsOutdoorsValue ObjectSomeValuesFrom(:isDesireOf ObjectSomeValuesFrom(:more ObjectSomeValuesFrom(:spendsTime :Outdoor))))

# Data Property: :thinksAboutGettingMoreInvolvedInVolunteerActivitiesValue (Getting more involved in volunteer activities and contributing to community life)

AnnotationAssertion(rdfs:comment :thinksAboutGettingMoreInvolvedInVolunteerActivitiesValue "CL1e"^^xsd:string)
AnnotationAssertion(rdfs:label :thinksAboutGettingMoreInvolvedInVolunteerActivitiesValue "Getting more involved in volunteer activities and contributing to community life"@en)
SubDataPropertyOf(:thinksAboutGettingMoreInvolvedInVolunteerActivitiesValue :hasCL1Value)
DataPropertyDomain(:thinksAboutGettingMoreInvolvedInVolunteerActivitiesValue ObjectSomeValuesFrom(:isDesireOf ObjectSomeValuesFrom(:more ObjectSomeValuesFrom(:volunteersTime :CommunityLife))))

# Data Property: :thinksAboutHavingASlowerPaceOfLifeValue (Having a slower pace in my daily life, with enough time for things I want to do, even if it means less income.)

AnnotationAssertion(rdfs:comment :thinksAboutHavingASlowerPaceOfLifeValue "CL1f"^^xsd:string)
AnnotationAssertion(rdfs:label :thinksAboutHavingASlowerPaceOfLifeValue "Having a slower pace in my daily life, with enough time for things I want to do, even if it means less income."@en)
SubDataPropertyOf(:thinksAboutHavingASlowerPaceOfLifeValue :hasCL1Value)
DataPropertyDomain(:thinksAboutHavingASlowerPaceOfLifeValue ObjectSomeValuesFrom(:isDesireOf ObjectIntersectionOf(ObjectSomeValuesFrom(:less :Money) ObjectSomeValuesFrom(:less :PaceOfLife) ObjectSomeValuesFrom(:more ObjectSomeValuesFrom(:spendsTime :EnjoyableLife)))))

# Data Property: :thinksAboutSpendingMoreTimeTravellingValue (Spending more time traveling to different places)

AnnotationAssertion(rdfs:comment :thinksAboutSpendingMoreTimeTravellingValue "CL1h"^^xsd:string)
AnnotationAssertion(rdfs:label :thinksAboutSpendingMoreTimeTravellingValue "Spending more time traveling to different places"@en)
SubDataPropertyOf(:thinksAboutSpendingMoreTimeTravellingValue :hasCL1Value)
DataPropertyDomain(:thinksAboutSpendingMoreTimeTravellingValue ObjectSomeValuesFrom(:isDesireOf ObjectSomeValuesFrom(:more ObjectSomeValuesFrom(:spendsTime :Journey))))

# Data Property: :thinksAboutSpendingTimeWithOthersCaredAboutValue (Spending more time with people I care about)

AnnotationAssertion(rdfs:comment :thinksAboutSpendingTimeWithOthersCaredAboutValue "CL1d"^^xsd:string)
AnnotationAssertion(rdfs:label :thinksAboutSpendingTimeWithOthersCaredAboutValue "Spending more time with people I care about"@en)
SubDataPropertyOf(:thinksAboutSpendingTimeWithOthersCaredAboutValue :hasCL1Value)
DataPropertyDomain(:thinksAboutSpendingTimeWithOthersCaredAboutValue ObjectSomeValuesFrom(:isDesireOf ObjectSomeValuesFrom(:more ObjectSomeValuesFrom(:spendsTime ObjectSomeValuesFrom(:caresAbout :PeopleOfEmotionalImportance)))))

# Data Property: :usesCarSharingValue (Use of ride sharing, car sharing initiatives/platforms (e.g.: Blablacar, Amovens, Carpooling, etc.))

AnnotationAssertion(rdfs:comment :usesCarSharingValue "IU1"^^xsd:string)
AnnotationAssertion(rdfs:label :usesCarSharingValue "Use of ride sharing, car sharing initiatives/platforms (e.g.: Blablacar, Amovens, Carpooling, etc.)"@en)
SubDataPropertyOf(:usesCarSharingValue :hasIUValue)

# Data Property: :usesCollaborativeConsumptionInitiativesValue (Use of collaborative consumption initiatives (e.g. peerby, etc.))

AnnotationAssertion(rdfs:comment :usesCollaborativeConsumptionInitiativesValue "IU4"^^xsd:string)
AnnotationAssertion(rdfs:label :usesCollaborativeConsumptionInitiativesValue "Use of collaborative consumption initiatives (e.g. peerby, etc.)"@en)
SubDataPropertyOf(:usesCollaborativeConsumptionInitiativesValue :hasIUValue)

# Data Property: :usesEnergyCooperativesValue (Use of energy cooperatives (e.g. Som Energía etc.))

AnnotationAssertion(rdfs:comment :usesEnergyCooperativesValue "IU2"^^xsd:string)
AnnotationAssertion(rdfs:label :usesEnergyCooperativesValue "Use of energy cooperatives (e.g. Som Energía etc.)"@en)
SubDataPropertyOf(:usesEnergyCooperativesValue :hasIUValue)

# Data Property: :usesSecondClothesSellingValue (Use of second hand shops for clothes)

AnnotationAssertion(rdfs:comment :usesSecondClothesSellingValue "IU5"^^xsd:string)
AnnotationAssertion(rdfs:label :usesSecondClothesSellingValue "Use of second hand shops for clothes"@en)
SubDataPropertyOf(:usesSecondClothesSellingValue :hasIUValue)

# Data Property: :usesSecondHandInternetSitesValue (Use of second hand internet sites)

AnnotationAssertion(rdfs:comment :usesSecondHandInternetSitesValue "IU6"^^xsd:string)
AnnotationAssertion(rdfs:label :usesSecondHandInternetSitesValue "Use of second hand internet sites"@en)
SubDataPropertyOf(:usesSecondHandInternetSitesValue :hasIUValue)

# Data Property: :usesSustainableFoodConsumptionInitiativesValue (Use of sustainable food consumption initiatives/cooperatives (e.g. Zocamiñoca etc))

AnnotationAssertion(rdfs:comment :usesSustainableFoodConsumptionInitiativesValue "IU3"^^xsd:string)
AnnotationAssertion(rdfs:label :usesSustainableFoodConsumptionInitiativesValue "Use of sustainable food consumption initiatives/cooperatives (e.g. Zocamiñoca etc)"@en)
SubDataPropertyOf(:usesSustainableFoodConsumptionInitiativesValue :hasIUValue)

# Data Property: :usesSwappingAndTradingClothesValue (Use of swapping and trading clothesinitiatives (e.g. Vinted))

AnnotationAssertion(rdfs:comment :usesSwappingAndTradingClothesValue "IU7"^^xsd:string)
AnnotationAssertion(rdfs:label :usesSwappingAndTradingClothesValue "Use of swapping and trading clothesinitiatives (e.g. Vinted)"@en)
SubDataPropertyOf(:usesSwappingAndTradingClothesValue :hasIUValue)

# Data Property: :wakesUpRefreshedAndRestedValue (I woke up feeling fresh and rested)

AnnotationAssertion(rdfs:comment :wakesUpRefreshedAndRestedValue "WB2d"^^xsd:string)
AnnotationAssertion(rdfs:label :wakesUpRefreshedAndRestedValue "I woke up feeling fresh and rested"@en)
SubDataPropertyOf(:wakesUpRefreshedAndRestedValue :hasWB2Value)

# Data Property: :worksNumberOfHoursPerWeekIncludingOvertimeValue (How many hours do you work per week on paid work, including overtime)

AnnotationAssertion(rdfs:comment :worksNumberOfHoursPerWeekIncludingOvertimeValue "WL1b"^^xsd:string)
AnnotationAssertion(rdfs:label :worksNumberOfHoursPerWeekIncludingOvertimeValue "How many hours do you work per week on paid work, including overtime"@en)
SubDataPropertyOf(:worksNumberOfHoursPerWeekIncludingOvertimeValue :hasWL1value)
DataPropertyDomain(:worksNumberOfHoursPerWeekIncludingOvertimeValue :WorkTime)
DataPropertyRange(:worksNumberOfHoursPerWeekIncludingOvertimeValue xsd:nonNegativeInteger)



############################
#   Classes
############################

# Class: :Acessories (:Acessories)

AnnotationAssertion(rdfs:comment :Acessories "SB1"^^xsd:string)
SubClassOf(:Acessories :ClothingOrShoesOrAccessories)

# Class: :Adult (:Adult)

SubClassOf(:Adult :Person)
DisjointClasses(:Adult :Child)

# Class: :AffiliationAspiration (:AffiliationAspiration)

AnnotationAssertion(rdfs:comment :AffiliationAspiration "AA1"^^xsd:string)
AnnotationAssertion(rdfs:comment :AffiliationAspiration "AA2"^^xsd:string)
AnnotationAssertion(rdfs:comment :AffiliationAspiration "AA3"^^xsd:string)
AnnotationAssertion(rdfs:comment :AffiliationAspiration "AA4"^^xsd:string)
AnnotationAssertion(rdfs:comment :AffiliationAspiration "AA5"^^xsd:string)
SubClassOf(:AffiliationAspiration :Aspiration)

# Class: :AirBnBApartment (:AirBnBApartment)

SubClassOf(:AirBnBApartment :Accomodation)
SubClassOf(:AirBnBApartment ObjectSomeValuesFrom(:usesAccomodation DataHasValue(:hasTypeOfAccommodationForPrivateTravelValue "3"^^xsd:integer)))

# Class: :Apartment (:Apartment)

SubClassOf(:Apartment :Accomodation)
SubClassOf(:Apartment ObjectSomeValuesFrom(:usesAccomodation DataHasValue(:hasTypeOfAccommodationForPrivateTravelValue "2"^^xsd:integer)))

# Class: :ApartmentBlock (:ApartmentBlock)

AnnotationAssertion(rdfs:comment :ApartmentBlock "EU2"^^xsd:string)
SubClassOf(:ApartmentBlock :Household)
SubClassOf(:ApartmentBlock ObjectSomeValuesFrom(:resident DataHasValue(:hasTypeOfDwellingValue "4"^^xsd:integer)))

# Class: :AttituteToTechnicalInnovation (:AttituteToTechnicalInnovation)

AnnotationAssertion(rdfs:comment :AttituteToTechnicalInnovation "TI"^^xsd:string)

# Class: :Batteries (:Batteries)

AnnotationAssertion(rdfs:comment :Batteries "FC5"^^xsd:string)

# Class: :BedAndBreakfast (:BedAndBreakfast)

SubClassOf(:BedAndBreakfast :Accomodation)
SubClassOf(:BedAndBreakfast ObjectSomeValuesFrom(:usesAccomodation DataHasValue(:hasTypeOfAccommodationForPrivateTravelValue "5"^^xsd:integer)))

# Class: :Beef (:Beef)

AnnotationAssertion(rdfs:comment :Beef "FC3"^^xsd:string)
SubClassOf(:Beef :Food)
SubClassOf(:Beef ObjectSomeValuesFrom(:hasFrequency :WeeklyFrequency))

# Class: :Bicycle (:Bicycle)

SubClassOf(:Bicycle :Transport)
SubClassOf(:Bicycle ObjectSomeValuesFrom(:isTransportUsedForTravel DataHasValue(:journeyHasMeansOfTransportationValue "2"^^xsd:integer)))

# Class: :Bill (:Bill)

SubClassOf(:Bill :Money)

# Class: :Bottle (:Bottle)

SubClassOf(:Bottle :CannedOrBottled)

# Class: :Bus (:Bus)

SubClassOf(:Bus :PublicTransport)
SubClassOf(:Bus ObjectSomeValuesFrom(:isTransportUsedForTravel DataHasValue(:journeyHasMeansOfTransportationValue "6"^^xsd:integer)))

# Class: :CampingSite (:CampingSite)

SubClassOf(:CampingSite :Accomodation)
SubClassOf(:CampingSite ObjectSomeValuesFrom(:usesAccomodation DataHasValue(:hasTypeOfAccommodationForPrivateTravelValue "7"^^xsd:integer)))

# Class: :Can (:Can)

SubClassOf(:Can :CannedOrBottled)

# Class: :CannedOrBottled (:CannedOrBottled)

AnnotationAssertion(rdfs:comment :CannedOrBottled "FC3"^^xsd:string)
SubClassOf(:CannedOrBottled :Drink)
SubClassOf(:CannedOrBottled ObjectSomeValuesFrom(:hasFrequency :WeeklyFrequency))

# Class: :Car (:Car)

AnnotationAssertion(rdfs:comment :Car "MB3"^^xsd:string)
AnnotationAssertion(rdfs:comment :Car "MB4"^^xsd:string)
AnnotationAssertion(rdfs:comment :Car "MB5"^^xsd:string)
SubClassOf(:Car :Transport)
SubClassOf(:Car ObjectSomeValuesFrom(:isTransportUsedForTravel DataHasValue(:journeyHasMeansOfTransportationValue "5"^^xsd:integer)))

# Class: :CarAge10To15Years (:CarAge10To15Years)

AnnotationAssertion(rdfs:comment :CarAge10To15Years "MB5"^^xsd:string)
SubClassOf(:CarAge10To15Years :Car)
SubClassOf(:CarAge10To15Years DataHasValue(:hasAgeOfCarValue "3"^^xsd:integer))

# Class: :CarAge5To10Years (:CarAge5To10Years)

AnnotationAssertion(rdfs:comment :CarAge5To10Years "MB5"^^xsd:string)
SubClassOf(:CarAge5To10Years :Car)
SubClassOf(:CarAge5To10Years DataHasValue(:hasAgeOfCarValue "2"^^xsd:integer))

# Class: :CarAgeGreaterThan15Years (:CarAgeGreaterThan15Years)

AnnotationAssertion(rdfs:comment :CarAgeGreaterThan15Years "MB5"^^xsd:string)
SubClassOf(:CarAgeGreaterThan15Years :Car)
SubClassOf(:CarAgeGreaterThan15Years DataHasValue(:hasAgeOfCarValue "4"^^xsd:integer))

# Class: :CarAgeLessThan5years (:CarAgeLessThan5years)

AnnotationAssertion(rdfs:comment :CarAgeLessThan5years "MB5"^^xsd:string)
SubClassOf(:CarAgeLessThan5years :Car)
SubClassOf(:CarAgeLessThan5years DataHasValue(:hasAgeOfCarValue "1"^^xsd:integer))

# Class: :CarUsedByASingleDriver (:CarUsedByASingleDriver)

AnnotationAssertion(rdfs:comment :CarUsedByASingleDriver "MB3.1"^^xsd:string)
SubClassOf(:CarUsedByASingleDriver :Car)
SubClassOf(:CarUsedByASingleDriver ObjectExactCardinality(1 :usedOnlyBy :Person))

# Class: :CarUsedByHousehold (:CarUsedByHousehold)

AnnotationAssertion(rdfs:comment :CarUsedByHousehold "MB3.2"^^xsd:string)
SubClassOf(:CarUsedByHousehold :Car)
SubClassOf(:CarUsedByHousehold ObjectExactCardinality(1 :sharesWith :MembersOfHousehold))

# Class: :Carpool (:Carpool)

AnnotationAssertion(rdfs:comment :Carpool "MB3.3"^^xsd:string)
AnnotationAssertion(rdfs:comment :Carpool "MB6"^^xsd:string)
SubClassOf(:Carpool :Car)
SubClassOf(:Carpool ObjectSomeValuesFrom(:sharesWith :CollectionOfIndividuals))

# Class: :Centre (:Centre)

AnnotationAssertion(rdfs:comment :Centre "SD8"^^xsd:string)
SubClassOf(:Centre :Person)
SubClassOf(:Centre DataHasValue(:hasPolitcalSpectrumValue "4"^^xsd:integer))

# Class: :Charity (:Charity)

AnnotationAssertion(rdfs:comment :Charity "SB2"^^xsd:string)
SubClassOf(:Charity :Institution)

# Class: :Chicken (:Chicken)

AnnotationAssertion(rdfs:comment :Chicken "FC3"^^xsd:string)
SubClassOf(:Chicken :Food)
SubClassOf(:Chicken ObjectSomeValuesFrom(:hasFrequency :WeeklyFrequency))

# Class: :Child (:Child)

AnnotationAssertion(rdfs:comment :Child "SD7"^^xsd:string)
SubClassOf(:Child :Person)

# Class: :Clothing (:Clothing)

AnnotationAssertion(rdfs:comment :Clothing "SB1"^^xsd:string)
SubClassOf(:Clothing :ClothingOrShoesOrAccessories)

# Class: :ClothingOrShoesOrAccessories (:ClothingOrShoesOrAccessories)

AnnotationAssertion(rdfs:comment :ClothingOrShoesOrAccessories "SB1"^^xsd:string)

# Class: :ColdSeason (:ColdSeason)

EquivalentClasses(:ColdSeason :Winter)
SubClassOf(:ColdSeason :UnitsOfMeasurementOfTime)

# Class: :CollectionOfIndividuals (:CollectionOfIndividuals)

SubClassOf(:CollectionOfIndividuals :Collection)
SubClassOf(:CollectionOfIndividuals ObjectMinCardinality(2 :hasPart :Person))

# Class: :CollectionOfRooms (:CollectionOfRooms)

SubClassOf(:CollectionOfRooms :Collection)
SubClassOf(:CollectionOfRooms :Dwelling)
SubClassOf(:CollectionOfRooms ObjectSomeValuesFrom(:hasPart :Room))

# Class: :CollegeDegree (:CollegeDegree)

AnnotationAssertion(rdfs:comment :CollegeDegree "SD3"^^xsd:string)
SubClassOf(:CollegeDegree :QualificationLevel)
SubClassOf(:CollegeDegree ObjectSomeValuesFrom(:isTheQualificationLevelOf DataHasValue(:hasHighestQualficationLevelValue "6"^^xsd:integer)))

# Class: :ComfortableLife (:ComfortableLife)

AnnotationAssertion(rdfs:comment :ComfortableLife "CL1g"^^xsd:string)
SubClassOf(:ComfortableLife :Life)

# Class: :CommunityAspiration (:CommunityAspiration)

AnnotationAssertion(rdfs:comment :CommunityAspiration "AC1"^^xsd:string)
AnnotationAssertion(rdfs:comment :CommunityAspiration "AC2"^^xsd:string)
AnnotationAssertion(rdfs:comment :CommunityAspiration "AC3"^^xsd:string)
SubClassOf(:CommunityAspiration :Aspiration)

# Class: :CommunityLife (:CommunityLife)

SubClassOf(:CommunityLife :Life)

# Class: :Commute (:Commute)

SubClassOf(:Commute :Journey)

# Class: :CommutePart1 (:CommutePart1)

AnnotationAssertion(rdfs:comment :CommutePart1 "MB1.a1"^^xsd:string)
AnnotationAssertion(rdfs:comment :CommutePart1 "MB1.a2"^^xsd:string)
AnnotationAssertion(rdfs:comment :CommutePart1 "MB1.a3"^^xsd:string)
SubClassOf(:CommutePart1 :Commute)

# Class: :CommutePart2 (:CommutePart2)

AnnotationAssertion(rdfs:comment :CommutePart2 "MB1.b1"^^xsd:string)
AnnotationAssertion(rdfs:comment :CommutePart2 "MB1.b2"^^xsd:string)
AnnotationAssertion(rdfs:comment :CommutePart2 "MB1.b3"^^xsd:string)
SubClassOf(:CommutePart2 :Commute)

# Class: :CommutePart3 (:CommutePart3)

AnnotationAssertion(rdfs:comment :CommutePart3 "MB1.c1"^^xsd:string)
AnnotationAssertion(rdfs:comment :CommutePart3 "MB1.c2"^^xsd:string)
AnnotationAssertion(rdfs:comment :CommutePart3 "MB1.c3"^^xsd:string)
SubClassOf(:CommutePart3 :Commute)

# Class: :CommuterTrain (:CommuterTrain)

SubClassOf(:CommuterTrain :PublicTransport)
SubClassOf(:CommuterTrain ObjectSomeValuesFrom(:isTransportUsedForTravel DataHasValue(:journeyHasMeansOfTransportationValue "8"^^xsd:integer)))

# Class: :Compact (:Compact)

AnnotationAssertion(rdfs:comment :Compact "MB4a"^^xsd:string)
SubClassOf(:Compact :Car)
SubClassOf(:Compact DataHasValue(:hasCarTypeValue "2"^^xsd:integer))

# Class: :Computer (:Computer)

AnnotationAssertion(rdfs:comment :Computer "EU5"^^xsd:string)
SubClassOf(:Computer :ConsumerDurables)

# Class: :ConsumerDurables (:ConsumerDurables)

SubClassOf(:ConsumerDurables ObjectSomeValuesFrom(:isUsedBy :Household))

# Class: :CookingTime (:CookingTime)

AnnotationAssertion(rdfs:comment :CookingTime "FC1"^^xsd:string)
SubClassOf(:CookingTime :Time)
SubClassOf(:CookingTime ObjectSomeValuesFrom(:hasUnitOfTime :Hour))
SubClassOf(:CookingTime ObjectSomeValuesFrom(:isPerUnit ObjectUnionOf(:FreeDay :WorkingDay)))
SubClassOf(:CookingTime DataSomeValuesFrom(:hasFC1Value DatatypeRestriction(xsd:decimal xsd:minExclusive "0"^^xsd:decimal)))

# Class: :Dairy (:Dairy)

AnnotationAssertion(rdfs:comment :Dairy "FC3"^^xsd:string)
SubClassOf(:Dairy :Food)
SubClassOf(:Dairy ObjectSomeValuesFrom(:hasFrequency :WeeklyFrequency))

# Class: :Day (:Day)

EquivalentClasses(:Day :OneDay)
SubClassOf(:Day :UnitsOfMeasurementOfTime)

# Class: :Days (:Days)

AnnotationAssertion(rdfs:comment :Days "FC3"^^xsd:string)
SubClassOf(:Days :Times)

# Class: :Diesel (:Diesel)

AnnotationAssertion(rdfs:comment :Diesel "MB4b"^^xsd:string)
SubClassOf(:Diesel :Car)
SubClassOf(:Diesel DataHasValue(:hasCarFuelValue "2"^^xsd:integer))

# Class: :DieselGenerator (:DieselGenerator)

SubClassOf(:DieselGenerator :HomeGeneratedElectricity)
SubClassOf(:DieselGenerator DataHasValue(:hasSourceOfHomeGenerationOfElectricityValue "4"^^xsd:integer))

# Class: :DistrictHouseHeating (:DistrictHouseHeating)

AnnotationAssertion(rdfs:comment :DistrictHouseHeating "EU7"^^xsd:string)
SubClassOf(:DistrictHouseHeating :HomeHeating)
SubClassOf(:DistrictHouseHeating ObjectSomeValuesFrom(:isHouseHeatingFor DataHasValue(:hasDistrictHeating "true"^^xsd:boolean)))

# Class: :DistrictWaterHeating (:DistrictWaterHeating)

AnnotationAssertion(rdfs:comment :DistrictWaterHeating "EU7"^^xsd:string)
SubClassOf(:DistrictWaterHeating :WaterHeating)
SubClassOf(:DistrictWaterHeating ObjectSomeValuesFrom(:isWaterHeatingFor DataHasValue(:hasDistrictWaterHeating "true"^^xsd:boolean)))

# Class: :Divorced (:Divorced)

SubClassOf(:Divorced :DivorcedOrSeparated)

# Class: :DivorcedOrSeparated (:DivorcedOrSeparated)

AnnotationAssertion(rdfs:comment :DivorcedOrSeparated "SD4"^^xsd:string)
SubClassOf(:DivorcedOrSeparated :Person)
SubClassOf(:DivorcedOrSeparated DataHasValue(:hasMaritalStatusValue "4"^^xsd:integer))

# Class: :DoctoralDegree (:DoctoralDegree)

AnnotationAssertion(rdfs:comment :DoctoralDegree "SD3"^^xsd:string)
SubClassOf(:DoctoralDegree :QualificationLevel)
SubClassOf(:DoctoralDegree ObjectSomeValuesFrom(:isTheQualificationLevelOf DataHasValue(:hasHighestQualficationLevelValue "8"^^xsd:integer)))

# Class: :Drink (:Drink)

SubClassOf(:Drink :Food)

# Class: :Dwelling (:Dwelling)

EquivalentClasses(:Dwelling :Household)

# Class: :Eaten (:Eaten)

AnnotationAssertion(rdfs:comment :Eaten "FC6"^^xsd:string)
SubClassOf(:Eaten :Food)
DisjointClasses(:Eaten :Waste)

# Class: :EatingOut (:EatingOut)

SubClassOf(:EatingOut :FoodBill)
SubClassOf(:EatingOut ObjectSomeValuesFrom(:isSpentBy DataSomeValuesFrom(:hasAmountSpentPerWeekPerIndividualEatingOutValue DatatypeRestriction(xsd:decimal xsd:minExclusive "0"^^xsd:decimal))))

# Class: :Ecological (:Ecological)

AnnotationAssertion(rdfs:comment :Ecological "FC4"^^xsd:string)
SubClassOf(:Ecological :LabelledOrganicOrEcological)

# Class: :Ecotourism (:Ecotourism)

SubClassOf(:Ecotourism :Accomodation)
SubClassOf(:Ecotourism ObjectSomeValuesFrom(:usesAccomodation DataHasValue(:hasTypeOfAccommodationForPrivateTravelValue "4"^^xsd:integer)))

# Class: :ElectricBicycle (:ElectricBicycle)

SubClassOf(:ElectricBicycle :Transport)
SubClassOf(:ElectricBicycle ObjectSomeValuesFrom(:isTransportUsedForTravel DataHasValue(:journeyHasMeansOfTransportationValue "3"^^xsd:integer)))

# Class: :ElectricOrGasPumpHouseHeating (:ElectricOrGasPumpHouseHeating)

AnnotationAssertion(rdfs:comment :ElectricOrGasPumpHouseHeating "EU7"^^xsd:string)
SubClassOf(:ElectricOrGasPumpHouseHeating :HomeHeating)
SubClassOf(:ElectricOrGasPumpHouseHeating ObjectSomeValuesFrom(:isHouseHeatingFor DataHasValue(:hasElectricUnderfloorHeating "true"^^xsd:boolean)))

# Class: :ElectricOrGasPumpWaterHeating (:ElectricOrGasPumpWaterHeating)

AnnotationAssertion(rdfs:comment :ElectricOrGasPumpWaterHeating "EU7"^^xsd:string)
SubClassOf(:ElectricOrGasPumpWaterHeating :WaterHeating)
SubClassOf(:ElectricOrGasPumpWaterHeating ObjectSomeValuesFrom(:isWaterHeatingFor DataHasValue(:hasElectricWaterHeating "true"^^xsd:boolean)))

# Class: :ElectricUnderfloorHeatingOrElectricConvectorsOrElectricAccumulators (:ElectricUnderfloorHeatingOrElectricConvectorsOrElectricAccumulators)

AnnotationAssertion(rdfs:comment :ElectricUnderfloorHeatingOrElectricConvectorsOrElectricAccumulators "EU7"^^xsd:string)
SubClassOf(:ElectricUnderfloorHeatingOrElectricConvectorsOrElectricAccumulators :HomeHeating)
SubClassOf(:ElectricUnderfloorHeatingOrElectricConvectorsOrElectricAccumulators ObjectSomeValuesFrom(:isHouseHeatingFor DataHasValue(:hasElectricUnderfloorHeating "true"^^xsd:boolean)))

# Class: :ElectricWaterHeaterHeating (:ElectricWaterHeaterHeating)

AnnotationAssertion(rdfs:comment :ElectricWaterHeaterHeating "EU7"^^xsd:string)
SubClassOf(:ElectricWaterHeaterHeating :WaterHeating)
SubClassOf(:ElectricWaterHeaterHeating ObjectSomeValuesFrom(:isWaterHeatingFor DataHasValue(:hasElectricWaterHeating "true"^^xsd:boolean)))

# Class: :Electrical (:Electrical)

AnnotationAssertion(rdfs:comment :Electrical "MB4b"^^xsd:string)
SubClassOf(:Electrical :Car)
SubClassOf(:Electrical DataHasValue(:hasCarFuelValue "5"^^xsd:integer))

# Class: :ElectricityBill (:ElectricityBill)

AnnotationAssertion(rdfs:comment :ElectricityBill "EU6"^^xsd:string)
SubClassOf(:ElectricityBill :Bill)
SubClassOf(:ElectricityBill ObjectSomeValuesFrom(:hasUnitOfCurrency :Euro))
SubClassOf(:ElectricityBill ObjectSomeValuesFrom(:isPerUnit ObjectUnionOf(:Summer :Winter)))

# Class: :EmployedFullTime (Employed full-time)

AnnotationAssertion(rdfs:comment :EmployedFullTime "WL1a"^^xsd:string)
AnnotationAssertion(rdfs:label :EmployedFullTime "Employed full-time"@en)
SubClassOf(:EmployedFullTime :Employment)
SubClassOf(:EmployedFullTime ObjectSomeValuesFrom(:isEmploymentStatusFor DataHasValue(:hasCurrentEmploymentStatus "1"^^xsd:integer)))

# Class: :EmployedPartTime (Employed part-time)

AnnotationAssertion(rdfs:comment :EmployedPartTime "WL1a"^^xsd:string)
AnnotationAssertion(rdfs:label :EmployedPartTime "Employed part-time"@en)
SubClassOf(:EmployedPartTime :Employment)
SubClassOf(:EmployedPartTime ObjectSomeValuesFrom(:isEmploymentStatusFor DataHasValue(:hasCurrentEmploymentStatus "2"^^xsd:integer)))

# Class: :Employment (Employment)

AnnotationAssertion(rdfs:comment :Employment "WL1"^^xsd:string)
AnnotationAssertion(rdfs:comment :Employment "WL2"^^xsd:string)
AnnotationAssertion(rdfs:comment :Employment "WL3"^^xsd:string)
AnnotationAssertion(rdfs:comment :Employment "WL4"^^xsd:string)
AnnotationAssertion(rdfs:label :Employment "Employment"@en)

# Class: :EnjoyableLife (:EnjoyableLife)

AnnotationAssertion(rdfs:comment :EnjoyableLife "CL1g"^^xsd:string)
SubClassOf(:EnjoyableLife :Life)

# Class: :EntrepreneurWithStaff (Entrepreneur with staff)

AnnotationAssertion(rdfs:comment :EntrepreneurWithStaff "WL1a"^^xsd:string)
AnnotationAssertion(rdfs:label :EntrepreneurWithStaff "Entrepreneur with staff"@en)
SubClassOf(:EntrepreneurWithStaff :Employment)
SubClassOf(:EntrepreneurWithStaff ObjectSomeValuesFrom(:isEmploymentStatusFor DataHasValue(:hasCurrentEmploymentStatus "4"^^xsd:integer)))

# Class: :EntrepreneurWithoutStaff (Entrepreneur without staff)

AnnotationAssertion(rdfs:comment :EntrepreneurWithoutStaff "WL1a"^^xsd:string)
AnnotationAssertion(rdfs:label :EntrepreneurWithoutStaff "Entrepreneur without staff"@en)
SubClassOf(:EntrepreneurWithoutStaff :Employment)
SubClassOf(:EntrepreneurWithoutStaff ObjectSomeValuesFrom(:isEmploymentStatusFor DataHasValue(:hasCurrentEmploymentStatus "3"^^xsd:integer)))

# Class: :Euro (:Euro)

SubClassOf(:Euro :UnitsOfMeasurementOfCurrency)

# Class: :ExternallyGeneratedElectricity (:ExternallyGeneratedElectricity)

SubClassOf(:ExternallyGeneratedElectricity :Electricity)
DisjointClasses(:ExternallyGeneratedElectricity :HomeGeneratedElectricity)

# Class: :Farmer (:Farmer)

SubClassOf(:Farmer :Producer)

# Class: :Female (:Female)

SubClassOf(:Female :Person)
SubClassOf(:Female DataHasValue(:hasGenderValue "2"^^xsd:integer))
DisjointClasses(:Female :Male)

# Class: :FinancialAspiration (:FinancialAspiration)

AnnotationAssertion(rdfs:comment :FinancialAspiration "AM1"^^xsd:string)
AnnotationAssertion(rdfs:comment :FinancialAspiration "AM2"^^xsd:string)
AnnotationAssertion(rdfs:comment :FinancialAspiration "AM3"^^xsd:string)
AnnotationAssertion(rdfs:comment :FinancialAspiration "AM4"^^xsd:string)
SubClassOf(:FinancialAspiration :Aspiration)

# Class: :FiveDays (:FiveDays)

SubClassOf(:FiveDays :Days)
SubClassOf(:FiveDays ObjectSomeValuesFrom(:hasPart :Day))
SubClassOf(:FiveDays ObjectSomeValuesFrom(:hasUnitOfTime :Day))

# Class: :Flight (:Flight)

SubClassOf(:Flight :Journey)
DisjointUnion(:Flight :LongFlight :ShortFlight)

# Class: :Flying (:Flying)

AnnotationAssertion(rdfs:comment :Flying "MB8"^^xsd:string)
AnnotationAssertion(rdfs:comment :Flying "MB9"^^xsd:string)
SubClassOf(:Flying :Collection)
SubClassOf(:Flying ObjectSomeValuesFrom(:hasPart :Flight))

# Class: :Food (:Food)

AnnotationAssertion(rdfs:comment :Food "FC3"^^xsd:string)
AnnotationAssertion(rdfs:comment :Food "FC4"^^xsd:string)
DisjointUnion(:Food :Eaten :Waste)

# Class: :FoodBill (:FoodBill)

SubClassOf(:FoodBill :Bill)
SubClassOf(:FoodBill ObjectSomeValuesFrom(:hasUnitOfCurrency :Euro))
SubClassOf(:FoodBill ObjectSomeValuesFrom(:isPerUnit :Week))

# Class: :FoodDirectlyFromProducer (:FoodDirectlyFromProducer)

AnnotationAssertion(rdfs:comment :FoodDirectlyFromProducer "FC4"^^xsd:string)
SubClassOf(:FoodDirectlyFromProducer :Food)
SubClassOf(:FoodDirectlyFromProducer ObjectSomeValuesFrom(:direct :Producer))

# Class: :FourDays (:FourDays)

SubClassOf(:FourDays :Days)
SubClassOf(:FourDays ObjectSomeValuesFrom(:hasPart :Day))
SubClassOf(:FourDays ObjectSomeValuesFrom(:hasUnitOfTime :Day))

# Class: :FreeDay (:FreeDay)

AnnotationAssertion(rdfs:comment :FreeDay "A day when not working, for example a Saturday or Sunday"@en)
SubClassOf(:FreeDay :Day)

# Class: :Fruit (:Fruit)

SubClassOf(:Fruit :VegetablesAndFruit)

# Class: :GPLOrMethane (:GPLOrMethane)

AnnotationAssertion(rdfs:comment :GPLOrMethane "MB4b"^^xsd:string)
SubClassOf(:GPLOrMethane :Car)
SubClassOf(:GPLOrMethane DataHasValue(:hasCarFuelValue "3"^^xsd:integer))

# Class: :GasHouseHeating (:GasHouseHeating)

AnnotationAssertion(rdfs:comment :GasHouseHeating "EU7"^^xsd:string)
SubClassOf(:GasHouseHeating :HomeHeating)
SubClassOf(:GasHouseHeating ObjectSomeValuesFrom(:isHeatingFor DataHasValue(:hasGasHotWaterHeating "true"^^xsd:boolean)))

# Class: :GasTurbine (:GasTurbine)

SubClassOf(:GasTurbine :HomeGeneratedElectricity)
SubClassOf(:GasTurbine DataHasValue(:hasSourceOfHomeGenerationOfElectricityValue "3"^^xsd:integer))

# Class: :GasWaterHeating (:GasWaterHeating)

AnnotationAssertion(rdfs:comment :GasWaterHeating "EU7"^^xsd:string)
SubClassOf(:GasWaterHeating :WaterHeating)
SubClassOf(:GasWaterHeating ObjectSomeValuesFrom(:isWaterHeatingFor DataHasValue(:hasGasHotWaterHeating "true"^^xsd:boolean)))

# Class: :Gasoline (:Gasoline)

AnnotationAssertion(rdfs:comment :Gasoline "MB4b"^^xsd:string)
SubClassOf(:Gasoline :Car)
SubClassOf(:Gasoline DataHasValue(:hasCarFuelValue "1"^^xsd:integer))

# Class: :Heating (:Heating)

SubClassOf(:Heating ObjectSomeValuesFrom(:isPartOf :Dwelling))

# Class: :HedonismAspiration (:HedonismAspiration)

AnnotationAssertion(rdfs:comment :HedonismAspiration "AH1"^^xsd:string)
AnnotationAssertion(rdfs:comment :HedonismAspiration "AH2"^^xsd:string)
AnnotationAssertion(rdfs:comment :HedonismAspiration "AH3"^^xsd:string)
SubClassOf(:HedonismAspiration :Aspiration)

# Class: :HighSchool (:HighSchool)

AnnotationAssertion(rdfs:comment :HighSchool "SD3"^^xsd:string)
SubClassOf(:HighSchool :QualificationLevel)
SubClassOf(:HighSchool ObjectSomeValuesFrom(:isTheQualificationLevelOf DataHasValue(:hasHighestQualficationLevelValue "4"^^xsd:integer)))

# Class: :Home (:Home)

EquivalentClasses(:Home :Household)

# Class: :HomeGeneratedElectricity (:HomeGeneratedElectricity)

SubClassOf(:HomeGeneratedElectricity :Electricity)

# Class: :HomeHeating (:HomeHeating)

AnnotationAssertion(rdfs:comment :HomeHeating "EU9b"^^xsd:string)
SubClassOf(:HomeHeating :Heating)

# Class: :HomeHeatingMethodUnknown (:HomeHeatingMethodUnknown)

AnnotationAssertion(rdfs:comment :HomeHeatingMethodUnknown "EU7"^^xsd:string)
SubClassOf(:HomeHeatingMethodUnknown :HomeHeating)
SubClassOf(:HomeHeatingMethodUnknown ObjectSomeValuesFrom(:isHouseHeatingFor DataHasValue(:doesNotKnowHowHouseIsHeated "true"^^xsd:boolean)))

# Class: :HomeInsulation (:HomeInsulation)

SubClassOf(:HomeInsulation ObjectSomeValuesFrom(:isPartOf :Dwelling))

# Class: :HomeIsNotHeated (:HomeIsNotHeated)

AnnotationAssertion(rdfs:comment :HomeIsNotHeated "EU7"^^xsd:string)
SubClassOf(:HomeIsNotHeated :HomeHeating)
SubClassOf(:HomeIsNotHeated ObjectSomeValuesFrom(:isHouseHeatingFor DataHasValue(:doesNotHeatHome "true"^^xsd:boolean)))

# Class: :Hotel (:Hotel)

SubClassOf(:Hotel :Accomodation)
SubClassOf(:Hotel ObjectSomeValuesFrom(:usesAccomodation DataHasValue(:hasTypeOfAccommodationForPrivateTravelValue "1"^^xsd:integer)))

# Class: :Hour (:Hour)

SubClassOf(:Hour :UnitsOfMeasurementOfTime)

# Class: :HouseWorkerOrHouseWife (Housework/housewife)

AnnotationAssertion(rdfs:comment :HouseWorkerOrHouseWife "WL1a"^^xsd:string)
AnnotationAssertion(rdfs:label :HouseWorkerOrHouseWife "Housework/housewife"@en)
SubClassOf(:HouseWorkerOrHouseWife :Employment)
SubClassOf(:HouseWorkerOrHouseWife ObjectSomeValuesFrom(:isEmploymentStatusFor DataHasValue(:hasCurrentEmploymentStatus "7"^^xsd:integer)))

# Class: :Household (:Household)

AnnotationAssertion(rdfs:comment :Household "SD5"^^xsd:string)
AnnotationAssertion(rdfs:comment :Household "SD6"^^xsd:string)

# Class: :Hybrid (:Hybrid)

AnnotationAssertion(rdfs:comment :Hybrid "MB4b"^^xsd:string)
SubClassOf(:Hybrid :Car)
SubClassOf(:Hybrid DataHasValue(:hasCarFuelValue "4"^^xsd:integer))

# Class: :InStorePurchases (:InStorePurchases)

SubClassOf(:InStorePurchases :FoodBill)
SubClassOf(:InStorePurchases ObjectSomeValuesFrom(:isSpentBy DataSomeValuesFrom(:hasAmountSpentPerWeekPerIndividualStorePurchasesValue DatatypeRestriction(xsd:decimal xsd:minExclusive "0"^^xsd:decimal))))

# Class: :Indoor (:Indoor)

AnnotationAssertion(rdfs:comment :Indoor "CL1c"^^xsd:string)
SubClassOf(:Indoor :Location)
DisjointClasses(:Indoor :Outdoor)

# Class: :Institution (:Institution)

AnnotationAssertion(rdfs:comment :Institution "SB2"^^xsd:string)

# Class: :InternalAttitude (:InternalAttitude)

AnnotationAssertion(rdfs:comment :InternalAttitude "II"^^xsd:string)

# Class: :JobSeeker (Job seeker)

AnnotationAssertion(rdfs:comment :JobSeeker "WL1a"^^xsd:string)
AnnotationAssertion(rdfs:label :JobSeeker "Job seeker"@en)
SubClassOf(:JobSeeker :Employment)
SubClassOf(:JobSeeker ObjectSomeValuesFrom(:isEmploymentStatusFor DataHasValue(:hasCurrentEmploymentStatus "11"^^xsd:integer)))

# Class: :Kilometre (:Kilometre)

SubClassOf(:Kilometre :UnitsOfMeasurementOfLength)

# Class: :LabelledOrganic (:LabelledOrganic)

AnnotationAssertion(rdfs:comment :LabelledOrganic "FC4"^^xsd:string)
SubClassOf(:LabelledOrganic :LabelledOrganicOrEcological)

# Class: :LabelledOrganicOrEcological (:LabelledOrganicOrEcological)

AnnotationAssertion(rdfs:comment :LabelledOrganicOrEcological "FC4"^^xsd:string)
SubClassOf(:LabelledOrganicOrEcological :Food)

# Class: :LargeOrFamiliarOrStationWagon (:LargeOrFamiliarOrStationWagon)

AnnotationAssertion(rdfs:comment :LargeOrFamiliarOrStationWagon "MB4a"^^xsd:string)
SubClassOf(:LargeOrFamiliarOrStationWagon :Car)
SubClassOf(:LargeOrFamiliarOrStationWagon DataHasValue(:hasCarTypeValue "3"^^xsd:integer))

# Class: :LeftOfCentre (:LeftOfCentre)

AnnotationAssertion(rdfs:comment :LeftOfCentre "SD8"^^xsd:string)
SubClassOf(:LeftOfCentre :Person)
SubClassOf(:LeftOfCentre DataHasValue(:hasPolitcalSpectrumValue "3"^^xsd:integer))

# Class: :LeftWing (:LeftWing)

AnnotationAssertion(rdfs:comment :LeftWing "SD8"^^xsd:string)
SubClassOf(:LeftWing :Person)
SubClassOf(:LeftWing ObjectUnionOf(DataHasValue(:hasPolitcalSpectrumValue "1"^^xsd:integer) DataHasValue(:hasPolitcalSpectrumValue "2"^^xsd:integer)))

# Class: :LeisureTime (:LeisureTime)

SubClassOf(:LeisureTime :NoneWorkTime)

# Class: :LivingAlone (:LivingAlone)

SubClassOf(:LivingAlone :Person)

# Class: :LivingWithOthers (:LivingWithOthers)

SubClassOf(:LivingWithOthers :Person)

# Class: :Local (:Local)

SubClassOf(:Local :Location)
DisjointClasses(:Local :Remote)

# Class: :LocalCommunity (:LocalCommunity)

AnnotationAssertion(rdfs:comment :LocalCommunity "CL1a"^^xsd:string)
SubClassOf(:LocalCommunity :Community)

# Class: :LocalProduct (:LocalProduct)

AnnotationAssertion(rdfs:comment :LocalProduct "FC4"^^xsd:string)
SubClassOf(:LocalProduct :RegionalOrLocalProducts)
SubClassOf(:LocalProduct ObjectSomeValuesFrom(:hasOrigin :Local))

# Class: :LongFlight (:LongFlight)

SubClassOf(:LongFlight :Flight)
SubClassOf(:LongFlight ObjectUnionOf(ObjectIntersectionOf(ObjectSomeValuesFrom(:hasUnitOfLength :Kilometre) DataSomeValuesFrom(:hasDistance DatatypeRestriction(xsd:decimal xsd:minExclusive "4000"^^xsd:decimal))) ObjectIntersectionOf(ObjectSomeValuesFrom(:hasUnitOfTime :Hour) DataSomeValuesFrom(:hasTime DatatypeRestriction(xsd:decimal xsd:minExclusive "4.5"^^xsd:decimal)))))
DisjointClasses(:LongFlight :ShortFlight)

# Class: :Male (:Male)

SubClassOf(:Male :Person)
SubClassOf(:Male DataHasValue(:hasGenderValue "1"^^xsd:integer))

# Class: :ManufacturingMethod (:ManufacturingMethod)

DisjointUnion(:ManufacturingMethod :NonSustainableMethod :SustainableMethod)

# Class: :Married (:Married)

AnnotationAssertion(rdfs:comment :Married "SD4"^^xsd:string)
SubClassOf(:Married :Person)
SubClassOf(:Married DataHasValue(:hasMaritalStatusValue "3"^^xsd:integer))

# Class: :MastersDegree (:MastersDegree)

AnnotationAssertion(rdfs:comment :MastersDegree "SD3"^^xsd:string)
SubClassOf(:MastersDegree :QualificationLevel)
SubClassOf(:MastersDegree ObjectSomeValuesFrom(:isTheQualificationLevelOf DataHasValue(:hasHighestQualficationLevelValue "7"^^xsd:integer)))

# Class: :MaternityLeave (Maternity leave or other kinds of leaves)

AnnotationAssertion(rdfs:comment :MaternityLeave "WL1a"^^xsd:string)
AnnotationAssertion(rdfs:label :MaternityLeave "Maternity leave or other kinds of leaves"@en)
SubClassOf(:MaternityLeave :Employment)
SubClassOf(:MaternityLeave ObjectSomeValuesFrom(:isEmploymentStatusFor DataHasValue(:hasCurrentEmploymentStatus "8"^^xsd:integer)))

# Class: :MembersOfHousehold (:MembersOfHousehold)

SubClassOf(:MembersOfHousehold :CollectionOfIndividuals)
SubClassOf(:MembersOfHousehold ObjectMinCardinality(2 :hasPart ObjectSomeValuesFrom(:resides :Household)))

# Class: :Mini (:Mini)

AnnotationAssertion(rdfs:comment :Mini "MB4a"^^xsd:string)
SubClassOf(:Mini :Car)
SubClassOf(:Mini DataHasValue(:hasCarTypeValue "1"^^xsd:integer))

# Class: :Motorbike (:Motorbike)

SubClassOf(:Motorbike :Transport)
SubClassOf(:Motorbike ObjectSomeValuesFrom(:isTransportUsedForTravel DataHasValue(:journeyHasMeansOfTransportationValue "4"^^xsd:integer)))

# Class: :Multi-familyHouse (:Multi-familyHouse)

AnnotationAssertion(rdfs:comment :Multi-familyHouse "EU2"^^xsd:string)
SubClassOf(:Multi-familyHouse :Household)
SubClassOf(:Multi-familyHouse ObjectSomeValuesFrom(:resident DataHasValue(:hasTypeOfDwellingValue "3"^^xsd:integer)))

# Class: :Neighbour (:Neighbour)

AnnotationAssertion(rdfs:comment :Neighbour "NQ1c"^^xsd:string)
SubClassOf(:Neighbour :Person)

# Class: :Neighbourhood (:Neighbourhood)

AnnotationAssertion(rdfs:comment :Neighbourhood "NQ1b"^^xsd:string)
SubClassOf(:Neighbourhood :Local)

# Class: :NeighbourhoodQuality (:NeighbourhoodQuality)

AnnotationAssertion(rdfs:comment :NeighbourhoodQuality "NQ"^^xsd:string)

# Class: :Never (:Never)

SubClassOf(:Never :Frequency)
DisjointClasses(:Never :WeeklyFrequency)

# Class: :NoEducation (:NoEducation)

AnnotationAssertion(rdfs:comment :NoEducation "SD3"^^xsd:string)
SubClassOf(:NoEducation :QualificationLevel)
SubClassOf(:NoEducation ObjectSomeValuesFrom(:isTheQualificationLevelOf DataHasValue(:hasHighestQualficationLevelValue "1"^^xsd:integer)))

# Class: :NonSustainableMethod (:NonSustainableMethod)

AnnotationAssertion(rdfs:comment :NonSustainableMethod "SB2"^^xsd:string)
SubClassOf(:NonSustainableMethod :ManufacturingMethod)
DisjointClasses(:NonSustainableMethod :SustainableMethod)

# Class: :NoneWorkTime (:NoneWorkTime)

SubClassOf(:NoneWorkTime :Time)
DisjointClasses(:NoneWorkTime :WorkTime)

# Class: :OccasionalTemporaryContracts (Occasional temporary contracts)

AnnotationAssertion(rdfs:comment :OccasionalTemporaryContracts "WL1a"^^xsd:string)
AnnotationAssertion(rdfs:label :OccasionalTemporaryContracts "Occasional temporary contracts"@en)
SubClassOf(:OccasionalTemporaryContracts :Employment)
SubClassOf(:OccasionalTemporaryContracts ObjectSomeValuesFrom(:isEmploymentStatusFor DataHasValue(:hasCurrentEmploymentStatus "6"^^xsd:integer)))

# Class: :OilHouseHeating (:OilHouseHeating)

AnnotationAssertion(rdfs:comment :OilHouseHeating "EU7"^^xsd:string)
SubClassOf(:OilHouseHeating :HomeHeating)
SubClassOf(:OilHouseHeating ObjectSomeValuesFrom(:isHeatingFor DataHasValue(:hasOilHeating "true"^^xsd:boolean)))

# Class: :OilWaterHeating (:OilWaterHeating)

AnnotationAssertion(rdfs:comment :OilWaterHeating "EU7"^^xsd:string)
SubClassOf(:OilWaterHeating :WaterHeating)
SubClassOf(:OilWaterHeating ObjectSomeValuesFrom(:isWaterHeatingFor DataHasValue(:hasOilHotWaterHeating "true"^^xsd:boolean)))

# Class: :OneDay (:OneDay)

SubClassOf(:OneDay :Days)
SubClassOf(:OneDay ObjectSomeValuesFrom(:hasUnitOfTime :Day))

# Class: :OneWeek (:OneWeek)

EquivalentClasses(:OneWeek :SevenDays)
EquivalentClasses(:OneWeek :Week)
SubClassOf(:OneWeek :Weeks)

# Class: :OrganicWaste (:OrganicWaste)

AnnotationAssertion(rdfs:comment :OrganicWaste "FC5"^^xsd:string)

# Class: :OtherFormOfElectricalGeneration (:OtherFormOfElectricalGeneration)

SubClassOf(:OtherFormOfElectricalGeneration :HomeGeneratedElectricity)

# Class: :OtherTransport (:OtherTransport)

SubClassOf(:OtherTransport :Transport)
SubClassOf(:OtherTransport ObjectSomeValuesFrom(:isTransportUsedForTravel DataHasValue(:journeyHasMeansOfTransportationValue "9"^^xsd:integer)))

# Class: :OtherTypeOfAccomodation (:OtherTypeOfAccomodation)

SubClassOf(:OtherTypeOfAccomodation :Accomodation)
SubClassOf(:OtherTypeOfAccomodation ObjectSomeValuesFrom(:usesAccomodation DataHasValue(:hasTypeOfAccommodationForPrivateTravelValue "9"^^xsd:integer)))

# Class: :Outdoor (:Outdoor)

AnnotationAssertion(rdfs:comment :Outdoor "CL1c"^^xsd:string)
SubClassOf(:Outdoor :Location)

# Class: :PelletHouseHeating (:PelletHouseHeating)

AnnotationAssertion(rdfs:comment :PelletHouseHeating "EU7"^^xsd:string)
SubClassOf(:PelletHouseHeating :HomeHeating)
SubClassOf(:PelletHouseHeating ObjectSomeValuesFrom(:isHeatingFor DataHasValue(:hasWoodPelletHeating "true"^^xsd:boolean)))

# Class: :PelletWaterHeating (:PelletWaterHeating)

AnnotationAssertion(rdfs:comment :PelletWaterHeating "EU7"^^xsd:string)
SubClassOf(:PelletWaterHeating :WaterHeating)
SubClassOf(:PelletWaterHeating ObjectSomeValuesFrom(:isWaterHeatingFor DataHasValue(:hasWoodPelletHotWaterHeating "true"^^xsd:boolean)))

# Class: :PeopleOfEmotionalImportance (:PeopleOfEmotionalImportance)

SubClassOf(:PeopleOfEmotionalImportance :CollectionOfIndividuals)
SubClassOf(:PeopleOfEmotionalImportance ObjectSomeValuesFrom(:caresAbout :Person))

# Class: :Person (:Person)

DisjointUnion(:Person :Female :Male)

# Class: :PlasticBags (:PlasticBags)

AnnotationAssertion(rdfs:comment :PlasticBags "FC5"^^xsd:string)
SubClassOf(:PlasticBags :Plastic)

# Class: :PlasticPackaging (:PlasticPackaging)

AnnotationAssertion(rdfs:comment :PlasticPackaging "FC4"^^xsd:string)
SubClassOf(:PlasticPackaging :Plastic)

# Class: :PopularityAspiration (:PopularityAspiration)

AnnotationAssertion(rdfs:comment :PopularityAspiration "AP1"^^xsd:string)
AnnotationAssertion(rdfs:comment :PopularityAspiration "AP2"^^xsd:string)
AnnotationAssertion(rdfs:comment :PopularityAspiration "AP3"^^xsd:string)
SubClassOf(:PopularityAspiration :Aspiration)

# Class: :Pork (:Pork)

AnnotationAssertion(rdfs:comment :Pork "FC3"^^xsd:string)
SubClassOf(:Pork :Food)
SubClassOf(:Pork ObjectSomeValuesFrom(:hasFrequency :WeeklyFrequency))

# Class: :Preprepared (:Preprepared)

AnnotationAssertion(rdfs:comment :Preprepared "FC3"^^xsd:string)
SubClassOf(:Preprepared :Food)
SubClassOf(:Preprepared ObjectSomeValuesFrom(:hasFrequency :WeeklyFrequency))

# Class: :PrimarySchool (:PrimarySchool)

AnnotationAssertion(rdfs:comment :PrimarySchool "SD3"^^xsd:string)
SubClassOf(:PrimarySchool :QualificationLevel)
SubClassOf(:PrimarySchool ObjectSomeValuesFrom(:isTheQualificationLevelOf DataHasValue(:hasHighestQualficationLevelValue "2"^^xsd:integer)))

# Class: :PrivateTravel (:PrivateTravel)

SubClassOf(:PrivateTravel :Journey)

# Class: :ProEnvironmentalIdentity (:ProEnvironmentalIdentity)

AnnotationAssertion(rdfs:comment :ProEnvironmentalIdentity "ID1"^^xsd:string)
AnnotationAssertion(rdfs:comment :ProEnvironmentalIdentity "ID2"^^xsd:string)
AnnotationAssertion(rdfs:comment :ProEnvironmentalIdentity "ID3"^^xsd:string)

# Class: :PublicTransport (:PublicTransport)

SubClassOf(:PublicTransport :Transport)

# Class: :QualificationLevel (:QualificationLevel)

AnnotationAssertion(rdfs:comment :QualificationLevel "SD3"^^xsd:string)

# Class: :Regional (:Regional)

SubClassOf(:Regional :Location)

# Class: :RegionalOrLocalProducts (:RegionalOrLocalProducts)

AnnotationAssertion(rdfs:comment :RegionalOrLocalProducts "FC4"^^xsd:string)
SubClassOf(:RegionalOrLocalProducts :Food)

# Class: :RegionalProduct (:RegionalProduct)

AnnotationAssertion(rdfs:comment :RegionalProduct "FC4"^^xsd:string)
SubClassOf(:RegionalProduct :RegionalOrLocalProducts)
SubClassOf(:RegionalProduct ObjectSomeValuesFrom(:hasOrigin :Regional))

# Class: :RegularPrivateTravel (:RegularPrivateTravel)

AnnotationAssertion(rdfs:comment :RegularPrivateTravel "MB2.a1"^^xsd:string)
AnnotationAssertion(rdfs:comment :RegularPrivateTravel "MB2.a2"^^xsd:string)
AnnotationAssertion(rdfs:comment :RegularPrivateTravel "MB2.a3"^^xsd:string)
AnnotationAssertion(rdfs:comment :RegularPrivateTravel "MB2.b1"^^xsd:string)
AnnotationAssertion(rdfs:comment :RegularPrivateTravel "MB2.b2"^^xsd:string)
AnnotationAssertion(rdfs:comment :RegularPrivateTravel "MB2.b3"^^xsd:string)
AnnotationAssertion(rdfs:comment :RegularPrivateTravel "MB2.c1"^^xsd:string)
AnnotationAssertion(rdfs:comment :RegularPrivateTravel "MB2.c2"^^xsd:string)
AnnotationAssertion(rdfs:comment :RegularPrivateTravel "MB2.c3"^^xsd:string)
SubClassOf(:RegularPrivateTravel :PrivateTravel)

# Class: :RegularPrivateTravelTrip1 (:RegularPrivateTravelTrip1)

AnnotationAssertion(rdfs:comment :RegularPrivateTravelTrip1 "MB2.a1"^^xsd:string)
AnnotationAssertion(rdfs:comment :RegularPrivateTravelTrip1 "MB2.a2"^^xsd:string)
AnnotationAssertion(rdfs:comment :RegularPrivateTravelTrip1 "MB2.a3"^^xsd:string)
SubClassOf(:RegularPrivateTravelTrip1 :RegularPrivateTravel)

# Class: :RegularPrivateTravelTrip2 (:RegularPrivateTravelTrip2)

AnnotationAssertion(rdfs:comment :RegularPrivateTravelTrip2 "MB2.b1"^^xsd:string)
AnnotationAssertion(rdfs:comment :RegularPrivateTravelTrip2 "MB2.b2"^^xsd:string)
AnnotationAssertion(rdfs:comment :RegularPrivateTravelTrip2 "MB2.b3"^^xsd:string)
SubClassOf(:RegularPrivateTravelTrip2 :RegularPrivateTravel)

# Class: :RegularPrivateTravelTrip3 (:RegularPrivateTravelTrip3)

AnnotationAssertion(rdfs:comment :RegularPrivateTravelTrip3 "MB2.c1"^^xsd:string)
AnnotationAssertion(rdfs:comment :RegularPrivateTravelTrip3 "MB2.c2"^^xsd:string)
AnnotationAssertion(rdfs:comment :RegularPrivateTravelTrip3 "MB2.c3"^^xsd:string)
SubClassOf(:RegularPrivateTravelTrip3 :RegularPrivateTravel)

# Class: :Remote (:Remote)

SubClassOf(:Remote :Location)

# Class: :Retired (Retired)

AnnotationAssertion(rdfs:comment :Retired "WL1a"^^xsd:string)
AnnotationAssertion(rdfs:label :Retired "Retired"@en)
SubClassOf(:Retired :Employment)
SubClassOf(:Retired ObjectSomeValuesFrom(:isEmploymentStatusFor DataHasValue(:hasCurrentEmploymentStatus "10"^^xsd:integer)))

# Class: :RightOfCentre (:RightOfCentre)

AnnotationAssertion(rdfs:comment :RightOfCentre "SD8"^^xsd:string)
SubClassOf(:RightOfCentre :Person)
SubClassOf(:RightOfCentre DataHasValue(:hasPolitcalSpectrumValue "3"^^xsd:integer))

# Class: :RightWing (:RightWing)

AnnotationAssertion(rdfs:comment :RightWing "SD8"^^xsd:string)
SubClassOf(:RightWing :Person)
SubClassOf(:RightWing ObjectUnionOf(DataHasValue(:hasPolitcalSpectrumValue "6"^^xsd:integer) DataHasValue(:hasPolitcalSpectrumValue "7"^^xsd:integer)))

# Class: :Room (:Room)

SubClassOf(:Room ObjectSomeValuesFrom(:isPartOf :Dwelling))

# Class: :Rural (:Rural)

AnnotationAssertion(rdfs:comment :Rural "SD10"^^xsd:string)
SubClassOf(:Rural :Location)
SubClassOf(:Rural ObjectSomeValuesFrom(:isLocationOf DataHasValue(:hasLivingAreaValue "2"^^xsd:integer)))
DisjointClasses(:Rural :Urban)

# Class: :SUVor4X4 (:SUVor4X4)

AnnotationAssertion(rdfs:comment :SUVor4X4 "MB4a"^^xsd:string)
SubClassOf(:SUVor4X4 :Car)
SubClassOf(:SUVor4X4 DataHasValue(:hasCarTypeValue "4"^^xsd:integer))

# Class: :SchwarzScale (:SchwarzScale)

AnnotationAssertion(rdfs:comment :SchwarzScale "SS"^^xsd:string)

# Class: :Seasonal (:Seasonal)

AnnotationAssertion(rdfs:comment :Seasonal "FC4"^^xsd:string)
SubClassOf(:Seasonal :Food)

# Class: :SecondHandShop (:SecondHandShop)

AnnotationAssertion(rdfs:comment :SecondHandShop "SB2"^^xsd:string)
SubClassOf(:SecondHandShop :Shop)

# Class: :SecondarySchool (:SecondarySchool)

AnnotationAssertion(rdfs:comment :SecondarySchool "SD3"^^xsd:string)
SubClassOf(:SecondarySchool :QualificationLevel)
SubClassOf(:SecondarySchool ObjectSomeValuesFrom(:isTheQualificationLevelOf DataHasValue(:hasHighestQualficationLevelValue "3"^^xsd:integer)))

# Class: :SelfAcceptanceAspiration (:SelfAcceptanceAspiration)

AnnotationAssertion(rdfs:comment :SelfAcceptanceAspiration "ASA1"^^xsd:string)
AnnotationAssertion(rdfs:comment :SelfAcceptanceAspiration "ASA2"^^xsd:string)
AnnotationAssertion(rdfs:comment :SelfAcceptanceAspiration "ASA3"^^xsd:string)
AnnotationAssertion(rdfs:comment :SelfAcceptanceAspiration "ASA4"^^xsd:string)
AnnotationAssertion(rdfs:comment :SelfAcceptanceAspiration "ASA5"^^xsd:string)
AnnotationAssertion(rdfs:comment :SelfAcceptanceAspiration "ASA6"^^xsd:string)
AnnotationAssertion(rdfs:comment :SelfAcceptanceAspiration "ASA7"^^xsd:string)
SubClassOf(:SelfAcceptanceAspiration :Aspiration)

# Class: :SelfEfficacy (:SelfEfficacy)

AnnotationAssertion(rdfs:comment :SelfEfficacy "SE1"^^xsd:string)
AnnotationAssertion(rdfs:comment :SelfEfficacy "SE2"^^xsd:string)
AnnotationAssertion(rdfs:comment :SelfEfficacy "SE3"^^xsd:string)
AnnotationAssertion(rdfs:comment :SelfEfficacy "SE4"^^xsd:string)
AnnotationAssertion(rdfs:comment :SelfEfficacy "SE5"^^xsd:string)
AnnotationAssertion(rdfs:comment :SelfEfficacy "SE6"^^xsd:string)
AnnotationAssertion(rdfs:comment :SelfEfficacy "SE7"^^xsd:string)
AnnotationAssertion(rdfs:comment :SelfEfficacy "SE8"^^xsd:string)

# Class: :Separated (:Separated)

SubClassOf(:Separated :DivorcedOrSeparated)

# Class: :SevenDays (:SevenDays)

SubClassOf(:SevenDays :Days)
SubClassOf(:SevenDays ObjectSomeValuesFrom(:hasPart :Day))
SubClassOf(:SevenDays ObjectSomeValuesFrom(:hasUnitOfTime :Day))

# Class: :Shoes (:Shoes)

AnnotationAssertion(rdfs:comment :Shoes "SB1"^^xsd:string)
SubClassOf(:Shoes :ClothingOrShoesOrAccessories)

# Class: :Shop (:Shop)

AnnotationAssertion(rdfs:comment :Shop "SB2"^^xsd:string)
SubClassOf(:Shop :Institution)

# Class: :ShortFlight (:ShortFlight)

SubClassOf(:ShortFlight :Flight)
SubClassOf(:ShortFlight ObjectUnionOf(ObjectIntersectionOf(ObjectSomeValuesFrom(:hasUnitOfLength :Kilometre) DataSomeValuesFrom(:hasDistance DatatypeRestriction(xsd:decimal xsd:maxInclusive "4000"^^xsd:decimal))) ObjectIntersectionOf(ObjectSomeValuesFrom(:hasUnitOfTime :Hour) DataSomeValuesFrom(:hasTime DatatypeRestriction(xsd:decimal xsd:maxInclusive "4.5"^^xsd:decimal)))))

# Class: :Single (:Single)

SubClassOf(:Single :Person)

# Class: :SingleFamilyHouse (:SingleFamilyHouse)

AnnotationAssertion(rdfs:comment :SingleFamilyHouse "EU2"^^xsd:string)
SubClassOf(:SingleFamilyHouse :Household)
SubClassOf(:SingleFamilyHouse ObjectSomeValuesFrom(:resident DataHasValue(:hasTypeOfDwellingValue "1"^^xsd:integer)))

# Class: :SingleLivingAlone (:SingleLivingAlone)

AnnotationAssertion(rdfs:comment :SingleLivingAlone "SD4"^^xsd:string)
SubClassOf(:SingleLivingAlone :LivingAlone)
SubClassOf(:SingleLivingAlone :Single)
SubClassOf(:SingleLivingAlone DataHasValue(:hasMaritalStatusValue "1"^^xsd:integer))

# Class: :SingleLivingWithOthers (:SingleLivingWithOthers)

AnnotationAssertion(rdfs:comment :SingleLivingWithOthers "SD4"^^xsd:string)
SubClassOf(:SingleLivingWithOthers :LivingWithOthers)
SubClassOf(:SingleLivingWithOthers :Single)
SubClassOf(:SingleLivingWithOthers DataHasValue(:hasMaritalStatusValue "2"^^xsd:integer))

# Class: :SixToSevenDays (:SixToSevenDays)

SubClassOf(:SixToSevenDays :Days)
SubClassOf(:SixToSevenDays ObjectSomeValuesFrom(:hasPart :Day))
SubClassOf(:SixToSevenDays ObjectSomeValuesFrom(:hasUnitOfTime :Day))

# Class: :SocialNorm (:SocialNorm)

AnnotationAssertion(rdfs:comment :SocialNorm "SN1"^^xsd:string)
AnnotationAssertion(rdfs:comment :SocialNorm "SN2"^^xsd:string)
AnnotationAssertion(rdfs:comment :SocialNorm "SN3"^^xsd:string)
AnnotationAssertion(rdfs:comment :SocialNorm "SN4"^^xsd:string)
AnnotationAssertion(rdfs:comment :SocialNorm "SN5"^^xsd:string)
AnnotationAssertion(rdfs:comment :SocialNorm "SN6"^^xsd:string)

# Class: :SocialTime (:SocialTime)

SubClassOf(:SocialTime :NoneWorkTime)

# Class: :SolarCellPanel (:SolarCellPanel)

SubClassOf(:SolarCellPanel :HomeGeneratedElectricity)
SubClassOf(:SolarCellPanel DataHasValue(:hasSourceOfHomeGenerationOfElectricityValue "1"^^xsd:integer))

# Class: :SolarOrThermalHouseHeating (:SolarOrThermalHouseHeating)

AnnotationAssertion(rdfs:comment :SolarOrThermalHouseHeating "EU7"^^xsd:string)
SubClassOf(:SolarOrThermalHouseHeating :HomeHeating)
SubClassOf(:SolarOrThermalHouseHeating ObjectSomeValuesFrom(:isHouseHeatingFor DataHasValue(:hasSolarOrThermalHeating "true"^^xsd:boolean)))

# Class: :SolarOrThermalWaterHeating (:SolarOrThermalWaterHeating)

AnnotationAssertion(rdfs:comment :SolarOrThermalWaterHeating "EU7"^^xsd:string)
SubClassOf(:SolarOrThermalWaterHeating :WaterHeating)
SubClassOf(:SolarOrThermalWaterHeating ObjectSomeValuesFrom(:isWaterHeatingFor DataHasValue(:hasSolarOrThermalHotWaterHeating "true"^^xsd:boolean)))

# Class: :SpiritualityAspiration (:SpiritualityAspiration)

AnnotationAssertion(rdfs:comment :SpiritualityAspiration "AS1"^^xsd:string)
AnnotationAssertion(rdfs:comment :SpiritualityAspiration "AS2"^^xsd:string)
AnnotationAssertion(rdfs:comment :SpiritualityAspiration "AS3"^^xsd:string)
AnnotationAssertion(rdfs:comment :SpiritualityAspiration "AS4"^^xsd:string)
SubClassOf(:SpiritualityAspiration :Aspiration)

# Class: :StayAtFriendsHome (:StayAtFriendsHome)

SubClassOf(:StayAtFriendsHome :Accomodation)
SubClassOf(:StayAtFriendsHome ObjectSomeValuesFrom(:usesAccomodation DataHasValue(:hasTypeOfAccommodationForPrivateTravelValue "8"^^xsd:integer)))

# Class: :Student (Student)

AnnotationAssertion(rdfs:comment :Student "WL1a"^^xsd:string)
AnnotationAssertion(rdfs:label :Student "Student"@en)
SubClassOf(:Student :Employment)
SubClassOf(:Student ObjectSomeValuesFrom(:isEmploymentStatusFor DataHasValue(:hasCurrentEmploymentStatus "9"^^xsd:integer)))

# Class: :Summer (:Summer)

SubClassOf(:Summer :UnitsOfMeasurementOfTime)
DisjointClasses(:Summer :Winter)

# Class: :Surburban (:Surburban)

AnnotationAssertion(rdfs:comment :Surburban "SD10"^^xsd:string)
SubClassOf(:Surburban :Location)
SubClassOf(:Surburban ObjectSomeValuesFrom(:isLocationOf DataHasValue(:hasLivingAreaValue "3"^^xsd:integer)))

# Class: :SustainabilityInitiativeService (:SustainabilityInitiativeService)

AnnotationAssertion(rdfs:comment :SustainabilityInitiativeService "IU"^^xsd:string)

# Class: :SustainableClothing (:SustainableClothing)

AnnotationAssertion(rdfs:comment :SustainableClothing "SB2"^^xsd:string)
SubClassOf(:SustainableClothing :ClothingOrShoesOrAccessories)
SubClassOf(:SustainableClothing ObjectSomeValuesFrom(:made :SustainableMethod))

# Class: :SustainableMethod (:SustainableMethod)

AnnotationAssertion(rdfs:comment :SustainableMethod "SB2"^^xsd:string)
SubClassOf(:SustainableMethod :ManufacturingMethod)

# Class: :TakeAway (:TakeAway)

SubClassOf(:TakeAway :FoodBill)
SubClassOf(:TakeAway ObjectSomeValuesFrom(:isSpentBy DataSomeValuesFrom(:hasAmountSpentPerWeekPerIndividualTakeAwayValue DatatypeRestriction(xsd:decimal xsd:minExclusive "0"^^xsd:decimal))))

# Class: :TerracedHouse (:TerracedHouse)

AnnotationAssertion(rdfs:comment :TerracedHouse "EU2"^^xsd:string)
SubClassOf(:TerracedHouse :Household)
SubClassOf(:TerracedHouse ObjectSomeValuesFrom(:resident DataHasValue(:hasTypeOfDwellingValue "2"^^xsd:integer)))

# Class: :ThreeDays (:ThreeDays)

SubClassOf(:ThreeDays :Days)
SubClassOf(:ThreeDays ObjectSomeValuesFrom(:hasPart :Day))
SubClassOf(:ThreeDays ObjectSomeValuesFrom(:hasUnitOfTime :Day))

# Class: :TimeAffluence (:TimeAffluence)

AnnotationAssertion(rdfs:comment :TimeAffluence "TA"^^xsd:string)

# Class: :Times (:Times)

SubClassOf(:Times :Collection)
DisjointUnion(:Times :NoneWorkTime :WorkTime)

# Class: :TramOrUnderground (:TramOrUnderground)

SubClassOf(:TramOrUnderground :PublicTransport)
SubClassOf(:TramOrUnderground ObjectSomeValuesFrom(:isTransportUsedForTravel DataHasValue(:journeyHasMeansOfTransportationValue "7"^^xsd:integer)))

# Class: :Transport (:Transport)

AnnotationAssertion(rdfs:comment :Transport "MB1"^^xsd:string)
AnnotationAssertion(rdfs:comment :Transport "MB2"^^xsd:string)

# Class: :TwoDays (:TwoDays)

SubClassOf(:TwoDays :Days)
SubClassOf(:TwoDays ObjectSomeValuesFrom(:hasUnitOfTime :Day))

# Class: :Unemployed (Unemployed)

AnnotationAssertion(rdfs:comment :Unemployed "WL1a"^^xsd:string)
AnnotationAssertion(rdfs:label :Unemployed "Unemployed"@en)
SubClassOf(:Unemployed :Employment)
SubClassOf(:Unemployed ObjectSomeValuesFrom(:isEmploymentStatusFor DataHasValue(:hasCurrentEmploymentStatus "12"^^xsd:integer)))

# Class: :UnitsOfMeasurementOfCurrency (:UnitsOfMeasurementOfCurrency)

SubClassOf(:UnitsOfMeasurementOfCurrency :UnitsOfMeasurement)

# Class: :UnitsOfMeasurementOfLength (:UnitsOfMeasurementOfLength)

SubClassOf(:UnitsOfMeasurementOfLength :UnitsOfMeasurement)

# Class: :UnitsOfMeasurementOfMass (:UnitsOfMeasurementOfMass)

SubClassOf(:UnitsOfMeasurementOfMass :UnitsOfMeasurement)

# Class: :UnitsOfMeasurementOfTime (:UnitsOfMeasurementOfTime)

SubClassOf(:UnitsOfMeasurementOfTime :UnitsOfMeasurement)

# Class: :UnpaidVolunteerWork (:UnpaidVolunteerWork)

AnnotationAssertion(rdfs:comment :UnpaidVolunteerWork "WL2"^^xsd:string)
SubClassOf(:UnpaidVolunteerWork :Employment)

# Class: :Urban (:Urban)

AnnotationAssertion(rdfs:comment :Urban "SD10"^^xsd:string)
SubClassOf(:Urban :Location)
SubClassOf(:Urban ObjectSomeValuesFrom(:isLocationOf DataHasValue(:hasLivingAreaValue "1"^^xsd:integer)))

# Class: :Vegetable (:Vegetable)

SubClassOf(:Vegetable :VegetablesAndFruit)

# Class: :VegetablesAndFruit (:VegetablesAndFruit)

AnnotationAssertion(rdfs:comment :VegetablesAndFruit "FC3"^^xsd:string)
SubClassOf(:VegetablesAndFruit :Food)
SubClassOf(:VegetablesAndFruit ObjectSomeValuesFrom(:hasFrequency :WeeklyFrequency))

# Class: :VocationalSchool (:VocationalSchool)

AnnotationAssertion(rdfs:comment :VocationalSchool "SD3"^^xsd:string)
SubClassOf(:VocationalSchool :QualificationLevel)
SubClassOf(:VocationalSchool ObjectSomeValuesFrom(:isTheQualificationLevelOf DataHasValue(:hasHighestQualficationLevelValue "5"^^xsd:integer)))

# Class: :Walking (:Walking)

SubClassOf(:Walking :Transport)
SubClassOf(:Walking ObjectSomeValuesFrom(:isTransportUsedForTravel DataHasValue(:journeyHasMeansOfTransportationValue "1"^^xsd:integer)))

# Class: :WashingMachine (:WashingMachine)

AnnotationAssertion(rdfs:comment :WashingMachine "EU12"^^xsd:string)
SubClassOf(:WashingMachine :ConsumerDurables)

# Class: :Waste (:Waste)

AnnotationAssertion(rdfs:comment :Waste "FC6"^^xsd:string)
SubClassOf(:Waste :Food)

# Class: :WaterHeating (:WaterHeating)

SubClassOf(:WaterHeating :Heating)

# Class: :WaterHeatingMethodUnknown (:WaterHeatingMethodUnknown)

AnnotationAssertion(rdfs:comment :WaterHeatingMethodUnknown "EU7"^^xsd:string)
SubClassOf(:WaterHeatingMethodUnknown :WaterHeating)
SubClassOf(:WaterHeatingMethodUnknown ObjectSomeValuesFrom(:isWaterHeatingFor DataHasValue(:doesNotKnowHowWaterIsHeated "true"^^xsd:boolean)))

# Class: :WaterIsNotHeated (:WaterIsNotHeated)

AnnotationAssertion(rdfs:comment :WaterIsNotHeated "EU7"^^xsd:string)
SubClassOf(:WaterIsNotHeated :WaterHeating)
SubClassOf(:WaterIsNotHeated ObjectSomeValuesFrom(:isWaterHeatingFor DataHasValue(:doesNotHeatWater "true"^^xsd:boolean)))

# Class: :Week (:Week)

SubClassOf(:Week :UnitsOfMeasurementOfTime)

# Class: :WeeklyFrequency (:WeeklyFrequency)

SubClassOf(:WeeklyFrequency :Frequency)
SubClassOf(:WeeklyFrequency ObjectSomeValuesFrom(:hasUnits :Days))
SubClassOf(:WeeklyFrequency ObjectSomeValuesFrom(:isPerUnit :Week))

# Class: :Weeks (:Weeks)

SubClassOf(:Weeks :Collection)

# Class: :Widow (:Widow)

SubClassOf(:Widow :Female)
SubClassOf(:Widow :WidowOrWidower)

# Class: :WidowOrWidower (:WidowOrWidower)

AnnotationAssertion(rdfs:comment :WidowOrWidower "SD4"^^xsd:string)
SubClassOf(:WidowOrWidower :Person)
SubClassOf(:WidowOrWidower DataHasValue(:hasMaritalStatusValue "5"^^xsd:integer))

# Class: :Widower (:Widower)

SubClassOf(:Widower :Male)
SubClassOf(:Widower :WidowOrWidower)

# Class: :WindTurbine (:WindTurbine)

SubClassOf(:WindTurbine :HomeGeneratedElectricity)
SubClassOf(:WindTurbine DataHasValue(:hasSourceOfHomeGenerationOfElectricityValue "2"^^xsd:integer))

# Class: :Winter (:Winter)

SubClassOf(:Winter :UnitsOfMeasurementOfTime)

# Class: :WithLessPlasticPackaging (:WithLessPlasticPackaging)

AnnotationAssertion(rdfs:comment :WithLessPlasticPackaging "FC4"^^xsd:string)
SubClassOf(:WithLessPlasticPackaging :Food)
SubClassOf(:WithLessPlasticPackaging ObjectSomeValuesFrom(:hasLess :PlasticPackaging))

# Class: :WorkTime (:WorkTime)

SubClassOf(:WorkTime :Time)

# Class: :WorkedInEducation (Worker in education (including apprenticeship))

AnnotationAssertion(rdfs:comment :WorkedInEducation "WL1a"^^xsd:string)
AnnotationAssertion(rdfs:label :WorkedInEducation "Worker in education (including apprenticeship)"@en)
SubClassOf(:WorkedInEducation :Employment)
SubClassOf(:WorkedInEducation ObjectSomeValuesFrom(:isEmploymentStatusFor DataHasValue(:hasCurrentEmploymentStatus "5"^^xsd:integer)))

# Class: :WorkingDay (:WorkingDay)

SubClassOf(:WorkingDay :Day)

# Class: :YouthHostel (:YouthHostel)

SubClassOf(:YouthHostel :Accomodation)
SubClassOf(:YouthHostel ObjectSomeValuesFrom(:usesAccomodation DataHasValue(:hasTypeOfAccommodationForPrivateTravelValue "6"^^xsd:integer)))


############################
#   Named Individuals
############################

# Individual: :author:DougSalt (Doug Salt)

AnnotationAssertion(rdfs:label :author:DougSalt "Doug Salt")


DisjointClasses(:AirBnBApartment :Apartment :BedAndBreakfast :CampingSite :Ecotourism :Hotel :OtherTypeOfAccomodation :StayAtFriendsHome :YouthHostel)
DisjointClasses(:ApartmentBlock :CollectionOfIndividuals :Flying :Multi-familyHouse :SingleFamilyHouse :TerracedHouse)
DisjointClasses(:ApartmentBlock :Multi-familyHouse :SingleFamilyHouse :TerracedHouse)
DisjointClasses(:Beef :CannedOrBottled :Chicken :Dairy :Pork :Preprepared :VegetablesAndFruit)
DisjointClasses(:Bicycle :Bus :Car :CommuterTrain :ElectricBicycle :Motorbike :OtherTransport :TramOrUnderground :Walking)
DisjointClasses(:CarAge10To15Years :CarAge5To10Years :CarAgeGreaterThan15Years :CarAgeLessThan5years)
DisjointClasses(:CarUsedByASingleDriver :CarUsedByHousehold :Carpool)
DisjointClasses(:CollegeDegree :DoctoralDegree :HighSchool :MastersDegree :NoEducation :PrimarySchool :SecondarySchool :VocationalSchool)
DisjointClasses(:Compact :LargeOrFamiliarOrStationWagon :Mini :SUVor4X4)
DisjointClasses(:Diesel :Electrical :GPLOrMethane :Gasoline :Hybrid)
DisjointClasses(:DieselGenerator :GasTurbine :OtherFormOfElectricalGeneration :SolarCellPanel :WindTurbine)
DisjointClasses(:DistrictHouseHeating :ElectricOrGasPumpHouseHeating :ElectricUnderfloorHeatingOrElectricConvectorsOrElectricAccumulators :GasHouseHeating :HomeHeatingMethodUnknown :HomeIsNotHeated :OilHouseHeating :PelletHouseHeating :SolarOrThermalHouseHeating)
DisjointClasses(:DistrictWaterHeating :ElectricOrGasPumpWaterHeating :ElectricWaterHeaterHeating :GasWaterHeating :OilWaterHeating :PelletWaterHeating :SolarOrThermalWaterHeating :WaterHeatingMethodUnknown :WaterIsNotHeated)
DisjointClasses(:DivorcedOrSeparated :Married :SingleLivingAlone :SingleLivingWithOthers :WidowOrWidower)
DisjointClasses(:EatingOut :InStorePurchases :TakeAway)
DisjointClasses(:EmployedFullTime :EmployedPartTime :EntrepreneurWithStaff :EntrepreneurWithoutStaff :HouseWorkerOrHouseWife :JobSeeker :MaternityLeave :OccasionalTemporaryContracts :Retired :Student :Unemployed :WorkedInEducation)
DisjointClasses(:FiveDays :FourDays :OneDay :SixToSevenDays :ThreeDays :TwoDays)
DisjointClasses(:FiveDays :FourDays :SevenDays :SixToSevenDays :ThreeDays :TwoDays)
DisjointClasses(:FiveDays :FourDays :SixToSevenDays :ThreeDays :TwoDays)
DisjointClasses(:Rural :Surburban :Urban)
)
